[
{
  "name": "data-table",
  "description": "Description for data-table component.",
  "usage": "\"'use client'\\n\\nimport {\\n\\tColumnDef,\\n\\tflexRender,\\n\\tgetCoreRowModel,\\n\\tgetFilteredRowModel,\\n\\tuseReactTable,\\n} from '@tanstack/react-table'\\n\\nimport {\\n\\tButton,\\n\\tScrollArea,\\n\\tScrollBar,\\n\\tTable,\\n\\tTableBody,\\n\\tTableCell,\\n\\tTableHead,\\n\\tTableHeader,\\n\\tTableRow,\\n} from '@/modules/shadcn/components/ui'\\n\\ninterface DataTableProps<TData, TValue> {\\n\\tcolumns: ColumnDef<TData, TValue>[]\\n\\tdata: TData[]\\n\\tsearchKey: string\\n}\\n\\nexport function DataTable<TData, TValue>({\\n\\tcolumns,\\n\\tdata,\\n\\t// searchKey\\n}: DataTableProps<TData, TValue>) {\\n\\tconst table = useReactTable({\\n\\t\\tdata,\\n\\t\\tcolumns,\\n\\t\\tgetCoreRowModel: getCoreRowModel(),\\n\\t\\tgetFilteredRowModel: getFilteredRowModel(),\\n\\t})\\n\\n\\treturn (\\n\\t\\t<>\\n\\t\\t\\t{/* <Input\\n        placeholder={`Search a ${searchKey}`}\\n        value={(table.getColumn(searchKey)?.getFilterValue() as string) ?? ''}\\n        onChange={(event) =>\\n          table.getColumn(searchKey)?.setFilterValue(event.target.value)\\n        }\\n        className=\\\"w-full md:max-w-sm\\\"\\n      /> */}\\n\\t\\t\\t<ScrollArea className=\\\" rounded-md border\\\">\\n\\t\\t\\t\\t<Table className=\\\"relative\\\">\\n\\t\\t\\t\\t\\t<TableHeader>\\n\\t\\t\\t\\t\\t\\t{table.getHeaderGroups().map((headerGroup) => (\\n\\t\\t\\t\\t\\t\\t\\t<TableRow key={headerGroup.id}>\\n\\t\\t\\t\\t\\t\\t\\t\\t{headerGroup.headers.map((header) => {\\n\\t\\t\\t\\t\\t\\t\\t\\t\\treturn (\\n\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t<TableHead key={header.id}>\\n\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t{header.isPlaceholder\\n\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t? null\\n\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t: flexRender(\\n\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\theader.column.columnDef.header,\\n\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\theader.getContext()\\n\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t)}\\n\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t</TableHead>\\n\\t\\t\\t\\t\\t\\t\\t\\t\\t)\\n\\t\\t\\t\\t\\t\\t\\t\\t})}\\n\\t\\t\\t\\t\\t\\t\\t</TableRow>\\n\\t\\t\\t\\t\\t\\t))}\\n\\t\\t\\t\\t\\t</TableHeader>\\n\\t\\t\\t\\t\\t<TableBody>\\n\\t\\t\\t\\t\\t\\t{table.getRowModel().rows?.length ? (\\n\\t\\t\\t\\t\\t\\t\\ttable.getRowModel().rows.map((row) => (\\n\\t\\t\\t\\t\\t\\t\\t\\t<TableRow\\n\\t\\t\\t\\t\\t\\t\\t\\t\\tkey={row.id}\\n\\t\\t\\t\\t\\t\\t\\t\\t\\tdata-state={row.getIsSelected() && 'selected'}\\n\\t\\t\\t\\t\\t\\t\\t\\t>\\n\\t\\t\\t\\t\\t\\t\\t\\t\\t{row.getVisibleCells().map((cell) => (\\n\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t<TableCell key={cell.id}>\\n\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t{flexRender(\\n\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\tcell.column.columnDef.cell,\\n\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\tcell.getContext()\\n\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t)}\\n\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t</TableCell>\\n\\t\\t\\t\\t\\t\\t\\t\\t\\t))}\\n\\t\\t\\t\\t\\t\\t\\t\\t</TableRow>\\n\\t\\t\\t\\t\\t\\t\\t))\\n\\t\\t\\t\\t\\t\\t) : (\\n\\t\\t\\t\\t\\t\\t\\t<TableRow>\\n\\t\\t\\t\\t\\t\\t\\t\\t<TableCell\\n\\t\\t\\t\\t\\t\\t\\t\\t\\tcolSpan={columns.length}\\n\\t\\t\\t\\t\\t\\t\\t\\t\\tclassName=\\\"h-24 text-center\\\"\\n\\t\\t\\t\\t\\t\\t\\t\\t>\\n\\t\\t\\t\\t\\t\\t\\t\\t\\tNo results.\\n\\t\\t\\t\\t\\t\\t\\t\\t</TableCell>\\n\\t\\t\\t\\t\\t\\t\\t</TableRow>\\n\\t\\t\\t\\t\\t\\t)}\\n\\t\\t\\t\\t\\t</TableBody>\\n\\t\\t\\t\\t</Table>\\n\\t\\t\\t\\t<ScrollBar orientation=\\\"horizontal\\\" />\\n\\t\\t\\t</ScrollArea>\\n\\t\\t\\t<div className=\\\"flex items-center justify-end space-x-2 py-4\\\">\\n\\t\\t\\t\\t<div className=\\\"flex-1 text-sm text-muted-foreground\\\">\\n\\t\\t\\t\\t\\t{table.getFilteredSelectedRowModel().rows.length} of{' '}\\n\\t\\t\\t\\t\\t{table.getFilteredRowModel().rows.length} row(s) selected.\\n\\t\\t\\t\\t</div>\\n\\t\\t\\t\\t<div className=\\\"space-x-2\\\">\\n\\t\\t\\t\\t\\t<Button\\n\\t\\t\\t\\t\\t\\tvariant=\\\"outline\\\"\\n\\t\\t\\t\\t\\t\\tsize=\\\"sm\\\"\\n\\t\\t\\t\\t\\t\\tonClick={() => table.previousPage()}\\n\\t\\t\\t\\t\\t\\tdisabled={!table.getCanPreviousPage()}\\n\\t\\t\\t\\t\\t>\\n\\t\\t\\t\\t\\t\\tPrevious\\n\\t\\t\\t\\t\\t</Button>\\n\\t\\t\\t\\t\\t<Button\\n\\t\\t\\t\\t\\t\\tvariant=\\\"outline\\\"\\n\\t\\t\\t\\t\\t\\tsize=\\\"sm\\\"\\n\\t\\t\\t\\t\\t\\tonClick={() => table.nextPage()}\\n\\t\\t\\t\\t\\t\\tdisabled={!table.getCanNextPage()}\\n\\t\\t\\t\\t\\t>\\n\\t\\t\\t\\t\\t\\tNext\\n\\t\\t\\t\\t\\t</Button>\\n\\t\\t\\t\\t</div>\\n\\t\\t\\t</div>\\n\\t\\t</>\\n\\t)\\n}\\n\"",
  "examples": [
    {
      "source": "data-table.tsx",
      "code": "\"'use client'\\n\\nimport {\\n\\tColumnDef,\\n\\tflexRender,\\n\\tgetCoreRowModel,\\n\\tgetFilteredRowModel,\\n\\tuseReactTable,\\n} from '@tanstack/react-table'\\n\\nimport {\\n\\tButton,\\n\\tScrollArea,\\n\\tScrollBar,\\n\\tTable,\\n\\tTableBody,\\n\\tTableCell,\\n\\tTableHead,\\n\\tTableHeader,\\n\\tTableRow,\\n} from '@/modules/shadcn/components/ui'\\n\\ninterface DataTableProps<TData, TValue> {\\n\\tcolumns: ColumnDef<TData, TValue>[]\\n\\tdata: TData[]\\n\\tsearchKey: string\\n}\\n\\nexport function DataTable<TData, TValue>({\\n\\tcolumns,\\n\\tdata,\\n\\t// searchKey\\n}: DataTableProps<TData, TValue>) {\\n\\tconst table = useReactTable({\\n\\t\\tdata,\\n\\t\\tcolumns,\\n\\t\\tgetCoreRowModel: getCoreRowModel(),\\n\\t\\tgetFilteredRowModel: getFilteredRowModel(),\\n\\t})\\n\\n\\treturn (\\n\\t\\t<>\\n\\t\\t\\t{/* <Input\\n        placeholder={`Search a ${searchKey}`}\\n        value={(table.getColumn(searchKey)?.getFilterValue() as string) ?? ''}\\n        onChange={(event) =>\\n          table.getColumn(searchKey)?.setFilterValue(event.target.value)\\n        }\\n        className=\\\"w-full md:max-w-sm\\\"\\n      /> */}\\n\\t\\t\\t<ScrollArea className=\\\" rounded-md border\\\">\\n\\t\\t\\t\\t<Table className=\\\"relative\\\">\\n\\t\\t\\t\\t\\t<TableHeader>\\n\\t\\t\\t\\t\\t\\t{table.getHeaderGroups().map((headerGroup) => (\\n\\t\\t\\t\\t\\t\\t\\t<TableRow key={headerGroup.id}>\\n\\t\\t\\t\\t\\t\\t\\t\\t{headerGroup.headers.map((header) => {\\n\\t\\t\\t\\t\\t\\t\\t\\t\\treturn (\\n\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t<TableHead key={header.id}>\\n\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t{header.isPlaceholder\\n\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t? null\\n\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t: flexRender(\\n\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\theader.column.columnDef.header,\\n\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\theader.getContext()\\n\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t)}\\n\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t</TableHead>\\n\\t\\t\\t\\t\\t\\t\\t\\t\\t)\\n\\t\\t\\t\\t\\t\\t\\t\\t})}\\n\\t\\t\\t\\t\\t\\t\\t</TableRow>\\n\\t\\t\\t\\t\\t\\t))}\\n\\t\\t\\t\\t\\t</TableHeader>\\n\\t\\t\\t\\t\\t<TableBody>\\n\\t\\t\\t\\t\\t\\t{table.getRowModel().rows?.length ? (\\n\\t\\t\\t\\t\\t\\t\\ttable.getRowModel().rows.map((row) => (\\n\\t\\t\\t\\t\\t\\t\\t\\t<TableRow\\n\\t\\t\\t\\t\\t\\t\\t\\t\\tkey={row.id}\\n\\t\\t\\t\\t\\t\\t\\t\\t\\tdata-state={row.getIsSelected() && 'selected'}\\n\\t\\t\\t\\t\\t\\t\\t\\t>\\n\\t\\t\\t\\t\\t\\t\\t\\t\\t{row.getVisibleCells().map((cell) => (\\n\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t<TableCell key={cell.id}>\\n\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t{flexRender(\\n\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\tcell.column.columnDef.cell,\\n\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\tcell.getContext()\\n\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t)}\\n\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t</TableCell>\\n\\t\\t\\t\\t\\t\\t\\t\\t\\t))}\\n\\t\\t\\t\\t\\t\\t\\t\\t</TableRow>\\n\\t\\t\\t\\t\\t\\t\\t))\\n\\t\\t\\t\\t\\t\\t) : (\\n\\t\\t\\t\\t\\t\\t\\t<TableRow>\\n\\t\\t\\t\\t\\t\\t\\t\\t<TableCell\\n\\t\\t\\t\\t\\t\\t\\t\\t\\tcolSpan={columns.length}\\n\\t\\t\\t\\t\\t\\t\\t\\t\\tclassName=\\\"h-24 text-center\\\"\\n\\t\\t\\t\\t\\t\\t\\t\\t>\\n\\t\\t\\t\\t\\t\\t\\t\\t\\tNo results.\\n\\t\\t\\t\\t\\t\\t\\t\\t</TableCell>\\n\\t\\t\\t\\t\\t\\t\\t</TableRow>\\n\\t\\t\\t\\t\\t\\t)}\\n\\t\\t\\t\\t\\t</TableBody>\\n\\t\\t\\t\\t</Table>\\n\\t\\t\\t\\t<ScrollBar orientation=\\\"horizontal\\\" />\\n\\t\\t\\t</ScrollArea>\\n\\t\\t\\t<div className=\\\"flex items-center justify-end space-x-2 py-4\\\">\\n\\t\\t\\t\\t<div className=\\\"flex-1 text-sm text-muted-foreground\\\">\\n\\t\\t\\t\\t\\t{table.getFilteredSelectedRowModel().rows.length} of{' '}\\n\\t\\t\\t\\t\\t{table.getFilteredRowModel().rows.length} row(s) selected.\\n\\t\\t\\t\\t</div>\\n\\t\\t\\t\\t<div className=\\\"space-x-2\\\">\\n\\t\\t\\t\\t\\t<Button\\n\\t\\t\\t\\t\\t\\tvariant=\\\"outline\\\"\\n\\t\\t\\t\\t\\t\\tsize=\\\"sm\\\"\\n\\t\\t\\t\\t\\t\\tonClick={() => table.previousPage()}\\n\\t\\t\\t\\t\\t\\tdisabled={!table.getCanPreviousPage()}\\n\\t\\t\\t\\t\\t>\\n\\t\\t\\t\\t\\t\\tPrevious\\n\\t\\t\\t\\t\\t</Button>\\n\\t\\t\\t\\t\\t<Button\\n\\t\\t\\t\\t\\t\\tvariant=\\\"outline\\\"\\n\\t\\t\\t\\t\\t\\tsize=\\\"sm\\\"\\n\\t\\t\\t\\t\\t\\tonClick={() => table.nextPage()}\\n\\t\\t\\t\\t\\t\\tdisabled={!table.getCanNextPage()}\\n\\t\\t\\t\\t\\t>\\n\\t\\t\\t\\t\\t\\tNext\\n\\t\\t\\t\\t\\t</Button>\\n\\t\\t\\t\\t</div>\\n\\t\\t\\t</div>\\n\\t\\t</>\\n\\t)\\n}\\n\""
    }
  ]
}
,
{
  "name": "tabs",
  "description": "Description for tabs component.",
  "usage": "\"'use client'\\n\\nimport { ElementRef, forwardRef, ComponentPropsWithoutRef } from 'react'\\nimport * as TabsPrimitive from '@radix-ui/react-tabs'\\n\\nimport { cn } from '@/modules/shadcn/lib/utils'\\n\\nconst Tabs = TabsPrimitive.Root\\n\\nconst TabsList = forwardRef<\\n\\tElementRef<typeof TabsPrimitive.List>,\\n\\tComponentPropsWithoutRef<typeof TabsPrimitive.List>\\n>(({ className, ...props }, ref) => (\\n\\t<TabsPrimitive.List\\n\\t\\tref={ref}\\n\\t\\tclassName={cn(\\n\\t\\t\\t'inline-flex h-10 items-center justify-center rounded-md bg-muted p-1 text-muted-foreground',\\n\\t\\t\\tclassName\\n\\t\\t)}\\n\\t\\t{...props}\\n\\t/>\\n))\\nTabsList.displayName = TabsPrimitive.List.displayName\\n\\nconst TabsTrigger = forwardRef<\\n\\tElementRef<typeof TabsPrimitive.Trigger>,\\n\\tComponentPropsWithoutRef<typeof TabsPrimitive.Trigger>\\n>(({ className, ...props }, ref) => (\\n\\t<TabsPrimitive.Trigger\\n\\t\\tref={ref}\\n\\t\\tclassName={cn(\\n\\t\\t\\t'inline-flex items-center justify-center whitespace-nowrap rounded-sm px-3 py-1.5 text-sm font-medium ring-offset-background transition-all focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2 disabled:pointer-events-none disabled:opacity-50 data-[state=active]:bg-card/70 data-[state=active]:text-foreground data-[state=active]:shadow-sm',\\n\\t\\t\\tclassName\\n\\t\\t)}\\n\\t\\t{...props}\\n\\t/>\\n))\\nTabsTrigger.displayName = TabsPrimitive.Trigger.displayName\\n\\nconst TabsContent = forwardRef<\\n\\tElementRef<typeof TabsPrimitive.Content>,\\n\\tComponentPropsWithoutRef<typeof TabsPrimitive.Content>\\n>(({ className, ...props }, ref) => (\\n\\t<TabsPrimitive.Content\\n\\t\\tref={ref}\\n\\t\\tclassName={cn(\\n\\t\\t\\t'mt-2 ring-offset-background focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2',\\n\\t\\t\\tclassName\\n\\t\\t)}\\n\\t\\t{...props}\\n\\t/>\\n))\\nTabsContent.displayName = TabsPrimitive.Content.displayName\\n\\nexport { Tabs, TabsList, TabsTrigger, TabsContent }\\n\"",
  "examples": [
    {
      "source": "tabs.tsx",
      "code": "\"'use client'\\n\\nimport { ElementRef, forwardRef, ComponentPropsWithoutRef } from 'react'\\nimport * as TabsPrimitive from '@radix-ui/react-tabs'\\n\\nimport { cn } from '@/modules/shadcn/lib/utils'\\n\\nconst Tabs = TabsPrimitive.Root\\n\\nconst TabsList = forwardRef<\\n\\tElementRef<typeof TabsPrimitive.List>,\\n\\tComponentPropsWithoutRef<typeof TabsPrimitive.List>\\n>(({ className, ...props }, ref) => (\\n\\t<TabsPrimitive.List\\n\\t\\tref={ref}\\n\\t\\tclassName={cn(\\n\\t\\t\\t'inline-flex h-10 items-center justify-center rounded-md bg-muted p-1 text-muted-foreground',\\n\\t\\t\\tclassName\\n\\t\\t)}\\n\\t\\t{...props}\\n\\t/>\\n))\\nTabsList.displayName = TabsPrimitive.List.displayName\\n\\nconst TabsTrigger = forwardRef<\\n\\tElementRef<typeof TabsPrimitive.Trigger>,\\n\\tComponentPropsWithoutRef<typeof TabsPrimitive.Trigger>\\n>(({ className, ...props }, ref) => (\\n\\t<TabsPrimitive.Trigger\\n\\t\\tref={ref}\\n\\t\\tclassName={cn(\\n\\t\\t\\t'inline-flex items-center justify-center whitespace-nowrap rounded-sm px-3 py-1.5 text-sm font-medium ring-offset-background transition-all focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2 disabled:pointer-events-none disabled:opacity-50 data-[state=active]:bg-card/70 data-[state=active]:text-foreground data-[state=active]:shadow-sm',\\n\\t\\t\\tclassName\\n\\t\\t)}\\n\\t\\t{...props}\\n\\t/>\\n))\\nTabsTrigger.displayName = TabsPrimitive.Trigger.displayName\\n\\nconst TabsContent = forwardRef<\\n\\tElementRef<typeof TabsPrimitive.Content>,\\n\\tComponentPropsWithoutRef<typeof TabsPrimitive.Content>\\n>(({ className, ...props }, ref) => (\\n\\t<TabsPrimitive.Content\\n\\t\\tref={ref}\\n\\t\\tclassName={cn(\\n\\t\\t\\t'mt-2 ring-offset-background focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2',\\n\\t\\t\\tclassName\\n\\t\\t)}\\n\\t\\t{...props}\\n\\t/>\\n))\\nTabsContent.displayName = TabsPrimitive.Content.displayName\\n\\nexport { Tabs, TabsList, TabsTrigger, TabsContent }\\n\""
    }
  ]
}
,
{
  "name": "card",
  "description": "Description for card component.",
  "usage": "\"import { forwardRef } from 'react'\\n\\nimport { cn } from '@/modules/shadcn/lib/utils'\\n\\nconst Card = forwardRef<HTMLDivElement, React.HTMLAttributes<HTMLDivElement>>(\\n\\t({ className, ...props }, ref) => (\\n\\t\\t<div\\n\\t\\t\\tref={ref}\\n\\t\\t\\tclassName={cn(\\n\\t\\t\\t\\t'rounded-lg border bg-card text-card-foreground shadow-sm',\\n\\t\\t\\t\\tclassName\\n\\t\\t\\t)}\\n\\t\\t\\t{...props}\\n\\t\\t/>\\n\\t)\\n)\\nCard.displayName = 'Card'\\n\\nconst CardHeader = forwardRef<\\n\\tHTMLDivElement,\\n\\tReact.HTMLAttributes<HTMLDivElement>\\n>(({ className, ...props }, ref) => (\\n\\t<div ref={ref} className={cn('flex flex-col p-6', className)} {...props} />\\n))\\nCardHeader.displayName = 'CardHeader'\\n\\nconst CardTitle = forwardRef<\\n\\tHTMLParagraphElement,\\n\\tReact.HTMLAttributes<HTMLHeadingElement>\\n>(({ className, ...props }, ref) => (\\n\\t<h3\\n\\t\\tref={ref}\\n\\t\\tclassName={cn(\\n\\t\\t\\t'text-2xl font-semibold leading-none tracking-tight',\\n\\t\\t\\tclassName\\n\\t\\t)}\\n\\t\\t{...props}\\n\\t/>\\n))\\nCardTitle.displayName = 'CardTitle'\\n\\nconst CardDescription = forwardRef<\\n\\tHTMLParagraphElement,\\n\\tReact.HTMLAttributes<HTMLParagraphElement>\\n>(({ className, ...props }, ref) => (\\n\\t<p\\n\\t\\tref={ref}\\n\\t\\tclassName={cn('text-sm text-muted-foreground', className)}\\n\\t\\t{...props}\\n\\t/>\\n))\\nCardDescription.displayName = 'CardDescription'\\n\\nconst CardContent = forwardRef<\\n\\tHTMLDivElement,\\n\\tReact.HTMLAttributes<HTMLDivElement>\\n>(({ className, ...props }, ref) => (\\n\\t<div ref={ref} className={cn('p-6 pt-0', className)} {...props} />\\n))\\nCardContent.displayName = 'CardContent'\\n\\nconst CardFooter = forwardRef<\\n\\tHTMLDivElement,\\n\\tReact.HTMLAttributes<HTMLDivElement>\\n>(({ className, ...props }, ref) => (\\n\\t<div\\n\\t\\tref={ref}\\n\\t\\tclassName={cn('flex items-center p-6 pt-0', className)}\\n\\t\\t{...props}\\n\\t/>\\n))\\nCardFooter.displayName = 'CardFooter'\\n\\nexport { Card, CardHeader, CardFooter, CardTitle, CardDescription, CardContent }\\n\"",
  "examples": [
    {
      "source": "card.tsx",
      "code": "\"import { forwardRef } from 'react'\\n\\nimport { cn } from '@/modules/shadcn/lib/utils'\\n\\nconst Card = forwardRef<HTMLDivElement, React.HTMLAttributes<HTMLDivElement>>(\\n\\t({ className, ...props }, ref) => (\\n\\t\\t<div\\n\\t\\t\\tref={ref}\\n\\t\\t\\tclassName={cn(\\n\\t\\t\\t\\t'rounded-lg border bg-card text-card-foreground shadow-sm',\\n\\t\\t\\t\\tclassName\\n\\t\\t\\t)}\\n\\t\\t\\t{...props}\\n\\t\\t/>\\n\\t)\\n)\\nCard.displayName = 'Card'\\n\\nconst CardHeader = forwardRef<\\n\\tHTMLDivElement,\\n\\tReact.HTMLAttributes<HTMLDivElement>\\n>(({ className, ...props }, ref) => (\\n\\t<div ref={ref} className={cn('flex flex-col p-6', className)} {...props} />\\n))\\nCardHeader.displayName = 'CardHeader'\\n\\nconst CardTitle = forwardRef<\\n\\tHTMLParagraphElement,\\n\\tReact.HTMLAttributes<HTMLHeadingElement>\\n>(({ className, ...props }, ref) => (\\n\\t<h3\\n\\t\\tref={ref}\\n\\t\\tclassName={cn(\\n\\t\\t\\t'text-2xl font-semibold leading-none tracking-tight',\\n\\t\\t\\tclassName\\n\\t\\t)}\\n\\t\\t{...props}\\n\\t/>\\n))\\nCardTitle.displayName = 'CardTitle'\\n\\nconst CardDescription = forwardRef<\\n\\tHTMLParagraphElement,\\n\\tReact.HTMLAttributes<HTMLParagraphElement>\\n>(({ className, ...props }, ref) => (\\n\\t<p\\n\\t\\tref={ref}\\n\\t\\tclassName={cn('text-sm text-muted-foreground', className)}\\n\\t\\t{...props}\\n\\t/>\\n))\\nCardDescription.displayName = 'CardDescription'\\n\\nconst CardContent = forwardRef<\\n\\tHTMLDivElement,\\n\\tReact.HTMLAttributes<HTMLDivElement>\\n>(({ className, ...props }, ref) => (\\n\\t<div ref={ref} className={cn('p-6 pt-0', className)} {...props} />\\n))\\nCardContent.displayName = 'CardContent'\\n\\nconst CardFooter = forwardRef<\\n\\tHTMLDivElement,\\n\\tReact.HTMLAttributes<HTMLDivElement>\\n>(({ className, ...props }, ref) => (\\n\\t<div\\n\\t\\tref={ref}\\n\\t\\tclassName={cn('flex items-center p-6 pt-0', className)}\\n\\t\\t{...props}\\n\\t/>\\n))\\nCardFooter.displayName = 'CardFooter'\\n\\nexport { Card, CardHeader, CardFooter, CardTitle, CardDescription, CardContent }\\n\""
    }
  ]
}
,
{
  "name": "popover",
  "description": "Description for popover component.",
  "usage": "\"'use client'\\n\\nimport * as React from 'react'\\nimport * as PopoverPrimitive from '@radix-ui/react-popover'\\n\\nimport { cn } from '@/modules/shadcn/lib/utils'\\n\\nconst Popover = PopoverPrimitive.Root\\n\\nconst PopoverTrigger = PopoverPrimitive.Trigger\\n\\nconst PopoverContent = React.forwardRef<\\n\\tReact.ElementRef<typeof PopoverPrimitive.Content>,\\n\\tReact.ComponentPropsWithoutRef<typeof PopoverPrimitive.Content>\\n>(({ className, align = 'center', sideOffset = 4, ...props }, ref) => (\\n\\t<PopoverPrimitive.Portal>\\n\\t\\t<PopoverPrimitive.Content\\n\\t\\t\\tref={ref}\\n\\t\\t\\talign={align}\\n\\t\\t\\tsideOffset={sideOffset}\\n\\t\\t\\tclassName={cn(\\n\\t\\t\\t\\t'z-50 w-72 rounded-md border bg-popover p-4 text-popover-foreground shadow-md outline-none data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[side=bottom]:slide-in-from-top-2 data-[side=left]:slide-in-from-right-2 data-[side=right]:slide-in-from-left-2 data-[side=top]:slide-in-from-bottom-2',\\n\\t\\t\\t\\tclassName\\n\\t\\t\\t)}\\n\\t\\t\\t{...props}\\n\\t\\t/>\\n\\t</PopoverPrimitive.Portal>\\n))\\nPopoverContent.displayName = PopoverPrimitive.Content.displayName\\n\\nexport { Popover, PopoverTrigger, PopoverContent }\\n\"",
  "examples": [
    {
      "source": "popover.tsx",
      "code": "\"'use client'\\n\\nimport * as React from 'react'\\nimport * as PopoverPrimitive from '@radix-ui/react-popover'\\n\\nimport { cn } from '@/modules/shadcn/lib/utils'\\n\\nconst Popover = PopoverPrimitive.Root\\n\\nconst PopoverTrigger = PopoverPrimitive.Trigger\\n\\nconst PopoverContent = React.forwardRef<\\n\\tReact.ElementRef<typeof PopoverPrimitive.Content>,\\n\\tReact.ComponentPropsWithoutRef<typeof PopoverPrimitive.Content>\\n>(({ className, align = 'center', sideOffset = 4, ...props }, ref) => (\\n\\t<PopoverPrimitive.Portal>\\n\\t\\t<PopoverPrimitive.Content\\n\\t\\t\\tref={ref}\\n\\t\\t\\talign={align}\\n\\t\\t\\tsideOffset={sideOffset}\\n\\t\\t\\tclassName={cn(\\n\\t\\t\\t\\t'z-50 w-72 rounded-md border bg-popover p-4 text-popover-foreground shadow-md outline-none data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[side=bottom]:slide-in-from-top-2 data-[side=left]:slide-in-from-right-2 data-[side=right]:slide-in-from-left-2 data-[side=top]:slide-in-from-bottom-2',\\n\\t\\t\\t\\tclassName\\n\\t\\t\\t)}\\n\\t\\t\\t{...props}\\n\\t\\t/>\\n\\t</PopoverPrimitive.Portal>\\n))\\nPopoverContent.displayName = PopoverPrimitive.Content.displayName\\n\\nexport { Popover, PopoverTrigger, PopoverContent }\\n\""
    }
  ]
}
,
{
  "name": "index",
  "description": "Description for index component.",
  "usage": "\"'use client'\\nimport React from 'react'\\nimport { DefaultValues, FormState, useForm } from 'react-hook-form'\\nimport { z } from 'zod'\\nimport { zodResolver } from '@hookform/resolvers/zod'\\n\\nimport { Form, Button } from '@/modules/shadcn/components/ui'\\nimport { cn } from '@/modules/shadcn/lib/utils'\\nimport AutoFormObject from '@/modules/shadcn/components/ui/auto-form/fields/object'\\nimport {\\n\\tDependency,\\n\\tFieldConfig,\\n} from '@/modules/shadcn/components/ui/auto-form/types'\\nimport {\\n\\tZodObjectOrWrapped,\\n\\tgetDefaultValues,\\n\\tgetObjectFormSchema,\\n} from '@/modules/shadcn/components/ui/auto-form/utils'\\n\\nexport function AutoFormSubmit({\\n\\tchildren,\\n\\tclassName,\\n\\tdisabled,\\n}: {\\n\\tchildren?: React.ReactNode\\n\\tclassName?: string\\n\\tdisabled?: boolean\\n}) {\\n\\treturn (\\n\\t\\t<Button type=\\\"submit\\\" disabled={disabled} className={className}>\\n\\t\\t\\t{children ?? 'Submit'}\\n\\t\\t</Button>\\n\\t)\\n}\\n\\nfunction AutoForm<SchemaType extends ZodObjectOrWrapped>({\\n\\tformSchema,\\n\\tvalues: valuesProp,\\n\\tonValuesChange: onValuesChangeProp,\\n\\tonParsedValuesChange,\\n\\tonSubmit: onSubmitProp,\\n\\tfieldConfig,\\n\\tchildren,\\n\\tclassName,\\n\\tdependencies,\\n}: {\\n\\tformSchema: SchemaType\\n\\tvalues?: Partial<z.infer<SchemaType>>\\n\\tonValuesChange?: (values: Partial<z.infer<SchemaType>>) => void\\n\\tonParsedValuesChange?: (values: Partial<z.infer<SchemaType>>) => void\\n\\tonSubmit?: (values: z.infer<SchemaType>) => void\\n\\tfieldConfig?: FieldConfig<z.infer<SchemaType>>\\n\\tchildren?:\\n\\t\\t| React.ReactNode\\n\\t\\t| ((formState: FormState<z.infer<SchemaType>>) => React.ReactNode)\\n\\tclassName?: string\\n\\tdependencies?: Dependency<z.infer<SchemaType>>[]\\n}) {\\n\\tconst objectFormSchema = getObjectFormSchema(formSchema)\\n\\tconst defaultValues: DefaultValues<z.infer<typeof objectFormSchema>> | null =\\n\\t\\tgetDefaultValues(objectFormSchema, fieldConfig)\\n\\n\\tconst form = useForm<z.infer<typeof objectFormSchema>>({\\n\\t\\tresolver: zodResolver(formSchema),\\n\\t\\tdefaultValues: defaultValues ?? undefined,\\n\\t\\tvalues: valuesProp,\\n\\t})\\n\\n\\tfunction onSubmit(values: z.infer<typeof formSchema>) {\\n\\t\\tconst parsedValues = formSchema.safeParse(values)\\n\\t\\tif (parsedValues.success) {\\n\\t\\t\\tonSubmitProp?.(parsedValues.data)\\n\\t\\t}\\n\\t}\\n\\n\\tconst values = form.watch()\\n\\t// valuesString is needed because form.watch() returns a new object every time\\n\\tconst valuesString = JSON.stringify(values)\\n\\n\\tReact.useEffect(() => {\\n\\t\\tonValuesChangeProp?.(values)\\n\\t\\tconst parsedValues = formSchema.safeParse(values)\\n\\t\\tif (parsedValues.success) {\\n\\t\\t\\tonParsedValuesChange?.(parsedValues.data)\\n\\t\\t}\\n\\t}, [valuesString])\\n\\n\\tconst renderChildren =\\n\\t\\ttypeof children === 'function'\\n\\t\\t\\t? children(form.formState as FormState<z.infer<SchemaType>>)\\n\\t\\t\\t: children\\n\\n\\treturn (\\n\\t\\t<div className=\\\"w-full\\\">\\n\\t\\t\\t<Form {...form}>\\n\\t\\t\\t\\t<form\\n\\t\\t\\t\\t\\tonSubmit={(e) => {\\n\\t\\t\\t\\t\\t\\tform.handleSubmit(onSubmit)(e)\\n\\t\\t\\t\\t\\t}}\\n\\t\\t\\t\\t\\tclassName={cn('space-y-5', className)}\\n\\t\\t\\t\\t>\\n\\t\\t\\t\\t\\t<AutoFormObject\\n\\t\\t\\t\\t\\t\\tschema={objectFormSchema}\\n\\t\\t\\t\\t\\t\\tform={form}\\n\\t\\t\\t\\t\\t\\tdependencies={dependencies}\\n\\t\\t\\t\\t\\t\\tfieldConfig={fieldConfig}\\n\\t\\t\\t\\t\\t/>\\n\\n\\t\\t\\t\\t\\t{renderChildren}\\n\\t\\t\\t\\t</form>\\n\\t\\t\\t</Form>\\n\\t\\t</div>\\n\\t)\\n}\\n\\nexport default AutoForm\\n\"",
  "examples": [
    {
      "source": "index.tsx",
      "code": "\"'use client'\\nimport React from 'react'\\nimport { DefaultValues, FormState, useForm } from 'react-hook-form'\\nimport { z } from 'zod'\\nimport { zodResolver } from '@hookform/resolvers/zod'\\n\\nimport { Form, Button } from '@/modules/shadcn/components/ui'\\nimport { cn } from '@/modules/shadcn/lib/utils'\\nimport AutoFormObject from '@/modules/shadcn/components/ui/auto-form/fields/object'\\nimport {\\n\\tDependency,\\n\\tFieldConfig,\\n} from '@/modules/shadcn/components/ui/auto-form/types'\\nimport {\\n\\tZodObjectOrWrapped,\\n\\tgetDefaultValues,\\n\\tgetObjectFormSchema,\\n} from '@/modules/shadcn/components/ui/auto-form/utils'\\n\\nexport function AutoFormSubmit({\\n\\tchildren,\\n\\tclassName,\\n\\tdisabled,\\n}: {\\n\\tchildren?: React.ReactNode\\n\\tclassName?: string\\n\\tdisabled?: boolean\\n}) {\\n\\treturn (\\n\\t\\t<Button type=\\\"submit\\\" disabled={disabled} className={className}>\\n\\t\\t\\t{children ?? 'Submit'}\\n\\t\\t</Button>\\n\\t)\\n}\\n\\nfunction AutoForm<SchemaType extends ZodObjectOrWrapped>({\\n\\tformSchema,\\n\\tvalues: valuesProp,\\n\\tonValuesChange: onValuesChangeProp,\\n\\tonParsedValuesChange,\\n\\tonSubmit: onSubmitProp,\\n\\tfieldConfig,\\n\\tchildren,\\n\\tclassName,\\n\\tdependencies,\\n}: {\\n\\tformSchema: SchemaType\\n\\tvalues?: Partial<z.infer<SchemaType>>\\n\\tonValuesChange?: (values: Partial<z.infer<SchemaType>>) => void\\n\\tonParsedValuesChange?: (values: Partial<z.infer<SchemaType>>) => void\\n\\tonSubmit?: (values: z.infer<SchemaType>) => void\\n\\tfieldConfig?: FieldConfig<z.infer<SchemaType>>\\n\\tchildren?:\\n\\t\\t| React.ReactNode\\n\\t\\t| ((formState: FormState<z.infer<SchemaType>>) => React.ReactNode)\\n\\tclassName?: string\\n\\tdependencies?: Dependency<z.infer<SchemaType>>[]\\n}) {\\n\\tconst objectFormSchema = getObjectFormSchema(formSchema)\\n\\tconst defaultValues: DefaultValues<z.infer<typeof objectFormSchema>> | null =\\n\\t\\tgetDefaultValues(objectFormSchema, fieldConfig)\\n\\n\\tconst form = useForm<z.infer<typeof objectFormSchema>>({\\n\\t\\tresolver: zodResolver(formSchema),\\n\\t\\tdefaultValues: defaultValues ?? undefined,\\n\\t\\tvalues: valuesProp,\\n\\t})\\n\\n\\tfunction onSubmit(values: z.infer<typeof formSchema>) {\\n\\t\\tconst parsedValues = formSchema.safeParse(values)\\n\\t\\tif (parsedValues.success) {\\n\\t\\t\\tonSubmitProp?.(parsedValues.data)\\n\\t\\t}\\n\\t}\\n\\n\\tconst values = form.watch()\\n\\t// valuesString is needed because form.watch() returns a new object every time\\n\\tconst valuesString = JSON.stringify(values)\\n\\n\\tReact.useEffect(() => {\\n\\t\\tonValuesChangeProp?.(values)\\n\\t\\tconst parsedValues = formSchema.safeParse(values)\\n\\t\\tif (parsedValues.success) {\\n\\t\\t\\tonParsedValuesChange?.(parsedValues.data)\\n\\t\\t}\\n\\t}, [valuesString])\\n\\n\\tconst renderChildren =\\n\\t\\ttypeof children === 'function'\\n\\t\\t\\t? children(form.formState as FormState<z.infer<SchemaType>>)\\n\\t\\t\\t: children\\n\\n\\treturn (\\n\\t\\t<div className=\\\"w-full\\\">\\n\\t\\t\\t<Form {...form}>\\n\\t\\t\\t\\t<form\\n\\t\\t\\t\\t\\tonSubmit={(e) => {\\n\\t\\t\\t\\t\\t\\tform.handleSubmit(onSubmit)(e)\\n\\t\\t\\t\\t\\t}}\\n\\t\\t\\t\\t\\tclassName={cn('space-y-5', className)}\\n\\t\\t\\t\\t>\\n\\t\\t\\t\\t\\t<AutoFormObject\\n\\t\\t\\t\\t\\t\\tschema={objectFormSchema}\\n\\t\\t\\t\\t\\t\\tform={form}\\n\\t\\t\\t\\t\\t\\tdependencies={dependencies}\\n\\t\\t\\t\\t\\t\\tfieldConfig={fieldConfig}\\n\\t\\t\\t\\t\\t/>\\n\\n\\t\\t\\t\\t\\t{renderChildren}\\n\\t\\t\\t\\t</form>\\n\\t\\t\\t</Form>\\n\\t\\t</div>\\n\\t)\\n}\\n\\nexport default AutoForm\\n\""
    }
  ]
}
,
{
  "name": "dependencies",
  "description": "Description for dependencies component.",
  "usage": "\"import { FieldValues, UseFormWatch } from 'react-hook-form'\\nimport * as z from 'zod'\\n\\nimport {\\n\\tDependency,\\n\\tDependencyType,\\n\\tEnumValues,\\n} from '@/modules/shadcn/components/ui/auto-form/types'\\n\\nexport default function resolveDependencies<\\n\\tSchemaType extends z.infer<z.ZodObject<any, any>>,\\n>(\\n\\tdependencies: Dependency<SchemaType>[],\\n\\tcurrentFieldName: keyof SchemaType,\\n\\twatch: UseFormWatch<FieldValues>\\n) {\\n\\tlet isDisabled = false\\n\\tlet isHidden = false\\n\\tlet isRequired = false\\n\\tlet overrideOptions: EnumValues | undefined\\n\\n\\tconst currentFieldValue = watch(currentFieldName as string)\\n\\n\\tconst currentFieldDependencies = dependencies.filter(\\n\\t\\t(dependency) => dependency.targetField === currentFieldName\\n\\t)\\n\\tfor (const dependency of currentFieldDependencies) {\\n\\t\\tconst watchedValue = watch(dependency.sourceField as string)\\n\\n\\t\\tconst conditionMet = dependency.when(watchedValue, currentFieldValue)\\n\\n\\t\\tswitch (dependency.type) {\\n\\t\\t\\tcase DependencyType.DISABLES:\\n\\t\\t\\t\\tif (conditionMet) {\\n\\t\\t\\t\\t\\tisDisabled = true\\n\\t\\t\\t\\t}\\n\\t\\t\\t\\tbreak\\n\\t\\t\\tcase DependencyType.REQUIRES:\\n\\t\\t\\t\\tif (conditionMet) {\\n\\t\\t\\t\\t\\tisRequired = true\\n\\t\\t\\t\\t}\\n\\t\\t\\t\\tbreak\\n\\t\\t\\tcase DependencyType.HIDES:\\n\\t\\t\\t\\tif (conditionMet) {\\n\\t\\t\\t\\t\\tisHidden = true\\n\\t\\t\\t\\t}\\n\\t\\t\\t\\tbreak\\n\\t\\t\\tcase DependencyType.SETS_OPTIONS:\\n\\t\\t\\t\\tif (conditionMet) {\\n\\t\\t\\t\\t\\toverrideOptions = dependency.options\\n\\t\\t\\t\\t}\\n\\t\\t\\t\\tbreak\\n\\t\\t}\\n\\t}\\n\\n\\treturn {\\n\\t\\tisDisabled,\\n\\t\\tisHidden,\\n\\t\\tisRequired,\\n\\t\\toverrideOptions,\\n\\t}\\n}\\n\"",
  "examples": [
    {
      "source": "dependencies.tsx",
      "code": "\"import { FieldValues, UseFormWatch } from 'react-hook-form'\\nimport * as z from 'zod'\\n\\nimport {\\n\\tDependency,\\n\\tDependencyType,\\n\\tEnumValues,\\n} from '@/modules/shadcn/components/ui/auto-form/types'\\n\\nexport default function resolveDependencies<\\n\\tSchemaType extends z.infer<z.ZodObject<any, any>>,\\n>(\\n\\tdependencies: Dependency<SchemaType>[],\\n\\tcurrentFieldName: keyof SchemaType,\\n\\twatch: UseFormWatch<FieldValues>\\n) {\\n\\tlet isDisabled = false\\n\\tlet isHidden = false\\n\\tlet isRequired = false\\n\\tlet overrideOptions: EnumValues | undefined\\n\\n\\tconst currentFieldValue = watch(currentFieldName as string)\\n\\n\\tconst currentFieldDependencies = dependencies.filter(\\n\\t\\t(dependency) => dependency.targetField === currentFieldName\\n\\t)\\n\\tfor (const dependency of currentFieldDependencies) {\\n\\t\\tconst watchedValue = watch(dependency.sourceField as string)\\n\\n\\t\\tconst conditionMet = dependency.when(watchedValue, currentFieldValue)\\n\\n\\t\\tswitch (dependency.type) {\\n\\t\\t\\tcase DependencyType.DISABLES:\\n\\t\\t\\t\\tif (conditionMet) {\\n\\t\\t\\t\\t\\tisDisabled = true\\n\\t\\t\\t\\t}\\n\\t\\t\\t\\tbreak\\n\\t\\t\\tcase DependencyType.REQUIRES:\\n\\t\\t\\t\\tif (conditionMet) {\\n\\t\\t\\t\\t\\tisRequired = true\\n\\t\\t\\t\\t}\\n\\t\\t\\t\\tbreak\\n\\t\\t\\tcase DependencyType.HIDES:\\n\\t\\t\\t\\tif (conditionMet) {\\n\\t\\t\\t\\t\\tisHidden = true\\n\\t\\t\\t\\t}\\n\\t\\t\\t\\tbreak\\n\\t\\t\\tcase DependencyType.SETS_OPTIONS:\\n\\t\\t\\t\\tif (conditionMet) {\\n\\t\\t\\t\\t\\toverrideOptions = dependency.options\\n\\t\\t\\t\\t}\\n\\t\\t\\t\\tbreak\\n\\t\\t}\\n\\t}\\n\\n\\treturn {\\n\\t\\tisDisabled,\\n\\t\\tisHidden,\\n\\t\\tisRequired,\\n\\t\\toverrideOptions,\\n\\t}\\n}\\n\""
    }
  ]
}
,
{
  "name": "utils",
  "description": "Description for utils component.",
  "usage": "\"import React from 'react'\\nimport { DefaultValues } from 'react-hook-form'\\nimport { z } from 'zod'\\n\\nimport { FieldConfig } from '@/modules/shadcn/components/ui/auto-form/types'\\n\\n// TODO: This should support recursive ZodEffects but TypeScript doesn't allow circular type definitions.\\nexport type ZodObjectOrWrapped =\\n\\t| z.ZodObject<any, any>\\n\\t| z.ZodEffects<z.ZodObject<any, any>>\\n\\n/**\\n * Beautify a camelCase string.\\n * e.g. \\\"myString\\\" -> \\\"My String\\\"\\n */\\nexport function beautifyObjectName(string: string) {\\n\\t// if numbers only return the string\\n\\tlet output = string.replace(/([A-Z])/g, ' $1')\\n\\toutput = output.charAt(0).toUpperCase() + output.slice(1)\\n\\treturn output\\n}\\n\\n/**\\n * Get the lowest level Zod type.\\n * This will unpack optionals, refinements, etc.\\n */\\nexport function getBaseSchema<\\n\\tChildType extends z.ZodAny | z.AnyZodObject = z.ZodAny,\\n>(schema: ChildType | z.ZodEffects<ChildType>): ChildType | null {\\n\\tif (!schema) return null\\n\\tif ('innerType' in schema._def) {\\n\\t\\treturn getBaseSchema(schema._def.innerType as ChildType)\\n\\t}\\n\\tif ('schema' in schema._def) {\\n\\t\\treturn getBaseSchema(schema._def.schema as ChildType)\\n\\t}\\n\\n\\treturn schema as ChildType\\n}\\n\\n/**\\n * Get the type name of the lowest level Zod type.\\n * This will unpack optionals, refinements, etc.\\n */\\nexport function getBaseType(schema: z.ZodAny): string {\\n\\tconst baseSchema = getBaseSchema(schema)\\n\\treturn baseSchema ? baseSchema._def.typeName : ''\\n}\\n\\n/**\\n * Search for a \\\"ZodDefult\\\" in the Zod stack and return its value.\\n */\\nexport function getDefaultValueInZodStack(schema: z.ZodAny): any {\\n\\tconst typedSchema = schema as unknown as z.ZodDefault<\\n\\t\\tz.ZodNumber | z.ZodString\\n\\t>\\n\\n\\tif (typedSchema._def.typeName === 'ZodDefault') {\\n\\t\\treturn typedSchema._def.defaultValue()\\n\\t}\\n\\n\\tif ('innerType' in typedSchema._def) {\\n\\t\\treturn getDefaultValueInZodStack(\\n\\t\\t\\ttypedSchema._def.innerType as unknown as z.ZodAny\\n\\t\\t)\\n\\t}\\n\\tif ('schema' in typedSchema._def) {\\n\\t\\treturn getDefaultValueInZodStack(\\n\\t\\t\\t(typedSchema._def as any).schema as z.ZodAny\\n\\t\\t)\\n\\t}\\n\\n\\treturn undefined\\n}\\n\\n/**\\n * Get all default values from a Zod schema.\\n */\\nexport function getDefaultValues<Schema extends z.ZodObject<any, any>>(\\n\\tschema: Schema,\\n\\tfieldConfig?: FieldConfig<z.infer<Schema>>\\n) {\\n\\tif (!schema) return null\\n\\tconst { shape } = schema\\n\\ttype DefaultValuesType = DefaultValues<Partial<z.infer<Schema>>>\\n\\tconst defaultValues = {} as DefaultValuesType\\n\\tif (!shape) return defaultValues\\n\\n\\tfor (const key of Object.keys(shape)) {\\n\\t\\tconst item = shape[key] as z.ZodAny\\n\\n\\t\\tif (getBaseType(item) === 'ZodObject') {\\n\\t\\t\\tconst defaultItems = getDefaultValues(\\n\\t\\t\\t\\tgetBaseSchema(item) as unknown as z.ZodObject<any, any>,\\n\\t\\t\\t\\tfieldConfig?.[key] as FieldConfig<z.infer<Schema>>\\n\\t\\t\\t)\\n\\n\\t\\t\\tif (defaultItems !== null) {\\n\\t\\t\\t\\tfor (const defaultItemKey of Object.keys(defaultItems)) {\\n\\t\\t\\t\\t\\tconst pathKey = `${key}.${defaultItemKey}` as keyof DefaultValuesType\\n\\t\\t\\t\\t\\tdefaultValues[pathKey] = defaultItems[defaultItemKey]\\n\\t\\t\\t\\t}\\n\\t\\t\\t}\\n\\t\\t} else {\\n\\t\\t\\tlet defaultValue = getDefaultValueInZodStack(item)\\n\\t\\t\\tif (\\n\\t\\t\\t\\t(defaultValue === null || defaultValue === '') &&\\n\\t\\t\\t\\tfieldConfig?.[key]?.inputProps\\n\\t\\t\\t) {\\n\\t\\t\\t\\tdefaultValue = (fieldConfig?.[key]?.inputProps as unknown as any)\\n\\t\\t\\t\\t\\t.defaultValue\\n\\t\\t\\t}\\n\\t\\t\\tif (defaultValue !== undefined) {\\n\\t\\t\\t\\tdefaultValues[key as keyof DefaultValuesType] = defaultValue\\n\\t\\t\\t}\\n\\t\\t}\\n\\t}\\n\\n\\treturn defaultValues\\n}\\n\\nexport function getObjectFormSchema(\\n\\tschema: ZodObjectOrWrapped\\n): z.ZodObject<any, any> {\\n\\tif (schema?._def.typeName === 'ZodEffects') {\\n\\t\\tconst typedSchema = schema as z.ZodEffects<z.ZodObject<any, any>>\\n\\t\\treturn getObjectFormSchema(typedSchema._def.schema)\\n\\t}\\n\\treturn schema as z.ZodObject<any, any>\\n}\\n\\n/**\\n * Convert a Zod schema to HTML input props to give direct feedback to the user.\\n * Once submitted, the schema will be validated completely.\\n */\\nexport function zodToHtmlInputProps(\\n\\tschema:\\n\\t\\t| z.ZodNumber\\n\\t\\t| z.ZodString\\n\\t\\t| z.ZodOptional<z.ZodNumber | z.ZodString>\\n\\t\\t| any\\n): React.InputHTMLAttributes<HTMLInputElement> {\\n\\tif (['ZodOptional', 'ZodNullable'].includes(schema._def.typeName)) {\\n\\t\\tconst typedSchema = schema as z.ZodOptional<z.ZodNumber | z.ZodString>\\n\\t\\treturn {\\n\\t\\t\\t...zodToHtmlInputProps(typedSchema._def.innerType),\\n\\t\\t\\trequired: false,\\n\\t\\t}\\n\\t}\\n\\tconst typedSchema = schema as z.ZodNumber | z.ZodString\\n\\n\\tif (!('checks' in typedSchema._def))\\n\\t\\treturn {\\n\\t\\t\\trequired: true,\\n\\t\\t}\\n\\n\\tconst { checks } = typedSchema._def\\n\\tconst inputProps: React.InputHTMLAttributes<HTMLInputElement> = {\\n\\t\\trequired: true,\\n\\t}\\n\\tconst type = getBaseType(schema)\\n\\n\\tfor (const check of checks) {\\n\\t\\tif (check.kind === 'min') {\\n\\t\\t\\tif (type === 'ZodString') {\\n\\t\\t\\t\\tinputProps.minLength = check.value\\n\\t\\t\\t} else {\\n\\t\\t\\t\\tinputProps.min = check.value\\n\\t\\t\\t}\\n\\t\\t}\\n\\t\\tif (check.kind === 'max') {\\n\\t\\t\\tif (type === 'ZodString') {\\n\\t\\t\\t\\tinputProps.maxLength = check.value\\n\\t\\t\\t} else {\\n\\t\\t\\t\\tinputProps.max = check.value\\n\\t\\t\\t}\\n\\t\\t}\\n\\t}\\n\\n\\treturn inputProps\\n}\\n\"",
  "examples": [
    {
      "source": "utils.tsx",
      "code": "\"import React from 'react'\\nimport { DefaultValues } from 'react-hook-form'\\nimport { z } from 'zod'\\n\\nimport { FieldConfig } from '@/modules/shadcn/components/ui/auto-form/types'\\n\\n// TODO: This should support recursive ZodEffects but TypeScript doesn't allow circular type definitions.\\nexport type ZodObjectOrWrapped =\\n\\t| z.ZodObject<any, any>\\n\\t| z.ZodEffects<z.ZodObject<any, any>>\\n\\n/**\\n * Beautify a camelCase string.\\n * e.g. \\\"myString\\\" -> \\\"My String\\\"\\n */\\nexport function beautifyObjectName(string: string) {\\n\\t// if numbers only return the string\\n\\tlet output = string.replace(/([A-Z])/g, ' $1')\\n\\toutput = output.charAt(0).toUpperCase() + output.slice(1)\\n\\treturn output\\n}\\n\\n/**\\n * Get the lowest level Zod type.\\n * This will unpack optionals, refinements, etc.\\n */\\nexport function getBaseSchema<\\n\\tChildType extends z.ZodAny | z.AnyZodObject = z.ZodAny,\\n>(schema: ChildType | z.ZodEffects<ChildType>): ChildType | null {\\n\\tif (!schema) return null\\n\\tif ('innerType' in schema._def) {\\n\\t\\treturn getBaseSchema(schema._def.innerType as ChildType)\\n\\t}\\n\\tif ('schema' in schema._def) {\\n\\t\\treturn getBaseSchema(schema._def.schema as ChildType)\\n\\t}\\n\\n\\treturn schema as ChildType\\n}\\n\\n/**\\n * Get the type name of the lowest level Zod type.\\n * This will unpack optionals, refinements, etc.\\n */\\nexport function getBaseType(schema: z.ZodAny): string {\\n\\tconst baseSchema = getBaseSchema(schema)\\n\\treturn baseSchema ? baseSchema._def.typeName : ''\\n}\\n\\n/**\\n * Search for a \\\"ZodDefult\\\" in the Zod stack and return its value.\\n */\\nexport function getDefaultValueInZodStack(schema: z.ZodAny): any {\\n\\tconst typedSchema = schema as unknown as z.ZodDefault<\\n\\t\\tz.ZodNumber | z.ZodString\\n\\t>\\n\\n\\tif (typedSchema._def.typeName === 'ZodDefault') {\\n\\t\\treturn typedSchema._def.defaultValue()\\n\\t}\\n\\n\\tif ('innerType' in typedSchema._def) {\\n\\t\\treturn getDefaultValueInZodStack(\\n\\t\\t\\ttypedSchema._def.innerType as unknown as z.ZodAny\\n\\t\\t)\\n\\t}\\n\\tif ('schema' in typedSchema._def) {\\n\\t\\treturn getDefaultValueInZodStack(\\n\\t\\t\\t(typedSchema._def as any).schema as z.ZodAny\\n\\t\\t)\\n\\t}\\n\\n\\treturn undefined\\n}\\n\\n/**\\n * Get all default values from a Zod schema.\\n */\\nexport function getDefaultValues<Schema extends z.ZodObject<any, any>>(\\n\\tschema: Schema,\\n\\tfieldConfig?: FieldConfig<z.infer<Schema>>\\n) {\\n\\tif (!schema) return null\\n\\tconst { shape } = schema\\n\\ttype DefaultValuesType = DefaultValues<Partial<z.infer<Schema>>>\\n\\tconst defaultValues = {} as DefaultValuesType\\n\\tif (!shape) return defaultValues\\n\\n\\tfor (const key of Object.keys(shape)) {\\n\\t\\tconst item = shape[key] as z.ZodAny\\n\\n\\t\\tif (getBaseType(item) === 'ZodObject') {\\n\\t\\t\\tconst defaultItems = getDefaultValues(\\n\\t\\t\\t\\tgetBaseSchema(item) as unknown as z.ZodObject<any, any>,\\n\\t\\t\\t\\tfieldConfig?.[key] as FieldConfig<z.infer<Schema>>\\n\\t\\t\\t)\\n\\n\\t\\t\\tif (defaultItems !== null) {\\n\\t\\t\\t\\tfor (const defaultItemKey of Object.keys(defaultItems)) {\\n\\t\\t\\t\\t\\tconst pathKey = `${key}.${defaultItemKey}` as keyof DefaultValuesType\\n\\t\\t\\t\\t\\tdefaultValues[pathKey] = defaultItems[defaultItemKey]\\n\\t\\t\\t\\t}\\n\\t\\t\\t}\\n\\t\\t} else {\\n\\t\\t\\tlet defaultValue = getDefaultValueInZodStack(item)\\n\\t\\t\\tif (\\n\\t\\t\\t\\t(defaultValue === null || defaultValue === '') &&\\n\\t\\t\\t\\tfieldConfig?.[key]?.inputProps\\n\\t\\t\\t) {\\n\\t\\t\\t\\tdefaultValue = (fieldConfig?.[key]?.inputProps as unknown as any)\\n\\t\\t\\t\\t\\t.defaultValue\\n\\t\\t\\t}\\n\\t\\t\\tif (defaultValue !== undefined) {\\n\\t\\t\\t\\tdefaultValues[key as keyof DefaultValuesType] = defaultValue\\n\\t\\t\\t}\\n\\t\\t}\\n\\t}\\n\\n\\treturn defaultValues\\n}\\n\\nexport function getObjectFormSchema(\\n\\tschema: ZodObjectOrWrapped\\n): z.ZodObject<any, any> {\\n\\tif (schema?._def.typeName === 'ZodEffects') {\\n\\t\\tconst typedSchema = schema as z.ZodEffects<z.ZodObject<any, any>>\\n\\t\\treturn getObjectFormSchema(typedSchema._def.schema)\\n\\t}\\n\\treturn schema as z.ZodObject<any, any>\\n}\\n\\n/**\\n * Convert a Zod schema to HTML input props to give direct feedback to the user.\\n * Once submitted, the schema will be validated completely.\\n */\\nexport function zodToHtmlInputProps(\\n\\tschema:\\n\\t\\t| z.ZodNumber\\n\\t\\t| z.ZodString\\n\\t\\t| z.ZodOptional<z.ZodNumber | z.ZodString>\\n\\t\\t| any\\n): React.InputHTMLAttributes<HTMLInputElement> {\\n\\tif (['ZodOptional', 'ZodNullable'].includes(schema._def.typeName)) {\\n\\t\\tconst typedSchema = schema as z.ZodOptional<z.ZodNumber | z.ZodString>\\n\\t\\treturn {\\n\\t\\t\\t...zodToHtmlInputProps(typedSchema._def.innerType),\\n\\t\\t\\trequired: false,\\n\\t\\t}\\n\\t}\\n\\tconst typedSchema = schema as z.ZodNumber | z.ZodString\\n\\n\\tif (!('checks' in typedSchema._def))\\n\\t\\treturn {\\n\\t\\t\\trequired: true,\\n\\t\\t}\\n\\n\\tconst { checks } = typedSchema._def\\n\\tconst inputProps: React.InputHTMLAttributes<HTMLInputElement> = {\\n\\t\\trequired: true,\\n\\t}\\n\\tconst type = getBaseType(schema)\\n\\n\\tfor (const check of checks) {\\n\\t\\tif (check.kind === 'min') {\\n\\t\\t\\tif (type === 'ZodString') {\\n\\t\\t\\t\\tinputProps.minLength = check.value\\n\\t\\t\\t} else {\\n\\t\\t\\t\\tinputProps.min = check.value\\n\\t\\t\\t}\\n\\t\\t}\\n\\t\\tif (check.kind === 'max') {\\n\\t\\t\\tif (type === 'ZodString') {\\n\\t\\t\\t\\tinputProps.maxLength = check.value\\n\\t\\t\\t} else {\\n\\t\\t\\t\\tinputProps.max = check.value\\n\\t\\t\\t}\\n\\t\\t}\\n\\t}\\n\\n\\treturn inputProps\\n}\\n\""
    }
  ]
}
,
{
  "name": "types",
  "description": "Description for types component.",
  "usage": "\"import { ControllerRenderProps, FieldValues } from 'react-hook-form'\\nimport * as z from 'zod'\\n\\nimport { INPUT_COMPONENTS } from '@/modules/shadcn/components/ui/auto-form/config'\\n\\nexport type FieldConfigItem = {\\n\\tdescription?: React.ReactNode\\n\\tinputProps?: React.InputHTMLAttributes<HTMLInputElement> & {\\n\\t\\tshowLabel?: boolean\\n\\t}\\n\\tlabel?: string\\n\\tfieldType?:\\n\\t\\t| keyof typeof INPUT_COMPONENTS\\n\\t\\t| React.FC<AutoFormInputComponentProps>\\n\\n\\trenderParent?: (props: {\\n\\t\\tchildren: React.ReactNode\\n\\t}) => React.ReactElement | null\\n}\\n\\nexport type FieldConfig<SchemaType extends z.infer<z.ZodObject<any, any>>> = {\\n\\t// If SchemaType.key is an object, create a nested FieldConfig, otherwise FieldConfigItem\\n\\t[Key in keyof SchemaType]?: SchemaType[Key] extends object\\n\\t\\t? FieldConfig<z.infer<SchemaType[Key]>>\\n\\t\\t: FieldConfigItem\\n}\\n\\nexport enum DependencyType {\\n\\tDISABLES,\\n\\tREQUIRES,\\n\\tHIDES,\\n\\tSETS_OPTIONS,\\n}\\n\\ntype BaseDependency<SchemaType extends z.infer<z.ZodObject<any, any>>> = {\\n\\tsourceField: keyof SchemaType\\n\\ttype: DependencyType\\n\\ttargetField: keyof SchemaType\\n\\twhen: (sourceFieldValue: any, targetFieldValue: any) => boolean\\n}\\n\\nexport type ValueDependency<SchemaType extends z.infer<z.ZodObject<any, any>>> =\\n\\tBaseDependency<SchemaType> & {\\n\\t\\ttype:\\n\\t\\t\\t| DependencyType.DISABLES\\n\\t\\t\\t| DependencyType.REQUIRES\\n\\t\\t\\t| DependencyType.HIDES\\n\\t}\\n\\nexport type EnumValues = readonly [string, ...string[]]\\n\\nexport type OptionsDependency<\\n\\tSchemaType extends z.infer<z.ZodObject<any, any>>,\\n> = BaseDependency<SchemaType> & {\\n\\ttype: DependencyType.SETS_OPTIONS\\n\\n\\t// Partial array of values from sourceField that will trigger the dependency\\n\\toptions: EnumValues\\n}\\n\\nexport type Dependency<SchemaType extends z.infer<z.ZodObject<any, any>>> =\\n\\t| ValueDependency<SchemaType>\\n\\t| OptionsDependency<SchemaType>\\n\\n/**\\n * A FormInput component can handle a specific Zod type (e.g. \\\"ZodBoolean\\\")\\n */\\nexport type AutoFormInputComponentProps = {\\n\\tzodInputProps: React.InputHTMLAttributes<HTMLInputElement>\\n\\tfield: ControllerRenderProps<FieldValues, any>\\n\\tfieldConfigItem: FieldConfigItem\\n\\tlabel: string\\n\\tisRequired: boolean\\n\\tfieldProps: any\\n\\tzodItem: z.ZodAny\\n\\tclassName?: string\\n}\\n\"",
  "examples": [
    {
      "source": "types.tsx",
      "code": "\"import { ControllerRenderProps, FieldValues } from 'react-hook-form'\\nimport * as z from 'zod'\\n\\nimport { INPUT_COMPONENTS } from '@/modules/shadcn/components/ui/auto-form/config'\\n\\nexport type FieldConfigItem = {\\n\\tdescription?: React.ReactNode\\n\\tinputProps?: React.InputHTMLAttributes<HTMLInputElement> & {\\n\\t\\tshowLabel?: boolean\\n\\t}\\n\\tlabel?: string\\n\\tfieldType?:\\n\\t\\t| keyof typeof INPUT_COMPONENTS\\n\\t\\t| React.FC<AutoFormInputComponentProps>\\n\\n\\trenderParent?: (props: {\\n\\t\\tchildren: React.ReactNode\\n\\t}) => React.ReactElement | null\\n}\\n\\nexport type FieldConfig<SchemaType extends z.infer<z.ZodObject<any, any>>> = {\\n\\t// If SchemaType.key is an object, create a nested FieldConfig, otherwise FieldConfigItem\\n\\t[Key in keyof SchemaType]?: SchemaType[Key] extends object\\n\\t\\t? FieldConfig<z.infer<SchemaType[Key]>>\\n\\t\\t: FieldConfigItem\\n}\\n\\nexport enum DependencyType {\\n\\tDISABLES,\\n\\tREQUIRES,\\n\\tHIDES,\\n\\tSETS_OPTIONS,\\n}\\n\\ntype BaseDependency<SchemaType extends z.infer<z.ZodObject<any, any>>> = {\\n\\tsourceField: keyof SchemaType\\n\\ttype: DependencyType\\n\\ttargetField: keyof SchemaType\\n\\twhen: (sourceFieldValue: any, targetFieldValue: any) => boolean\\n}\\n\\nexport type ValueDependency<SchemaType extends z.infer<z.ZodObject<any, any>>> =\\n\\tBaseDependency<SchemaType> & {\\n\\t\\ttype:\\n\\t\\t\\t| DependencyType.DISABLES\\n\\t\\t\\t| DependencyType.REQUIRES\\n\\t\\t\\t| DependencyType.HIDES\\n\\t}\\n\\nexport type EnumValues = readonly [string, ...string[]]\\n\\nexport type OptionsDependency<\\n\\tSchemaType extends z.infer<z.ZodObject<any, any>>,\\n> = BaseDependency<SchemaType> & {\\n\\ttype: DependencyType.SETS_OPTIONS\\n\\n\\t// Partial array of values from sourceField that will trigger the dependency\\n\\toptions: EnumValues\\n}\\n\\nexport type Dependency<SchemaType extends z.infer<z.ZodObject<any, any>>> =\\n\\t| ValueDependency<SchemaType>\\n\\t| OptionsDependency<SchemaType>\\n\\n/**\\n * A FormInput component can handle a specific Zod type (e.g. \\\"ZodBoolean\\\")\\n */\\nexport type AutoFormInputComponentProps = {\\n\\tzodInputProps: React.InputHTMLAttributes<HTMLInputElement>\\n\\tfield: ControllerRenderProps<FieldValues, any>\\n\\tfieldConfigItem: FieldConfigItem\\n\\tlabel: string\\n\\tisRequired: boolean\\n\\tfieldProps: any\\n\\tzodItem: z.ZodAny\\n\\tclassName?: string\\n}\\n\""
    }
  ]
}
,
{
  "name": "label",
  "description": "Description for label component.",
  "usage": "\"import { FormLabel } from '@/modules/shadcn/components/ui'\\nimport { cn } from '@/modules/shadcn/lib/utils'\\n\\nfunction AutoFormLabel({\\n\\tlabel,\\n\\tisRequired,\\n\\tclassName,\\n}: {\\n\\tlabel: string\\n\\tisRequired: boolean\\n\\tclassName?: string\\n}) {\\n\\treturn (\\n\\t\\t<>\\n\\t\\t\\t<FormLabel className={cn(className)}>\\n\\t\\t\\t\\t{label}\\n\\t\\t\\t\\t{isRequired && <span className=\\\"text-destructive\\\"> *</span>}\\n\\t\\t\\t</FormLabel>\\n\\t\\t</>\\n\\t)\\n}\\n\\nexport default AutoFormLabel\\n\"",
  "examples": [
    {
      "source": "label.tsx",
      "code": "\"import { FormLabel } from '@/modules/shadcn/components/ui'\\nimport { cn } from '@/modules/shadcn/lib/utils'\\n\\nfunction AutoFormLabel({\\n\\tlabel,\\n\\tisRequired,\\n\\tclassName,\\n}: {\\n\\tlabel: string\\n\\tisRequired: boolean\\n\\tclassName?: string\\n}) {\\n\\treturn (\\n\\t\\t<>\\n\\t\\t\\t<FormLabel className={cn(className)}>\\n\\t\\t\\t\\t{label}\\n\\t\\t\\t\\t{isRequired && <span className=\\\"text-destructive\\\"> *</span>}\\n\\t\\t\\t</FormLabel>\\n\\t\\t</>\\n\\t)\\n}\\n\\nexport default AutoFormLabel\\n\""
    }
  ]
}
,
{
  "name": "tooltip",
  "description": "Description for tooltip component.",
  "usage": "\"function AutoFormTooltip({ fieldConfigItem }: { fieldConfigItem: any }) {\\n\\treturn (\\n\\t\\t<>\\n\\t\\t\\t{fieldConfigItem?.description && (\\n\\t\\t\\t\\t<p className=\\\"text-sm text-gray-500 dark:text-white\\\">\\n\\t\\t\\t\\t\\t{fieldConfigItem.description}\\n\\t\\t\\t\\t</p>\\n\\t\\t\\t)}\\n\\t\\t</>\\n\\t)\\n}\\n\\nexport default AutoFormTooltip\\n\"",
  "examples": [
    {
      "source": "tooltip.tsx",
      "code": "\"function AutoFormTooltip({ fieldConfigItem }: { fieldConfigItem: any }) {\\n\\treturn (\\n\\t\\t<>\\n\\t\\t\\t{fieldConfigItem?.description && (\\n\\t\\t\\t\\t<p className=\\\"text-sm text-gray-500 dark:text-white\\\">\\n\\t\\t\\t\\t\\t{fieldConfigItem.description}\\n\\t\\t\\t\\t</p>\\n\\t\\t\\t)}\\n\\t\\t</>\\n\\t)\\n}\\n\\nexport default AutoFormTooltip\\n\""
    }
  ]
}
,
{
  "name": "number",
  "description": "Description for number component.",
  "usage": "\"import {\\n\\tFormControl,\\n\\tFormItem,\\n\\tFormMessage,\\n\\tInput,\\n} from '@/modules/shadcn/components/ui'\\nimport AutoFormLabel from '@/modules/shadcn/components/ui/auto-form/common/label'\\nimport AutoFormTooltip from '@/modules/shadcn/components/ui/auto-form/common/tooltip'\\nimport { AutoFormInputComponentProps } from '@/modules/shadcn/components/ui/auto-form/types'\\n\\nexport default function AutoFormNumber({\\n\\tlabel,\\n\\tisRequired,\\n\\tfieldConfigItem,\\n\\tfieldProps,\\n}: AutoFormInputComponentProps) {\\n\\tconst { showLabel: _showLabel, ...fieldPropsWithoutShowLabel } = fieldProps\\n\\tconst showLabel = _showLabel === undefined ? true : _showLabel\\n\\n\\treturn (\\n\\t\\t<FormItem>\\n\\t\\t\\t{showLabel && (\\n\\t\\t\\t\\t<AutoFormLabel\\n\\t\\t\\t\\t\\tlabel={fieldConfigItem?.label || label}\\n\\t\\t\\t\\t\\tisRequired={isRequired}\\n\\t\\t\\t\\t/>\\n\\t\\t\\t)}\\n\\t\\t\\t<FormControl>\\n\\t\\t\\t\\t<Input type=\\\"number\\\" {...fieldPropsWithoutShowLabel} />\\n\\t\\t\\t</FormControl>\\n\\t\\t\\t<AutoFormTooltip fieldConfigItem={fieldConfigItem} />\\n\\t\\t\\t<FormMessage />\\n\\t\\t</FormItem>\\n\\t)\\n}\\n\"",
  "examples": [
    {
      "source": "number.tsx",
      "code": "\"import {\\n\\tFormControl,\\n\\tFormItem,\\n\\tFormMessage,\\n\\tInput,\\n} from '@/modules/shadcn/components/ui'\\nimport AutoFormLabel from '@/modules/shadcn/components/ui/auto-form/common/label'\\nimport AutoFormTooltip from '@/modules/shadcn/components/ui/auto-form/common/tooltip'\\nimport { AutoFormInputComponentProps } from '@/modules/shadcn/components/ui/auto-form/types'\\n\\nexport default function AutoFormNumber({\\n\\tlabel,\\n\\tisRequired,\\n\\tfieldConfigItem,\\n\\tfieldProps,\\n}: AutoFormInputComponentProps) {\\n\\tconst { showLabel: _showLabel, ...fieldPropsWithoutShowLabel } = fieldProps\\n\\tconst showLabel = _showLabel === undefined ? true : _showLabel\\n\\n\\treturn (\\n\\t\\t<FormItem>\\n\\t\\t\\t{showLabel && (\\n\\t\\t\\t\\t<AutoFormLabel\\n\\t\\t\\t\\t\\tlabel={fieldConfigItem?.label || label}\\n\\t\\t\\t\\t\\tisRequired={isRequired}\\n\\t\\t\\t\\t/>\\n\\t\\t\\t)}\\n\\t\\t\\t<FormControl>\\n\\t\\t\\t\\t<Input type=\\\"number\\\" {...fieldPropsWithoutShowLabel} />\\n\\t\\t\\t</FormControl>\\n\\t\\t\\t<AutoFormTooltip fieldConfigItem={fieldConfigItem} />\\n\\t\\t\\t<FormMessage />\\n\\t\\t</FormItem>\\n\\t)\\n}\\n\""
    }
  ]
}
,
{
  "name": "file",
  "description": "Description for file component.",
  "usage": "\"import { ChangeEvent, useState } from 'react'\\nimport { Trash2 } from 'lucide-react'\\n\\nimport {\\n\\tFormControl,\\n\\tFormItem,\\n\\tFormMessage,\\n\\tInput,\\n} from '@/modules/shadcn/components/ui'\\nimport AutoFormLabel from '@/modules/shadcn/components/ui/auto-form/common/label'\\nimport AutoFormTooltip from '@/modules/shadcn/components/ui/auto-form/common/tooltip'\\nimport { AutoFormInputComponentProps } from '@/modules/shadcn/components/ui/auto-form/types'\\n\\nexport default function AutoFormFile({\\n\\tlabel,\\n\\tisRequired,\\n\\tfieldConfigItem,\\n\\tfieldProps,\\n\\tfield,\\n}: AutoFormInputComponentProps) {\\n\\tconst { showLabel: _showLabel, ...fieldPropsWithoutShowLabel } = fieldProps\\n\\tconst showLabel = _showLabel === undefined ? true : _showLabel\\n\\tconst [file, setFile] = useState<string | null>(null)\\n\\tconst [fileName, setFileName] = useState<string | null>(null)\\n\\tconst handleFileChange = (e: ChangeEvent<HTMLInputElement>) => {\\n\\t\\tconst file = e.target.files?.[0]\\n\\n\\t\\tif (file) {\\n\\t\\t\\tconst reader = new FileReader()\\n\\t\\t\\treader.onloadend = () => {\\n\\t\\t\\t\\tsetFile(reader.result as string)\\n\\t\\t\\t\\tsetFileName(file.name)\\n\\t\\t\\t\\tfield.onChange(reader.result as string)\\n\\t\\t\\t}\\n\\t\\t\\treader.readAsDataURL(file)\\n\\t\\t}\\n\\t}\\n\\n\\tconst handleRemoveClick = () => {\\n\\t\\tsetFile(null)\\n\\t}\\n\\n\\treturn (\\n\\t\\t<FormItem>\\n\\t\\t\\t{showLabel && (\\n\\t\\t\\t\\t<AutoFormLabel\\n\\t\\t\\t\\t\\tlabel={fieldConfigItem?.label || label}\\n\\t\\t\\t\\t\\tisRequired={isRequired}\\n\\t\\t\\t\\t/>\\n\\t\\t\\t)}\\n\\t\\t\\t{!file && (\\n\\t\\t\\t\\t<FormControl>\\n\\t\\t\\t\\t\\t<Input\\n\\t\\t\\t\\t\\t\\ttype=\\\"file\\\"\\n\\t\\t\\t\\t\\t\\t{...fieldPropsWithoutShowLabel}\\n\\t\\t\\t\\t\\t\\tonChange={handleFileChange}\\n\\t\\t\\t\\t\\t\\tvalue={''}\\n\\t\\t\\t\\t\\t/>\\n\\t\\t\\t\\t</FormControl>\\n\\t\\t\\t)}\\n\\t\\t\\t{file && (\\n\\t\\t\\t\\t<div className=\\\"flex h-[40px] w-full flex-row items-center justify-between space-x-2 rounded-sm border p-2 text-black focus-visible:ring-0 focus-visible:ring-offset-0 dark:bg-white dark:text-black dark:focus-visible:ring-0 dark:focus-visible:ring-offset-0\\\">\\n\\t\\t\\t\\t\\t<p>{fileName}</p>\\n\\t\\t\\t\\t\\t<button onClick={handleRemoveClick} aria-label=\\\"Remove image\\\">\\n\\t\\t\\t\\t\\t\\t<Trash2 size={16} />\\n\\t\\t\\t\\t\\t</button>\\n\\t\\t\\t\\t</div>\\n\\t\\t\\t)}\\n\\t\\t\\t<AutoFormTooltip fieldConfigItem={fieldConfigItem} />\\n\\t\\t\\t<FormMessage />\\n\\t\\t</FormItem>\\n\\t)\\n}\\n\"",
  "examples": [
    {
      "source": "file.tsx",
      "code": "\"import { ChangeEvent, useState } from 'react'\\nimport { Trash2 } from 'lucide-react'\\n\\nimport {\\n\\tFormControl,\\n\\tFormItem,\\n\\tFormMessage,\\n\\tInput,\\n} from '@/modules/shadcn/components/ui'\\nimport AutoFormLabel from '@/modules/shadcn/components/ui/auto-form/common/label'\\nimport AutoFormTooltip from '@/modules/shadcn/components/ui/auto-form/common/tooltip'\\nimport { AutoFormInputComponentProps } from '@/modules/shadcn/components/ui/auto-form/types'\\n\\nexport default function AutoFormFile({\\n\\tlabel,\\n\\tisRequired,\\n\\tfieldConfigItem,\\n\\tfieldProps,\\n\\tfield,\\n}: AutoFormInputComponentProps) {\\n\\tconst { showLabel: _showLabel, ...fieldPropsWithoutShowLabel } = fieldProps\\n\\tconst showLabel = _showLabel === undefined ? true : _showLabel\\n\\tconst [file, setFile] = useState<string | null>(null)\\n\\tconst [fileName, setFileName] = useState<string | null>(null)\\n\\tconst handleFileChange = (e: ChangeEvent<HTMLInputElement>) => {\\n\\t\\tconst file = e.target.files?.[0]\\n\\n\\t\\tif (file) {\\n\\t\\t\\tconst reader = new FileReader()\\n\\t\\t\\treader.onloadend = () => {\\n\\t\\t\\t\\tsetFile(reader.result as string)\\n\\t\\t\\t\\tsetFileName(file.name)\\n\\t\\t\\t\\tfield.onChange(reader.result as string)\\n\\t\\t\\t}\\n\\t\\t\\treader.readAsDataURL(file)\\n\\t\\t}\\n\\t}\\n\\n\\tconst handleRemoveClick = () => {\\n\\t\\tsetFile(null)\\n\\t}\\n\\n\\treturn (\\n\\t\\t<FormItem>\\n\\t\\t\\t{showLabel && (\\n\\t\\t\\t\\t<AutoFormLabel\\n\\t\\t\\t\\t\\tlabel={fieldConfigItem?.label || label}\\n\\t\\t\\t\\t\\tisRequired={isRequired}\\n\\t\\t\\t\\t/>\\n\\t\\t\\t)}\\n\\t\\t\\t{!file && (\\n\\t\\t\\t\\t<FormControl>\\n\\t\\t\\t\\t\\t<Input\\n\\t\\t\\t\\t\\t\\ttype=\\\"file\\\"\\n\\t\\t\\t\\t\\t\\t{...fieldPropsWithoutShowLabel}\\n\\t\\t\\t\\t\\t\\tonChange={handleFileChange}\\n\\t\\t\\t\\t\\t\\tvalue={''}\\n\\t\\t\\t\\t\\t/>\\n\\t\\t\\t\\t</FormControl>\\n\\t\\t\\t)}\\n\\t\\t\\t{file && (\\n\\t\\t\\t\\t<div className=\\\"flex h-[40px] w-full flex-row items-center justify-between space-x-2 rounded-sm border p-2 text-black focus-visible:ring-0 focus-visible:ring-offset-0 dark:bg-white dark:text-black dark:focus-visible:ring-0 dark:focus-visible:ring-offset-0\\\">\\n\\t\\t\\t\\t\\t<p>{fileName}</p>\\n\\t\\t\\t\\t\\t<button onClick={handleRemoveClick} aria-label=\\\"Remove image\\\">\\n\\t\\t\\t\\t\\t\\t<Trash2 size={16} />\\n\\t\\t\\t\\t\\t</button>\\n\\t\\t\\t\\t</div>\\n\\t\\t\\t)}\\n\\t\\t\\t<AutoFormTooltip fieldConfigItem={fieldConfigItem} />\\n\\t\\t\\t<FormMessage />\\n\\t\\t</FormItem>\\n\\t)\\n}\\n\""
    }
  ]
}
,
{
  "name": "enum",
  "description": "Description for enum component.",
  "usage": "\"import * as z from 'zod'\\n\\nimport {\\n\\tFormControl,\\n\\tFormItem,\\n\\tFormMessage,\\n\\tSelect,\\n\\tSelectContent,\\n\\tSelectItem,\\n\\tSelectTrigger,\\n\\tSelectValue,\\n} from '@/modules/shadcn/components/ui'\\nimport AutoFormLabel from '@/modules/shadcn/components/ui/auto-form/common/label'\\nimport AutoFormTooltip from '@/modules/shadcn/components/ui/auto-form/common/tooltip'\\nimport { AutoFormInputComponentProps } from '@/modules/shadcn/components/ui/auto-form/types'\\nimport { getBaseSchema } from '@/modules/shadcn/components/ui/auto-form/utils'\\n\\nexport default function AutoFormEnum({\\n\\tlabel,\\n\\tisRequired,\\n\\tfield,\\n\\tfieldConfigItem,\\n\\tzodItem,\\n\\tfieldProps,\\n}: AutoFormInputComponentProps) {\\n\\tconst baseValues = (getBaseSchema(zodItem) as unknown as z.ZodEnum<any>)._def\\n\\t\\t.values\\n\\n\\tlet values: [string, string][] = []\\n\\tif (!Array.isArray(baseValues)) {\\n\\t\\tvalues = Object.entries(baseValues)\\n\\t} else {\\n\\t\\tvalues = baseValues.map((value) => [value, value])\\n\\t}\\n\\n\\tfunction findItem(value: any) {\\n\\t\\treturn values.find((item) => item[0] === value)\\n\\t}\\n\\n\\treturn (\\n\\t\\t<FormItem>\\n\\t\\t\\t<AutoFormLabel\\n\\t\\t\\t\\tlabel={fieldConfigItem?.label || label}\\n\\t\\t\\t\\tisRequired={isRequired}\\n\\t\\t\\t/>\\n\\t\\t\\t<FormControl>\\n\\t\\t\\t\\t<Select\\n\\t\\t\\t\\t\\tonValueChange={field.onChange}\\n\\t\\t\\t\\t\\tdefaultValue={field.value}\\n\\t\\t\\t\\t\\t{...fieldProps}\\n\\t\\t\\t\\t>\\n\\t\\t\\t\\t\\t<SelectTrigger className={fieldProps.className}>\\n\\t\\t\\t\\t\\t\\t<SelectValue placeholder={fieldConfigItem.inputProps?.placeholder}>\\n\\t\\t\\t\\t\\t\\t\\t{field.value ? findItem(field.value)?.[1] : 'Select an option'}\\n\\t\\t\\t\\t\\t\\t</SelectValue>\\n\\t\\t\\t\\t\\t</SelectTrigger>\\n\\t\\t\\t\\t\\t<SelectContent>\\n\\t\\t\\t\\t\\t\\t{values.map(([value, label]) => (\\n\\t\\t\\t\\t\\t\\t\\t<SelectItem value={label} key={value}>\\n\\t\\t\\t\\t\\t\\t\\t\\t{label}\\n\\t\\t\\t\\t\\t\\t\\t</SelectItem>\\n\\t\\t\\t\\t\\t\\t))}\\n\\t\\t\\t\\t\\t</SelectContent>\\n\\t\\t\\t\\t</Select>\\n\\t\\t\\t</FormControl>\\n\\t\\t\\t<AutoFormTooltip fieldConfigItem={fieldConfigItem} />\\n\\t\\t\\t<FormMessage />\\n\\t\\t</FormItem>\\n\\t)\\n}\\n\"",
  "examples": [
    {
      "source": "enum.tsx",
      "code": "\"import * as z from 'zod'\\n\\nimport {\\n\\tFormControl,\\n\\tFormItem,\\n\\tFormMessage,\\n\\tSelect,\\n\\tSelectContent,\\n\\tSelectItem,\\n\\tSelectTrigger,\\n\\tSelectValue,\\n} from '@/modules/shadcn/components/ui'\\nimport AutoFormLabel from '@/modules/shadcn/components/ui/auto-form/common/label'\\nimport AutoFormTooltip from '@/modules/shadcn/components/ui/auto-form/common/tooltip'\\nimport { AutoFormInputComponentProps } from '@/modules/shadcn/components/ui/auto-form/types'\\nimport { getBaseSchema } from '@/modules/shadcn/components/ui/auto-form/utils'\\n\\nexport default function AutoFormEnum({\\n\\tlabel,\\n\\tisRequired,\\n\\tfield,\\n\\tfieldConfigItem,\\n\\tzodItem,\\n\\tfieldProps,\\n}: AutoFormInputComponentProps) {\\n\\tconst baseValues = (getBaseSchema(zodItem) as unknown as z.ZodEnum<any>)._def\\n\\t\\t.values\\n\\n\\tlet values: [string, string][] = []\\n\\tif (!Array.isArray(baseValues)) {\\n\\t\\tvalues = Object.entries(baseValues)\\n\\t} else {\\n\\t\\tvalues = baseValues.map((value) => [value, value])\\n\\t}\\n\\n\\tfunction findItem(value: any) {\\n\\t\\treturn values.find((item) => item[0] === value)\\n\\t}\\n\\n\\treturn (\\n\\t\\t<FormItem>\\n\\t\\t\\t<AutoFormLabel\\n\\t\\t\\t\\tlabel={fieldConfigItem?.label || label}\\n\\t\\t\\t\\tisRequired={isRequired}\\n\\t\\t\\t/>\\n\\t\\t\\t<FormControl>\\n\\t\\t\\t\\t<Select\\n\\t\\t\\t\\t\\tonValueChange={field.onChange}\\n\\t\\t\\t\\t\\tdefaultValue={field.value}\\n\\t\\t\\t\\t\\t{...fieldProps}\\n\\t\\t\\t\\t>\\n\\t\\t\\t\\t\\t<SelectTrigger className={fieldProps.className}>\\n\\t\\t\\t\\t\\t\\t<SelectValue placeholder={fieldConfigItem.inputProps?.placeholder}>\\n\\t\\t\\t\\t\\t\\t\\t{field.value ? findItem(field.value)?.[1] : 'Select an option'}\\n\\t\\t\\t\\t\\t\\t</SelectValue>\\n\\t\\t\\t\\t\\t</SelectTrigger>\\n\\t\\t\\t\\t\\t<SelectContent>\\n\\t\\t\\t\\t\\t\\t{values.map(([value, label]) => (\\n\\t\\t\\t\\t\\t\\t\\t<SelectItem value={label} key={value}>\\n\\t\\t\\t\\t\\t\\t\\t\\t{label}\\n\\t\\t\\t\\t\\t\\t\\t</SelectItem>\\n\\t\\t\\t\\t\\t\\t))}\\n\\t\\t\\t\\t\\t</SelectContent>\\n\\t\\t\\t\\t</Select>\\n\\t\\t\\t</FormControl>\\n\\t\\t\\t<AutoFormTooltip fieldConfigItem={fieldConfigItem} />\\n\\t\\t\\t<FormMessage />\\n\\t\\t</FormItem>\\n\\t)\\n}\\n\""
    }
  ]
}
,
{
  "name": "array",
  "description": "Description for array component.",
  "usage": "\"import { Plus, Trash } from 'lucide-react'\\nimport { useFieldArray, useForm } from 'react-hook-form'\\nimport * as z from 'zod'\\n\\nimport {\\n\\tAccordionContent,\\n\\tAccordionItem,\\n\\tAccordionTrigger,\\n\\tButton,\\n\\tSeparator,\\n} from '@/modules/shadcn/components/ui'\\nimport { beautifyObjectName } from '@/modules/shadcn/components/ui/auto-form/utils'\\nimport AutoFormObject from '@/modules/shadcn/components/ui/auto-form/fields/object'\\n\\nfunction isZodArray(\\n\\titem: z.ZodArray<any> | z.ZodDefault<any>\\n): item is z.ZodArray<any> {\\n\\treturn item instanceof z.ZodArray\\n}\\n\\nfunction isZodDefault(\\n\\titem: z.ZodArray<any> | z.ZodDefault<any>\\n): item is z.ZodDefault<any> {\\n\\treturn item instanceof z.ZodDefault\\n}\\n\\nexport default function AutoFormArray({\\n\\tname,\\n\\titem,\\n\\tform,\\n\\tpath = [],\\n\\tfieldConfig,\\n}: {\\n\\tname: string\\n\\titem: z.ZodArray<any> | z.ZodDefault<any>\\n\\tform: ReturnType<typeof useForm>\\n\\tpath?: string[]\\n\\tfieldConfig?: any\\n}) {\\n\\tconst { fields, append, remove } = useFieldArray({\\n\\t\\tcontrol: form.control,\\n\\t\\tname,\\n\\t})\\n\\tconst title = item._def.description ?? beautifyObjectName(name)\\n\\n\\tconst itemDefType = isZodArray(item)\\n\\t\\t? item._def.type\\n\\t\\t: isZodDefault(item)\\n\\t\\t\\t? item._def.innerType._def.type\\n\\t\\t\\t: null\\n\\n\\treturn (\\n\\t\\t<AccordionItem value={name} className=\\\"border-none\\\">\\n\\t\\t\\t<AccordionTrigger>{title}</AccordionTrigger>\\n\\t\\t\\t<AccordionContent>\\n\\t\\t\\t\\t{fields.map((_field, index) => {\\n\\t\\t\\t\\t\\tconst key = _field.id\\n\\t\\t\\t\\t\\treturn (\\n\\t\\t\\t\\t\\t\\t<div className=\\\"mt-4 flex flex-col\\\" key={`${key}`}>\\n\\t\\t\\t\\t\\t\\t\\t<AutoFormObject\\n\\t\\t\\t\\t\\t\\t\\t\\tschema={itemDefType as z.ZodObject<any, any>}\\n\\t\\t\\t\\t\\t\\t\\t\\tform={form}\\n\\t\\t\\t\\t\\t\\t\\t\\tfieldConfig={fieldConfig}\\n\\t\\t\\t\\t\\t\\t\\t\\tpath={[...path, index.toString()]}\\n\\t\\t\\t\\t\\t\\t\\t/>\\n\\t\\t\\t\\t\\t\\t\\t<div className=\\\"my-4 flex justify-end\\\">\\n\\t\\t\\t\\t\\t\\t\\t\\t<Button\\n\\t\\t\\t\\t\\t\\t\\t\\t\\tvariant=\\\"secondary\\\"\\n\\t\\t\\t\\t\\t\\t\\t\\t\\tsize=\\\"icon\\\"\\n\\t\\t\\t\\t\\t\\t\\t\\t\\ttype=\\\"button\\\"\\n\\t\\t\\t\\t\\t\\t\\t\\t\\tclassName=\\\"hover:bg-zinc-300 hover:text-black focus:ring-0 focus:ring-offset-0 focus-visible:ring-0 focus-visible:ring-offset-0 dark:bg-white dark:text-black dark:hover:bg-zinc-300 dark:hover:text-black dark:hover:ring-0 dark:hover:ring-offset-0 dark:focus-visible:ring-0 dark:focus-visible:ring-offset-0\\\"\\n\\t\\t\\t\\t\\t\\t\\t\\t\\tonClick={() => remove(index)}\\n\\t\\t\\t\\t\\t\\t\\t\\t>\\n\\t\\t\\t\\t\\t\\t\\t\\t\\t<Trash className=\\\"size-4 \\\" />\\n\\t\\t\\t\\t\\t\\t\\t\\t</Button>\\n\\t\\t\\t\\t\\t\\t\\t</div>\\n\\n\\t\\t\\t\\t\\t\\t\\t<Separator />\\n\\t\\t\\t\\t\\t\\t</div>\\n\\t\\t\\t\\t\\t)\\n\\t\\t\\t\\t})}\\n\\t\\t\\t\\t<Button\\n\\t\\t\\t\\t\\ttype=\\\"button\\\"\\n\\t\\t\\t\\t\\tvariant=\\\"secondary\\\"\\n\\t\\t\\t\\t\\tonClick={() => append({})}\\n\\t\\t\\t\\t\\tclassName=\\\"mt-4 flex items-center\\\"\\n\\t\\t\\t\\t>\\n\\t\\t\\t\\t\\t<Plus className=\\\"mr-2\\\" size={16} />\\n\\t\\t\\t\\t\\tAdd\\n\\t\\t\\t\\t</Button>\\n\\t\\t\\t</AccordionContent>\\n\\t\\t</AccordionItem>\\n\\t)\\n}\\n\"",
  "examples": [
    {
      "source": "array.tsx",
      "code": "\"import { Plus, Trash } from 'lucide-react'\\nimport { useFieldArray, useForm } from 'react-hook-form'\\nimport * as z from 'zod'\\n\\nimport {\\n\\tAccordionContent,\\n\\tAccordionItem,\\n\\tAccordionTrigger,\\n\\tButton,\\n\\tSeparator,\\n} from '@/modules/shadcn/components/ui'\\nimport { beautifyObjectName } from '@/modules/shadcn/components/ui/auto-form/utils'\\nimport AutoFormObject from '@/modules/shadcn/components/ui/auto-form/fields/object'\\n\\nfunction isZodArray(\\n\\titem: z.ZodArray<any> | z.ZodDefault<any>\\n): item is z.ZodArray<any> {\\n\\treturn item instanceof z.ZodArray\\n}\\n\\nfunction isZodDefault(\\n\\titem: z.ZodArray<any> | z.ZodDefault<any>\\n): item is z.ZodDefault<any> {\\n\\treturn item instanceof z.ZodDefault\\n}\\n\\nexport default function AutoFormArray({\\n\\tname,\\n\\titem,\\n\\tform,\\n\\tpath = [],\\n\\tfieldConfig,\\n}: {\\n\\tname: string\\n\\titem: z.ZodArray<any> | z.ZodDefault<any>\\n\\tform: ReturnType<typeof useForm>\\n\\tpath?: string[]\\n\\tfieldConfig?: any\\n}) {\\n\\tconst { fields, append, remove } = useFieldArray({\\n\\t\\tcontrol: form.control,\\n\\t\\tname,\\n\\t})\\n\\tconst title = item._def.description ?? beautifyObjectName(name)\\n\\n\\tconst itemDefType = isZodArray(item)\\n\\t\\t? item._def.type\\n\\t\\t: isZodDefault(item)\\n\\t\\t\\t? item._def.innerType._def.type\\n\\t\\t\\t: null\\n\\n\\treturn (\\n\\t\\t<AccordionItem value={name} className=\\\"border-none\\\">\\n\\t\\t\\t<AccordionTrigger>{title}</AccordionTrigger>\\n\\t\\t\\t<AccordionContent>\\n\\t\\t\\t\\t{fields.map((_field, index) => {\\n\\t\\t\\t\\t\\tconst key = _field.id\\n\\t\\t\\t\\t\\treturn (\\n\\t\\t\\t\\t\\t\\t<div className=\\\"mt-4 flex flex-col\\\" key={`${key}`}>\\n\\t\\t\\t\\t\\t\\t\\t<AutoFormObject\\n\\t\\t\\t\\t\\t\\t\\t\\tschema={itemDefType as z.ZodObject<any, any>}\\n\\t\\t\\t\\t\\t\\t\\t\\tform={form}\\n\\t\\t\\t\\t\\t\\t\\t\\tfieldConfig={fieldConfig}\\n\\t\\t\\t\\t\\t\\t\\t\\tpath={[...path, index.toString()]}\\n\\t\\t\\t\\t\\t\\t\\t/>\\n\\t\\t\\t\\t\\t\\t\\t<div className=\\\"my-4 flex justify-end\\\">\\n\\t\\t\\t\\t\\t\\t\\t\\t<Button\\n\\t\\t\\t\\t\\t\\t\\t\\t\\tvariant=\\\"secondary\\\"\\n\\t\\t\\t\\t\\t\\t\\t\\t\\tsize=\\\"icon\\\"\\n\\t\\t\\t\\t\\t\\t\\t\\t\\ttype=\\\"button\\\"\\n\\t\\t\\t\\t\\t\\t\\t\\t\\tclassName=\\\"hover:bg-zinc-300 hover:text-black focus:ring-0 focus:ring-offset-0 focus-visible:ring-0 focus-visible:ring-offset-0 dark:bg-white dark:text-black dark:hover:bg-zinc-300 dark:hover:text-black dark:hover:ring-0 dark:hover:ring-offset-0 dark:focus-visible:ring-0 dark:focus-visible:ring-offset-0\\\"\\n\\t\\t\\t\\t\\t\\t\\t\\t\\tonClick={() => remove(index)}\\n\\t\\t\\t\\t\\t\\t\\t\\t>\\n\\t\\t\\t\\t\\t\\t\\t\\t\\t<Trash className=\\\"size-4 \\\" />\\n\\t\\t\\t\\t\\t\\t\\t\\t</Button>\\n\\t\\t\\t\\t\\t\\t\\t</div>\\n\\n\\t\\t\\t\\t\\t\\t\\t<Separator />\\n\\t\\t\\t\\t\\t\\t</div>\\n\\t\\t\\t\\t\\t)\\n\\t\\t\\t\\t})}\\n\\t\\t\\t\\t<Button\\n\\t\\t\\t\\t\\ttype=\\\"button\\\"\\n\\t\\t\\t\\t\\tvariant=\\\"secondary\\\"\\n\\t\\t\\t\\t\\tonClick={() => append({})}\\n\\t\\t\\t\\t\\tclassName=\\\"mt-4 flex items-center\\\"\\n\\t\\t\\t\\t>\\n\\t\\t\\t\\t\\t<Plus className=\\\"mr-2\\\" size={16} />\\n\\t\\t\\t\\t\\tAdd\\n\\t\\t\\t\\t</Button>\\n\\t\\t\\t</AccordionContent>\\n\\t\\t</AccordionItem>\\n\\t)\\n}\\n\""
    }
  ]
}
,
{
  "name": "switch",
  "description": "Description for switch component.",
  "usage": "\"import { FormControl, FormItem, Switch } from '@/modules/shadcn/components/ui'\\n\\nimport AutoFormLabel from '@/modules/shadcn/components/ui/auto-form/common/label'\\nimport AutoFormTooltip from '@/modules/shadcn/components/ui/auto-form/common/tooltip'\\nimport { AutoFormInputComponentProps } from '@/modules/shadcn/components/ui/auto-form/types'\\n\\nexport default function AutoFormSwitch({\\n\\tlabel,\\n\\tisRequired,\\n\\tfield,\\n\\tfieldConfigItem,\\n\\tfieldProps,\\n}: AutoFormInputComponentProps) {\\n\\treturn (\\n\\t\\t<div>\\n\\t\\t\\t<FormItem>\\n\\t\\t\\t\\t<div className=\\\"flex items-center gap-3\\\">\\n\\t\\t\\t\\t\\t<FormControl>\\n\\t\\t\\t\\t\\t\\t<Switch\\n\\t\\t\\t\\t\\t\\t\\tchecked={field.value}\\n\\t\\t\\t\\t\\t\\t\\tonCheckedChange={field.onChange}\\n\\t\\t\\t\\t\\t\\t\\t{...fieldProps}\\n\\t\\t\\t\\t\\t\\t/>\\n\\t\\t\\t\\t\\t</FormControl>\\n\\t\\t\\t\\t\\t<AutoFormLabel\\n\\t\\t\\t\\t\\t\\tlabel={fieldConfigItem?.label || label}\\n\\t\\t\\t\\t\\t\\tisRequired={isRequired}\\n\\t\\t\\t\\t\\t/>\\n\\t\\t\\t\\t</div>\\n\\t\\t\\t</FormItem>\\n\\t\\t\\t<AutoFormTooltip fieldConfigItem={fieldConfigItem} />\\n\\t\\t</div>\\n\\t)\\n}\\n\"",
  "examples": [
    {
      "source": "switch.tsx",
      "code": "\"import { FormControl, FormItem, Switch } from '@/modules/shadcn/components/ui'\\n\\nimport AutoFormLabel from '@/modules/shadcn/components/ui/auto-form/common/label'\\nimport AutoFormTooltip from '@/modules/shadcn/components/ui/auto-form/common/tooltip'\\nimport { AutoFormInputComponentProps } from '@/modules/shadcn/components/ui/auto-form/types'\\n\\nexport default function AutoFormSwitch({\\n\\tlabel,\\n\\tisRequired,\\n\\tfield,\\n\\tfieldConfigItem,\\n\\tfieldProps,\\n}: AutoFormInputComponentProps) {\\n\\treturn (\\n\\t\\t<div>\\n\\t\\t\\t<FormItem>\\n\\t\\t\\t\\t<div className=\\\"flex items-center gap-3\\\">\\n\\t\\t\\t\\t\\t<FormControl>\\n\\t\\t\\t\\t\\t\\t<Switch\\n\\t\\t\\t\\t\\t\\t\\tchecked={field.value}\\n\\t\\t\\t\\t\\t\\t\\tonCheckedChange={field.onChange}\\n\\t\\t\\t\\t\\t\\t\\t{...fieldProps}\\n\\t\\t\\t\\t\\t\\t/>\\n\\t\\t\\t\\t\\t</FormControl>\\n\\t\\t\\t\\t\\t<AutoFormLabel\\n\\t\\t\\t\\t\\t\\tlabel={fieldConfigItem?.label || label}\\n\\t\\t\\t\\t\\t\\tisRequired={isRequired}\\n\\t\\t\\t\\t\\t/>\\n\\t\\t\\t\\t</div>\\n\\t\\t\\t</FormItem>\\n\\t\\t\\t<AutoFormTooltip fieldConfigItem={fieldConfigItem} />\\n\\t\\t</div>\\n\\t)\\n}\\n\""
    }
  ]
}
,
{
  "name": "radio-group",
  "description": "Description for radio-group component.",
  "usage": "\"import * as z from 'zod'\\n\\nimport {\\n\\tFormControl,\\n\\tFormItem,\\n\\tFormLabel,\\n\\tFormMessage,\\n\\tRadioGroup,\\n\\tRadioGroupItem,\\n} from '@/modules/shadcn/components/ui'\\nimport AutoFormLabel from '@/modules/shadcn/components/ui/auto-form/common/label'\\nimport AutoFormTooltip from '@/modules/shadcn/components/ui/auto-form/common/tooltip'\\nimport { AutoFormInputComponentProps } from '@/modules/shadcn/components/ui/auto-form/types'\\nimport { getBaseSchema } from '@/modules/shadcn/components/ui/auto-form/utils'\\n\\nexport default function AutoFormRadioGroup({\\n\\tlabel,\\n\\tisRequired,\\n\\tfield,\\n\\tzodItem,\\n\\tfieldProps,\\n\\tfieldConfigItem,\\n}: AutoFormInputComponentProps) {\\n\\tconst baseValues = (getBaseSchema(zodItem) as unknown as z.ZodEnum<any>)._def\\n\\t\\t.values\\n\\n\\tlet values: string[] = []\\n\\tif (!Array.isArray(baseValues)) {\\n\\t\\tvalues = Object.entries(baseValues).map((item) => item[0])\\n\\t} else {\\n\\t\\tvalues = baseValues\\n\\t}\\n\\n\\treturn (\\n\\t\\t<div>\\n\\t\\t\\t<FormItem>\\n\\t\\t\\t\\t<AutoFormLabel\\n\\t\\t\\t\\t\\tlabel={fieldConfigItem?.label || label}\\n\\t\\t\\t\\t\\tisRequired={isRequired}\\n\\t\\t\\t\\t/>\\n\\t\\t\\t\\t<FormControl>\\n\\t\\t\\t\\t\\t<RadioGroup\\n\\t\\t\\t\\t\\t\\tonValueChange={field.onChange}\\n\\t\\t\\t\\t\\t\\tdefaultValue={field.value}\\n\\t\\t\\t\\t\\t\\t{...fieldProps}\\n\\t\\t\\t\\t\\t>\\n\\t\\t\\t\\t\\t\\t{values?.map((value: any) => (\\n\\t\\t\\t\\t\\t\\t\\t<FormItem\\n\\t\\t\\t\\t\\t\\t\\t\\tkey={value}\\n\\t\\t\\t\\t\\t\\t\\t\\tclassName=\\\"mb-2 flex items-center gap-3 space-y-0\\\"\\n\\t\\t\\t\\t\\t\\t\\t>\\n\\t\\t\\t\\t\\t\\t\\t\\t<FormControl>\\n\\t\\t\\t\\t\\t\\t\\t\\t\\t<RadioGroupItem value={value} />\\n\\t\\t\\t\\t\\t\\t\\t\\t</FormControl>\\n\\t\\t\\t\\t\\t\\t\\t\\t<FormLabel className=\\\"font-normal\\\">{value}</FormLabel>\\n\\t\\t\\t\\t\\t\\t\\t</FormItem>\\n\\t\\t\\t\\t\\t\\t))}\\n\\t\\t\\t\\t\\t</RadioGroup>\\n\\t\\t\\t\\t</FormControl>\\n\\t\\t\\t\\t<FormMessage />\\n\\t\\t\\t</FormItem>\\n\\t\\t\\t<AutoFormTooltip fieldConfigItem={fieldConfigItem} />\\n\\t\\t</div>\\n\\t)\\n}\\n\"",
  "examples": [
    {
      "source": "radio-group.tsx",
      "code": "\"import * as z from 'zod'\\n\\nimport {\\n\\tFormControl,\\n\\tFormItem,\\n\\tFormLabel,\\n\\tFormMessage,\\n\\tRadioGroup,\\n\\tRadioGroupItem,\\n} from '@/modules/shadcn/components/ui'\\nimport AutoFormLabel from '@/modules/shadcn/components/ui/auto-form/common/label'\\nimport AutoFormTooltip from '@/modules/shadcn/components/ui/auto-form/common/tooltip'\\nimport { AutoFormInputComponentProps } from '@/modules/shadcn/components/ui/auto-form/types'\\nimport { getBaseSchema } from '@/modules/shadcn/components/ui/auto-form/utils'\\n\\nexport default function AutoFormRadioGroup({\\n\\tlabel,\\n\\tisRequired,\\n\\tfield,\\n\\tzodItem,\\n\\tfieldProps,\\n\\tfieldConfigItem,\\n}: AutoFormInputComponentProps) {\\n\\tconst baseValues = (getBaseSchema(zodItem) as unknown as z.ZodEnum<any>)._def\\n\\t\\t.values\\n\\n\\tlet values: string[] = []\\n\\tif (!Array.isArray(baseValues)) {\\n\\t\\tvalues = Object.entries(baseValues).map((item) => item[0])\\n\\t} else {\\n\\t\\tvalues = baseValues\\n\\t}\\n\\n\\treturn (\\n\\t\\t<div>\\n\\t\\t\\t<FormItem>\\n\\t\\t\\t\\t<AutoFormLabel\\n\\t\\t\\t\\t\\tlabel={fieldConfigItem?.label || label}\\n\\t\\t\\t\\t\\tisRequired={isRequired}\\n\\t\\t\\t\\t/>\\n\\t\\t\\t\\t<FormControl>\\n\\t\\t\\t\\t\\t<RadioGroup\\n\\t\\t\\t\\t\\t\\tonValueChange={field.onChange}\\n\\t\\t\\t\\t\\t\\tdefaultValue={field.value}\\n\\t\\t\\t\\t\\t\\t{...fieldProps}\\n\\t\\t\\t\\t\\t>\\n\\t\\t\\t\\t\\t\\t{values?.map((value: any) => (\\n\\t\\t\\t\\t\\t\\t\\t<FormItem\\n\\t\\t\\t\\t\\t\\t\\t\\tkey={value}\\n\\t\\t\\t\\t\\t\\t\\t\\tclassName=\\\"mb-2 flex items-center gap-3 space-y-0\\\"\\n\\t\\t\\t\\t\\t\\t\\t>\\n\\t\\t\\t\\t\\t\\t\\t\\t<FormControl>\\n\\t\\t\\t\\t\\t\\t\\t\\t\\t<RadioGroupItem value={value} />\\n\\t\\t\\t\\t\\t\\t\\t\\t</FormControl>\\n\\t\\t\\t\\t\\t\\t\\t\\t<FormLabel className=\\\"font-normal\\\">{value}</FormLabel>\\n\\t\\t\\t\\t\\t\\t\\t</FormItem>\\n\\t\\t\\t\\t\\t\\t))}\\n\\t\\t\\t\\t\\t</RadioGroup>\\n\\t\\t\\t\\t</FormControl>\\n\\t\\t\\t\\t<FormMessage />\\n\\t\\t\\t</FormItem>\\n\\t\\t\\t<AutoFormTooltip fieldConfigItem={fieldConfigItem} />\\n\\t\\t</div>\\n\\t)\\n}\\n\""
    }
  ]
}
,
{
  "name": "object",
  "description": "Description for object component.",
  "usage": "\"import { useForm, useFormContext } from 'react-hook-form'\\nimport * as z from 'zod'\\n\\nimport {\\n\\tAccordion,\\n\\tAccordionContent,\\n\\tAccordionItem,\\n\\tAccordionTrigger,\\n\\tFormField,\\n} from '@/modules/shadcn/components/ui'\\nimport {\\n\\tDEFAULT_ZOD_HANDLERS,\\n\\tINPUT_COMPONENTS,\\n} from '@/modules/shadcn/components/ui/auto-form/config'\\nimport {\\n\\tDependency,\\n\\tFieldConfig,\\n\\tFieldConfigItem,\\n} from '@/modules/shadcn/components/ui/auto-form/types'\\nimport {\\n\\tbeautifyObjectName,\\n\\tgetBaseSchema,\\n\\tgetBaseType,\\n\\tzodToHtmlInputProps,\\n} from '@/modules/shadcn/components/ui/auto-form/utils'\\nimport AutoFormArray from '@/modules/shadcn/components/ui/auto-form/fields/array'\\nimport resolveDependencies from '@/modules/shadcn/components/ui/auto-form/dependencies'\\n\\nfunction DefaultParent({ children }: { children: React.ReactNode }) {\\n\\treturn <>{children}</>\\n}\\n\\nexport default function AutoFormObject<\\n\\tSchemaType extends z.ZodObject<any, any>,\\n>({\\n\\tschema,\\n\\tform,\\n\\tfieldConfig,\\n\\tpath = [],\\n\\tdependencies = [],\\n}: {\\n\\tschema: SchemaType | z.ZodEffects<SchemaType>\\n\\tform: ReturnType<typeof useForm>\\n\\tfieldConfig?: FieldConfig<z.infer<SchemaType>>\\n\\tpath?: string[]\\n\\tdependencies?: Dependency<z.infer<SchemaType>>[]\\n}) {\\n\\tconst { watch } = useFormContext() // Use useFormContext to access the watch function\\n\\n\\tif (!schema) {\\n\\t\\treturn null\\n\\t}\\n\\tconst { shape } = getBaseSchema<SchemaType>(schema) || {}\\n\\n\\tif (!shape) {\\n\\t\\treturn null\\n\\t}\\n\\n\\tconst handleIfZodNumber = (item: z.ZodAny) => {\\n\\t\\tconst isZodNumber = (item as any)._def.typeName === 'ZodNumber'\\n\\t\\tconst isInnerZodNumber =\\n\\t\\t\\t(item._def as any).innerType?._def?.typeName === 'ZodNumber'\\n\\n\\t\\tif (isZodNumber) {\\n\\t\\t\\t;(item as any)._def.coerce = true\\n\\t\\t} else if (isInnerZodNumber) {\\n\\t\\t\\t;(item._def as any).innerType._def.coerce = true\\n\\t\\t}\\n\\n\\t\\treturn item\\n\\t}\\n\\n\\treturn (\\n\\t\\t<Accordion type=\\\"multiple\\\" className=\\\"space-y-5 border-none\\\">\\n\\t\\t\\t{Object.keys(shape).map((name) => {\\n\\t\\t\\t\\tlet item = shape[name] as z.ZodAny\\n\\t\\t\\t\\titem = handleIfZodNumber(item) as z.ZodAny\\n\\t\\t\\t\\tconst zodBaseType = getBaseType(item)\\n\\t\\t\\t\\tconst itemName = item._def.description ?? beautifyObjectName(name)\\n\\t\\t\\t\\tconst key = [...path, name].join('.')\\n\\n\\t\\t\\t\\tconst {\\n\\t\\t\\t\\t\\tisHidden,\\n\\t\\t\\t\\t\\tisDisabled,\\n\\t\\t\\t\\t\\tisRequired: isRequiredByDependency,\\n\\t\\t\\t\\t\\toverrideOptions,\\n\\t\\t\\t\\t} = resolveDependencies(dependencies, name, watch)\\n\\t\\t\\t\\tif (isHidden) {\\n\\t\\t\\t\\t\\treturn null\\n\\t\\t\\t\\t}\\n\\n\\t\\t\\t\\tif (zodBaseType === 'ZodObject') {\\n\\t\\t\\t\\t\\treturn (\\n\\t\\t\\t\\t\\t\\t<AccordionItem value={name} key={key} className=\\\"border-none\\\">\\n\\t\\t\\t\\t\\t\\t\\t<AccordionTrigger>{itemName}</AccordionTrigger>\\n\\t\\t\\t\\t\\t\\t\\t<AccordionContent className=\\\"p-2\\\">\\n\\t\\t\\t\\t\\t\\t\\t\\t<AutoFormObject\\n\\t\\t\\t\\t\\t\\t\\t\\t\\tschema={item as unknown as z.ZodObject<any, any>}\\n\\t\\t\\t\\t\\t\\t\\t\\t\\tform={form}\\n\\t\\t\\t\\t\\t\\t\\t\\t\\tfieldConfig={\\n\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t(fieldConfig?.[name] ?? {}) as FieldConfig<\\n\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\tz.infer<typeof item>\\n\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t>\\n\\t\\t\\t\\t\\t\\t\\t\\t\\t}\\n\\t\\t\\t\\t\\t\\t\\t\\t\\tpath={[...path, name]}\\n\\t\\t\\t\\t\\t\\t\\t\\t/>\\n\\t\\t\\t\\t\\t\\t\\t</AccordionContent>\\n\\t\\t\\t\\t\\t\\t</AccordionItem>\\n\\t\\t\\t\\t\\t)\\n\\t\\t\\t\\t}\\n\\t\\t\\t\\tif (zodBaseType === 'ZodArray') {\\n\\t\\t\\t\\t\\treturn (\\n\\t\\t\\t\\t\\t\\t<AutoFormArray\\n\\t\\t\\t\\t\\t\\t\\tkey={key}\\n\\t\\t\\t\\t\\t\\t\\tname={name}\\n\\t\\t\\t\\t\\t\\t\\titem={item as unknown as z.ZodArray<any>}\\n\\t\\t\\t\\t\\t\\t\\tform={form}\\n\\t\\t\\t\\t\\t\\t\\tfieldConfig={fieldConfig?.[name] ?? {}}\\n\\t\\t\\t\\t\\t\\t\\tpath={[...path, name]}\\n\\t\\t\\t\\t\\t\\t/>\\n\\t\\t\\t\\t\\t)\\n\\t\\t\\t\\t}\\n\\n\\t\\t\\t\\tconst fieldConfigItem: FieldConfigItem = fieldConfig?.[name] ?? {}\\n\\t\\t\\t\\tconst zodInputProps = zodToHtmlInputProps(item)\\n\\t\\t\\t\\tconst isRequired =\\n\\t\\t\\t\\t\\tisRequiredByDependency ||\\n\\t\\t\\t\\t\\tzodInputProps.required ||\\n\\t\\t\\t\\t\\tfieldConfigItem.inputProps?.required ||\\n\\t\\t\\t\\t\\tfalse\\n\\n\\t\\t\\t\\tif (overrideOptions) {\\n\\t\\t\\t\\t\\titem = z.enum(overrideOptions) as unknown as z.ZodAny\\n\\t\\t\\t\\t}\\n\\n\\t\\t\\t\\treturn (\\n\\t\\t\\t\\t\\t<FormField\\n\\t\\t\\t\\t\\t\\tcontrol={form.control}\\n\\t\\t\\t\\t\\t\\tname={key}\\n\\t\\t\\t\\t\\t\\tkey={key}\\n\\t\\t\\t\\t\\t\\trender={({ field }) => {\\n\\t\\t\\t\\t\\t\\t\\tconst inputType =\\n\\t\\t\\t\\t\\t\\t\\t\\tfieldConfigItem.fieldType ??\\n\\t\\t\\t\\t\\t\\t\\t\\tDEFAULT_ZOD_HANDLERS[zodBaseType] ??\\n\\t\\t\\t\\t\\t\\t\\t\\t'fallback'\\n\\n\\t\\t\\t\\t\\t\\t\\tconst InputComponent =\\n\\t\\t\\t\\t\\t\\t\\t\\ttypeof inputType === 'function'\\n\\t\\t\\t\\t\\t\\t\\t\\t\\t? inputType\\n\\t\\t\\t\\t\\t\\t\\t\\t\\t: INPUT_COMPONENTS[inputType]\\n\\n\\t\\t\\t\\t\\t\\t\\tconst ParentElement =\\n\\t\\t\\t\\t\\t\\t\\t\\tfieldConfigItem.renderParent ?? DefaultParent\\n\\n\\t\\t\\t\\t\\t\\t\\tconst defaultValue = fieldConfigItem.inputProps?.defaultValue\\n\\t\\t\\t\\t\\t\\t\\tconst value = field.value ?? defaultValue ?? ''\\n\\n\\t\\t\\t\\t\\t\\t\\tconst fieldProps = {\\n\\t\\t\\t\\t\\t\\t\\t\\t...zodToHtmlInputProps(item),\\n\\t\\t\\t\\t\\t\\t\\t\\t...field,\\n\\t\\t\\t\\t\\t\\t\\t\\t...fieldConfigItem.inputProps,\\n\\t\\t\\t\\t\\t\\t\\t\\tdisabled: fieldConfigItem.inputProps?.disabled || isDisabled,\\n\\t\\t\\t\\t\\t\\t\\t\\tref: undefined,\\n\\t\\t\\t\\t\\t\\t\\t\\tvalue: value,\\n\\t\\t\\t\\t\\t\\t\\t}\\n\\n\\t\\t\\t\\t\\t\\t\\tif (InputComponent === undefined) {\\n\\t\\t\\t\\t\\t\\t\\t\\treturn <></>\\n\\t\\t\\t\\t\\t\\t\\t}\\n\\n\\t\\t\\t\\t\\t\\t\\treturn (\\n\\t\\t\\t\\t\\t\\t\\t\\t<ParentElement key={`${key}.parent`}>\\n\\t\\t\\t\\t\\t\\t\\t\\t\\t<InputComponent\\n\\t\\t\\t\\t\\t\\t\\t\\t\\t\\tzodInputProps={zodInputProps}\\n\\t\\t\\t\\t\\t\\t\\t\\t\\t\\tfield={field}\\n\\t\\t\\t\\t\\t\\t\\t\\t\\t\\tfieldConfigItem={fieldConfigItem}\\n\\t\\t\\t\\t\\t\\t\\t\\t\\t\\tlabel={itemName}\\n\\t\\t\\t\\t\\t\\t\\t\\t\\t\\tisRequired={isRequired}\\n\\t\\t\\t\\t\\t\\t\\t\\t\\t\\tzodItem={item}\\n\\t\\t\\t\\t\\t\\t\\t\\t\\t\\tfieldProps={fieldProps}\\n\\t\\t\\t\\t\\t\\t\\t\\t\\t\\tclassName={fieldProps.className}\\n\\t\\t\\t\\t\\t\\t\\t\\t\\t/>\\n\\t\\t\\t\\t\\t\\t\\t\\t</ParentElement>\\n\\t\\t\\t\\t\\t\\t\\t)\\n\\t\\t\\t\\t\\t\\t}}\\n\\t\\t\\t\\t\\t/>\\n\\t\\t\\t\\t)\\n\\t\\t\\t})}\\n\\t\\t</Accordion>\\n\\t)\\n}\\n\"",
  "examples": [
    {
      "source": "object.tsx",
      "code": "\"import { useForm, useFormContext } from 'react-hook-form'\\nimport * as z from 'zod'\\n\\nimport {\\n\\tAccordion,\\n\\tAccordionContent,\\n\\tAccordionItem,\\n\\tAccordionTrigger,\\n\\tFormField,\\n} from '@/modules/shadcn/components/ui'\\nimport {\\n\\tDEFAULT_ZOD_HANDLERS,\\n\\tINPUT_COMPONENTS,\\n} from '@/modules/shadcn/components/ui/auto-form/config'\\nimport {\\n\\tDependency,\\n\\tFieldConfig,\\n\\tFieldConfigItem,\\n} from '@/modules/shadcn/components/ui/auto-form/types'\\nimport {\\n\\tbeautifyObjectName,\\n\\tgetBaseSchema,\\n\\tgetBaseType,\\n\\tzodToHtmlInputProps,\\n} from '@/modules/shadcn/components/ui/auto-form/utils'\\nimport AutoFormArray from '@/modules/shadcn/components/ui/auto-form/fields/array'\\nimport resolveDependencies from '@/modules/shadcn/components/ui/auto-form/dependencies'\\n\\nfunction DefaultParent({ children }: { children: React.ReactNode }) {\\n\\treturn <>{children}</>\\n}\\n\\nexport default function AutoFormObject<\\n\\tSchemaType extends z.ZodObject<any, any>,\\n>({\\n\\tschema,\\n\\tform,\\n\\tfieldConfig,\\n\\tpath = [],\\n\\tdependencies = [],\\n}: {\\n\\tschema: SchemaType | z.ZodEffects<SchemaType>\\n\\tform: ReturnType<typeof useForm>\\n\\tfieldConfig?: FieldConfig<z.infer<SchemaType>>\\n\\tpath?: string[]\\n\\tdependencies?: Dependency<z.infer<SchemaType>>[]\\n}) {\\n\\tconst { watch } = useFormContext() // Use useFormContext to access the watch function\\n\\n\\tif (!schema) {\\n\\t\\treturn null\\n\\t}\\n\\tconst { shape } = getBaseSchema<SchemaType>(schema) || {}\\n\\n\\tif (!shape) {\\n\\t\\treturn null\\n\\t}\\n\\n\\tconst handleIfZodNumber = (item: z.ZodAny) => {\\n\\t\\tconst isZodNumber = (item as any)._def.typeName === 'ZodNumber'\\n\\t\\tconst isInnerZodNumber =\\n\\t\\t\\t(item._def as any).innerType?._def?.typeName === 'ZodNumber'\\n\\n\\t\\tif (isZodNumber) {\\n\\t\\t\\t;(item as any)._def.coerce = true\\n\\t\\t} else if (isInnerZodNumber) {\\n\\t\\t\\t;(item._def as any).innerType._def.coerce = true\\n\\t\\t}\\n\\n\\t\\treturn item\\n\\t}\\n\\n\\treturn (\\n\\t\\t<Accordion type=\\\"multiple\\\" className=\\\"space-y-5 border-none\\\">\\n\\t\\t\\t{Object.keys(shape).map((name) => {\\n\\t\\t\\t\\tlet item = shape[name] as z.ZodAny\\n\\t\\t\\t\\titem = handleIfZodNumber(item) as z.ZodAny\\n\\t\\t\\t\\tconst zodBaseType = getBaseType(item)\\n\\t\\t\\t\\tconst itemName = item._def.description ?? beautifyObjectName(name)\\n\\t\\t\\t\\tconst key = [...path, name].join('.')\\n\\n\\t\\t\\t\\tconst {\\n\\t\\t\\t\\t\\tisHidden,\\n\\t\\t\\t\\t\\tisDisabled,\\n\\t\\t\\t\\t\\tisRequired: isRequiredByDependency,\\n\\t\\t\\t\\t\\toverrideOptions,\\n\\t\\t\\t\\t} = resolveDependencies(dependencies, name, watch)\\n\\t\\t\\t\\tif (isHidden) {\\n\\t\\t\\t\\t\\treturn null\\n\\t\\t\\t\\t}\\n\\n\\t\\t\\t\\tif (zodBaseType === 'ZodObject') {\\n\\t\\t\\t\\t\\treturn (\\n\\t\\t\\t\\t\\t\\t<AccordionItem value={name} key={key} className=\\\"border-none\\\">\\n\\t\\t\\t\\t\\t\\t\\t<AccordionTrigger>{itemName}</AccordionTrigger>\\n\\t\\t\\t\\t\\t\\t\\t<AccordionContent className=\\\"p-2\\\">\\n\\t\\t\\t\\t\\t\\t\\t\\t<AutoFormObject\\n\\t\\t\\t\\t\\t\\t\\t\\t\\tschema={item as unknown as z.ZodObject<any, any>}\\n\\t\\t\\t\\t\\t\\t\\t\\t\\tform={form}\\n\\t\\t\\t\\t\\t\\t\\t\\t\\tfieldConfig={\\n\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t(fieldConfig?.[name] ?? {}) as FieldConfig<\\n\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\tz.infer<typeof item>\\n\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t>\\n\\t\\t\\t\\t\\t\\t\\t\\t\\t}\\n\\t\\t\\t\\t\\t\\t\\t\\t\\tpath={[...path, name]}\\n\\t\\t\\t\\t\\t\\t\\t\\t/>\\n\\t\\t\\t\\t\\t\\t\\t</AccordionContent>\\n\\t\\t\\t\\t\\t\\t</AccordionItem>\\n\\t\\t\\t\\t\\t)\\n\\t\\t\\t\\t}\\n\\t\\t\\t\\tif (zodBaseType === 'ZodArray') {\\n\\t\\t\\t\\t\\treturn (\\n\\t\\t\\t\\t\\t\\t<AutoFormArray\\n\\t\\t\\t\\t\\t\\t\\tkey={key}\\n\\t\\t\\t\\t\\t\\t\\tname={name}\\n\\t\\t\\t\\t\\t\\t\\titem={item as unknown as z.ZodArray<any>}\\n\\t\\t\\t\\t\\t\\t\\tform={form}\\n\\t\\t\\t\\t\\t\\t\\tfieldConfig={fieldConfig?.[name] ?? {}}\\n\\t\\t\\t\\t\\t\\t\\tpath={[...path, name]}\\n\\t\\t\\t\\t\\t\\t/>\\n\\t\\t\\t\\t\\t)\\n\\t\\t\\t\\t}\\n\\n\\t\\t\\t\\tconst fieldConfigItem: FieldConfigItem = fieldConfig?.[name] ?? {}\\n\\t\\t\\t\\tconst zodInputProps = zodToHtmlInputProps(item)\\n\\t\\t\\t\\tconst isRequired =\\n\\t\\t\\t\\t\\tisRequiredByDependency ||\\n\\t\\t\\t\\t\\tzodInputProps.required ||\\n\\t\\t\\t\\t\\tfieldConfigItem.inputProps?.required ||\\n\\t\\t\\t\\t\\tfalse\\n\\n\\t\\t\\t\\tif (overrideOptions) {\\n\\t\\t\\t\\t\\titem = z.enum(overrideOptions) as unknown as z.ZodAny\\n\\t\\t\\t\\t}\\n\\n\\t\\t\\t\\treturn (\\n\\t\\t\\t\\t\\t<FormField\\n\\t\\t\\t\\t\\t\\tcontrol={form.control}\\n\\t\\t\\t\\t\\t\\tname={key}\\n\\t\\t\\t\\t\\t\\tkey={key}\\n\\t\\t\\t\\t\\t\\trender={({ field }) => {\\n\\t\\t\\t\\t\\t\\t\\tconst inputType =\\n\\t\\t\\t\\t\\t\\t\\t\\tfieldConfigItem.fieldType ??\\n\\t\\t\\t\\t\\t\\t\\t\\tDEFAULT_ZOD_HANDLERS[zodBaseType] ??\\n\\t\\t\\t\\t\\t\\t\\t\\t'fallback'\\n\\n\\t\\t\\t\\t\\t\\t\\tconst InputComponent =\\n\\t\\t\\t\\t\\t\\t\\t\\ttypeof inputType === 'function'\\n\\t\\t\\t\\t\\t\\t\\t\\t\\t? inputType\\n\\t\\t\\t\\t\\t\\t\\t\\t\\t: INPUT_COMPONENTS[inputType]\\n\\n\\t\\t\\t\\t\\t\\t\\tconst ParentElement =\\n\\t\\t\\t\\t\\t\\t\\t\\tfieldConfigItem.renderParent ?? DefaultParent\\n\\n\\t\\t\\t\\t\\t\\t\\tconst defaultValue = fieldConfigItem.inputProps?.defaultValue\\n\\t\\t\\t\\t\\t\\t\\tconst value = field.value ?? defaultValue ?? ''\\n\\n\\t\\t\\t\\t\\t\\t\\tconst fieldProps = {\\n\\t\\t\\t\\t\\t\\t\\t\\t...zodToHtmlInputProps(item),\\n\\t\\t\\t\\t\\t\\t\\t\\t...field,\\n\\t\\t\\t\\t\\t\\t\\t\\t...fieldConfigItem.inputProps,\\n\\t\\t\\t\\t\\t\\t\\t\\tdisabled: fieldConfigItem.inputProps?.disabled || isDisabled,\\n\\t\\t\\t\\t\\t\\t\\t\\tref: undefined,\\n\\t\\t\\t\\t\\t\\t\\t\\tvalue: value,\\n\\t\\t\\t\\t\\t\\t\\t}\\n\\n\\t\\t\\t\\t\\t\\t\\tif (InputComponent === undefined) {\\n\\t\\t\\t\\t\\t\\t\\t\\treturn <></>\\n\\t\\t\\t\\t\\t\\t\\t}\\n\\n\\t\\t\\t\\t\\t\\t\\treturn (\\n\\t\\t\\t\\t\\t\\t\\t\\t<ParentElement key={`${key}.parent`}>\\n\\t\\t\\t\\t\\t\\t\\t\\t\\t<InputComponent\\n\\t\\t\\t\\t\\t\\t\\t\\t\\t\\tzodInputProps={zodInputProps}\\n\\t\\t\\t\\t\\t\\t\\t\\t\\t\\tfield={field}\\n\\t\\t\\t\\t\\t\\t\\t\\t\\t\\tfieldConfigItem={fieldConfigItem}\\n\\t\\t\\t\\t\\t\\t\\t\\t\\t\\tlabel={itemName}\\n\\t\\t\\t\\t\\t\\t\\t\\t\\t\\tisRequired={isRequired}\\n\\t\\t\\t\\t\\t\\t\\t\\t\\t\\tzodItem={item}\\n\\t\\t\\t\\t\\t\\t\\t\\t\\t\\tfieldProps={fieldProps}\\n\\t\\t\\t\\t\\t\\t\\t\\t\\t\\tclassName={fieldProps.className}\\n\\t\\t\\t\\t\\t\\t\\t\\t\\t/>\\n\\t\\t\\t\\t\\t\\t\\t\\t</ParentElement>\\n\\t\\t\\t\\t\\t\\t\\t)\\n\\t\\t\\t\\t\\t\\t}}\\n\\t\\t\\t\\t\\t/>\\n\\t\\t\\t\\t)\\n\\t\\t\\t})}\\n\\t\\t</Accordion>\\n\\t)\\n}\\n\""
    }
  ]
}
,
{
  "name": "date",
  "description": "Description for date component.",
  "usage": "\"import {\\n\\tDatePicker,\\n\\tFormControl,\\n\\tFormItem,\\n\\tFormMessage,\\n} from '@/modules/shadcn/components/ui'\\n\\nimport AutoFormLabel from '@/modules/shadcn/components/ui/auto-form/common/label'\\nimport AutoFormTooltip from '@/modules/shadcn/components/ui/auto-form/common/tooltip'\\nimport { AutoFormInputComponentProps } from '@/modules/shadcn/components/ui/auto-form/types'\\n\\nexport default function AutoFormDate({\\n\\tlabel,\\n\\tisRequired,\\n\\tfield,\\n\\tfieldConfigItem,\\n\\tfieldProps,\\n}: AutoFormInputComponentProps) {\\n\\treturn (\\n\\t\\t<FormItem>\\n\\t\\t\\t<AutoFormLabel\\n\\t\\t\\t\\tlabel={fieldConfigItem?.label || label}\\n\\t\\t\\t\\tisRequired={isRequired}\\n\\t\\t\\t/>\\n\\t\\t\\t<FormControl>\\n\\t\\t\\t\\t<DatePicker\\n\\t\\t\\t\\t\\tdate={field.value}\\n\\t\\t\\t\\t\\tsetDate={field.onChange}\\n\\t\\t\\t\\t\\t{...fieldProps}\\n\\t\\t\\t\\t/>\\n\\t\\t\\t</FormControl>\\n\\t\\t\\t<AutoFormTooltip fieldConfigItem={fieldConfigItem} />\\n\\n\\t\\t\\t<FormMessage />\\n\\t\\t</FormItem>\\n\\t)\\n}\\n\"",
  "examples": [
    {
      "source": "date.tsx",
      "code": "\"import {\\n\\tDatePicker,\\n\\tFormControl,\\n\\tFormItem,\\n\\tFormMessage,\\n} from '@/modules/shadcn/components/ui'\\n\\nimport AutoFormLabel from '@/modules/shadcn/components/ui/auto-form/common/label'\\nimport AutoFormTooltip from '@/modules/shadcn/components/ui/auto-form/common/tooltip'\\nimport { AutoFormInputComponentProps } from '@/modules/shadcn/components/ui/auto-form/types'\\n\\nexport default function AutoFormDate({\\n\\tlabel,\\n\\tisRequired,\\n\\tfield,\\n\\tfieldConfigItem,\\n\\tfieldProps,\\n}: AutoFormInputComponentProps) {\\n\\treturn (\\n\\t\\t<FormItem>\\n\\t\\t\\t<AutoFormLabel\\n\\t\\t\\t\\tlabel={fieldConfigItem?.label || label}\\n\\t\\t\\t\\tisRequired={isRequired}\\n\\t\\t\\t/>\\n\\t\\t\\t<FormControl>\\n\\t\\t\\t\\t<DatePicker\\n\\t\\t\\t\\t\\tdate={field.value}\\n\\t\\t\\t\\t\\tsetDate={field.onChange}\\n\\t\\t\\t\\t\\t{...fieldProps}\\n\\t\\t\\t\\t/>\\n\\t\\t\\t</FormControl>\\n\\t\\t\\t<AutoFormTooltip fieldConfigItem={fieldConfigItem} />\\n\\n\\t\\t\\t<FormMessage />\\n\\t\\t</FormItem>\\n\\t)\\n}\\n\""
    }
  ]
}
,
{
  "name": "checkbox",
  "description": "Description for checkbox component.",
  "usage": "\"import { Checkbox, FormControl, FormItem } from '@/modules/shadcn/components/ui'\\nimport AutoFormTooltip from '@/modules/shadcn/components/ui/auto-form/common/tooltip'\\nimport { AutoFormInputComponentProps } from '@/modules/shadcn/components/ui/auto-form/types'\\nimport AutoFormLabel from '@/modules/shadcn/components/ui/auto-form/common/label'\\n\\nexport default function AutoFormCheckbox({\\n\\tlabel,\\n\\tisRequired,\\n\\tfield,\\n\\tfieldConfigItem,\\n\\tfieldProps,\\n}: AutoFormInputComponentProps) {\\n\\treturn (\\n\\t\\t<div>\\n\\t\\t\\t<FormItem>\\n\\t\\t\\t\\t<div className=\\\"mb-3 flex items-center gap-3\\\">\\n\\t\\t\\t\\t\\t<FormControl>\\n\\t\\t\\t\\t\\t\\t<Checkbox\\n\\t\\t\\t\\t\\t\\t\\tchecked={field.value}\\n\\t\\t\\t\\t\\t\\t\\tonCheckedChange={field.onChange}\\n\\t\\t\\t\\t\\t\\t\\t{...fieldProps}\\n\\t\\t\\t\\t\\t\\t/>\\n\\t\\t\\t\\t\\t</FormControl>\\n\\t\\t\\t\\t\\t<AutoFormLabel\\n\\t\\t\\t\\t\\t\\tlabel={fieldConfigItem?.label || label}\\n\\t\\t\\t\\t\\t\\tisRequired={isRequired}\\n\\t\\t\\t\\t\\t/>\\n\\t\\t\\t\\t</div>\\n\\t\\t\\t</FormItem>\\n\\t\\t\\t<AutoFormTooltip fieldConfigItem={fieldConfigItem} />\\n\\t\\t</div>\\n\\t)\\n}\\n\"",
  "examples": [
    {
      "source": "checkbox.tsx",
      "code": "\"import { Checkbox, FormControl, FormItem } from '@/modules/shadcn/components/ui'\\nimport AutoFormTooltip from '@/modules/shadcn/components/ui/auto-form/common/tooltip'\\nimport { AutoFormInputComponentProps } from '@/modules/shadcn/components/ui/auto-form/types'\\nimport AutoFormLabel from '@/modules/shadcn/components/ui/auto-form/common/label'\\n\\nexport default function AutoFormCheckbox({\\n\\tlabel,\\n\\tisRequired,\\n\\tfield,\\n\\tfieldConfigItem,\\n\\tfieldProps,\\n}: AutoFormInputComponentProps) {\\n\\treturn (\\n\\t\\t<div>\\n\\t\\t\\t<FormItem>\\n\\t\\t\\t\\t<div className=\\\"mb-3 flex items-center gap-3\\\">\\n\\t\\t\\t\\t\\t<FormControl>\\n\\t\\t\\t\\t\\t\\t<Checkbox\\n\\t\\t\\t\\t\\t\\t\\tchecked={field.value}\\n\\t\\t\\t\\t\\t\\t\\tonCheckedChange={field.onChange}\\n\\t\\t\\t\\t\\t\\t\\t{...fieldProps}\\n\\t\\t\\t\\t\\t\\t/>\\n\\t\\t\\t\\t\\t</FormControl>\\n\\t\\t\\t\\t\\t<AutoFormLabel\\n\\t\\t\\t\\t\\t\\tlabel={fieldConfigItem?.label || label}\\n\\t\\t\\t\\t\\t\\tisRequired={isRequired}\\n\\t\\t\\t\\t\\t/>\\n\\t\\t\\t\\t</div>\\n\\t\\t\\t</FormItem>\\n\\t\\t\\t<AutoFormTooltip fieldConfigItem={fieldConfigItem} />\\n\\t\\t</div>\\n\\t)\\n}\\n\""
    }
  ]
}
,
{
  "name": "textarea",
  "description": "Description for textarea component.",
  "usage": "\"import {\\n\\tFormControl,\\n\\tFormItem,\\n\\tFormMessage,\\n\\tTextarea,\\n} from '@/modules/shadcn/components/ui'\\nimport AutoFormLabel from '@/modules/shadcn/components/ui/auto-form/common/label'\\nimport AutoFormTooltip from '@/modules/shadcn/components/ui/auto-form/common/tooltip'\\nimport { AutoFormInputComponentProps } from '@/modules/shadcn/components/ui/auto-form/types'\\n\\nexport default function AutoFormTextarea({\\n\\tlabel,\\n\\tisRequired,\\n\\tfieldConfigItem,\\n\\tfieldProps,\\n}: AutoFormInputComponentProps) {\\n\\tconst { showLabel: _showLabel, ...fieldPropsWithoutShowLabel } = fieldProps\\n\\tconst showLabel = _showLabel === undefined ? true : _showLabel\\n\\treturn (\\n\\t\\t<FormItem>\\n\\t\\t\\t{showLabel && (\\n\\t\\t\\t\\t<AutoFormLabel\\n\\t\\t\\t\\t\\tlabel={fieldConfigItem?.label || label}\\n\\t\\t\\t\\t\\tisRequired={isRequired}\\n\\t\\t\\t\\t/>\\n\\t\\t\\t)}\\n\\t\\t\\t<FormControl>\\n\\t\\t\\t\\t<Textarea {...fieldPropsWithoutShowLabel} />\\n\\t\\t\\t</FormControl>\\n\\t\\t\\t<AutoFormTooltip fieldConfigItem={fieldConfigItem} />\\n\\t\\t\\t<FormMessage />\\n\\t\\t</FormItem>\\n\\t)\\n}\\n\"",
  "examples": [
    {
      "source": "textarea.tsx",
      "code": "\"import {\\n\\tFormControl,\\n\\tFormItem,\\n\\tFormMessage,\\n\\tTextarea,\\n} from '@/modules/shadcn/components/ui'\\nimport AutoFormLabel from '@/modules/shadcn/components/ui/auto-form/common/label'\\nimport AutoFormTooltip from '@/modules/shadcn/components/ui/auto-form/common/tooltip'\\nimport { AutoFormInputComponentProps } from '@/modules/shadcn/components/ui/auto-form/types'\\n\\nexport default function AutoFormTextarea({\\n\\tlabel,\\n\\tisRequired,\\n\\tfieldConfigItem,\\n\\tfieldProps,\\n}: AutoFormInputComponentProps) {\\n\\tconst { showLabel: _showLabel, ...fieldPropsWithoutShowLabel } = fieldProps\\n\\tconst showLabel = _showLabel === undefined ? true : _showLabel\\n\\treturn (\\n\\t\\t<FormItem>\\n\\t\\t\\t{showLabel && (\\n\\t\\t\\t\\t<AutoFormLabel\\n\\t\\t\\t\\t\\tlabel={fieldConfigItem?.label || label}\\n\\t\\t\\t\\t\\tisRequired={isRequired}\\n\\t\\t\\t\\t/>\\n\\t\\t\\t)}\\n\\t\\t\\t<FormControl>\\n\\t\\t\\t\\t<Textarea {...fieldPropsWithoutShowLabel} />\\n\\t\\t\\t</FormControl>\\n\\t\\t\\t<AutoFormTooltip fieldConfigItem={fieldConfigItem} />\\n\\t\\t\\t<FormMessage />\\n\\t\\t</FormItem>\\n\\t)\\n}\\n\""
    }
  ]
}
,
{
  "name": "input",
  "description": "Description for input component.",
  "usage": "\"import {\\n\\tFormControl,\\n\\tFormItem,\\n\\tFormMessage,\\n\\tInput,\\n} from '@/modules/shadcn/components/ui'\\nimport AutoFormLabel from '@/modules/shadcn/components/ui/auto-form/common/label'\\nimport AutoFormTooltip from '@/modules/shadcn/components/ui/auto-form/common/tooltip'\\nimport { AutoFormInputComponentProps } from '@/modules/shadcn/components/ui/auto-form/types'\\n\\nexport default function AutoFormInput({\\n\\tlabel,\\n\\tisRequired,\\n\\tfieldConfigItem,\\n\\tfieldProps,\\n}: AutoFormInputComponentProps) {\\n\\tconst { showLabel: _showLabel, ...fieldPropsWithoutShowLabel } = fieldProps\\n\\tconst showLabel = _showLabel === undefined ? true : _showLabel\\n\\tconst type = fieldProps.type || 'text'\\n\\n\\treturn (\\n\\t\\t<div className=\\\"flex flex-row  items-center space-x-2\\\">\\n\\t\\t\\t<FormItem className=\\\"flex w-full flex-col justify-start\\\">\\n\\t\\t\\t\\t{showLabel && (\\n\\t\\t\\t\\t\\t<AutoFormLabel\\n\\t\\t\\t\\t\\t\\tlabel={fieldConfigItem?.label || label}\\n\\t\\t\\t\\t\\t\\tisRequired={isRequired}\\n\\t\\t\\t\\t\\t/>\\n\\t\\t\\t\\t)}\\n\\t\\t\\t\\t<FormControl>\\n\\t\\t\\t\\t\\t<Input type={type} {...fieldPropsWithoutShowLabel} />\\n\\t\\t\\t\\t</FormControl>\\n\\t\\t\\t\\t<AutoFormTooltip fieldConfigItem={fieldConfigItem} />\\n\\t\\t\\t\\t<FormMessage />\\n\\t\\t\\t</FormItem>\\n\\t\\t</div>\\n\\t)\\n}\\n\"",
  "examples": [
    {
      "source": "input.tsx",
      "code": "\"import {\\n\\tFormControl,\\n\\tFormItem,\\n\\tFormMessage,\\n\\tInput,\\n} from '@/modules/shadcn/components/ui'\\nimport AutoFormLabel from '@/modules/shadcn/components/ui/auto-form/common/label'\\nimport AutoFormTooltip from '@/modules/shadcn/components/ui/auto-form/common/tooltip'\\nimport { AutoFormInputComponentProps } from '@/modules/shadcn/components/ui/auto-form/types'\\n\\nexport default function AutoFormInput({\\n\\tlabel,\\n\\tisRequired,\\n\\tfieldConfigItem,\\n\\tfieldProps,\\n}: AutoFormInputComponentProps) {\\n\\tconst { showLabel: _showLabel, ...fieldPropsWithoutShowLabel } = fieldProps\\n\\tconst showLabel = _showLabel === undefined ? true : _showLabel\\n\\tconst type = fieldProps.type || 'text'\\n\\n\\treturn (\\n\\t\\t<div className=\\\"flex flex-row  items-center space-x-2\\\">\\n\\t\\t\\t<FormItem className=\\\"flex w-full flex-col justify-start\\\">\\n\\t\\t\\t\\t{showLabel && (\\n\\t\\t\\t\\t\\t<AutoFormLabel\\n\\t\\t\\t\\t\\t\\tlabel={fieldConfigItem?.label || label}\\n\\t\\t\\t\\t\\t\\tisRequired={isRequired}\\n\\t\\t\\t\\t\\t/>\\n\\t\\t\\t\\t)}\\n\\t\\t\\t\\t<FormControl>\\n\\t\\t\\t\\t\\t<Input type={type} {...fieldPropsWithoutShowLabel} />\\n\\t\\t\\t\\t</FormControl>\\n\\t\\t\\t\\t<AutoFormTooltip fieldConfigItem={fieldConfigItem} />\\n\\t\\t\\t\\t<FormMessage />\\n\\t\\t\\t</FormItem>\\n\\t\\t</div>\\n\\t)\\n}\\n\""
    }
  ]
}
,
{
  "name": "config",
  "description": "Description for config component.",
  "usage": "\"import AutoFormCheckbox from '@/modules/shadcn/components/ui/auto-form/fields/checkbox'\\nimport AutoFormDate from '@/modules/shadcn/components/ui/auto-form/fields/date'\\nimport AutoFormEnum from '@/modules/shadcn/components/ui/auto-form/fields/enum'\\nimport AutoFormFile from '@/modules/shadcn/components/ui/auto-form/fields/file'\\nimport AutoFormInput from '@/modules/shadcn/components/ui/auto-form/fields/input'\\nimport AutoFormNumber from '@/modules/shadcn/components/ui/auto-form/fields/number'\\nimport AutoFormRadioGroup from '@/modules/shadcn/components/ui/auto-form/fields/radio-group'\\nimport AutoFormSwitch from '@/modules/shadcn/components/ui/auto-form/fields/switch'\\nimport AutoFormTextarea from '@/modules/shadcn/components/ui/auto-form/fields/textarea'\\n\\nexport const INPUT_COMPONENTS = {\\n\\tcheckbox: AutoFormCheckbox,\\n\\tdate: AutoFormDate,\\n\\tselect: AutoFormEnum,\\n\\tradio: AutoFormRadioGroup,\\n\\tswitch: AutoFormSwitch,\\n\\ttextarea: AutoFormTextarea,\\n\\tnumber: AutoFormNumber,\\n\\tfile: AutoFormFile,\\n\\tfallback: AutoFormInput,\\n}\\n\\n/**\\n * Define handlers for specific Zod types.\\n * You can expand this object to support more types.\\n */\\nexport const DEFAULT_ZOD_HANDLERS: {\\n\\t[key: string]: keyof typeof INPUT_COMPONENTS\\n} = {\\n\\tZodBoolean: 'checkbox',\\n\\tZodDate: 'date',\\n\\tZodEnum: 'select',\\n\\tZodNativeEnum: 'select',\\n\\tZodNumber: 'number',\\n}\\n\"",
  "examples": [
    {
      "source": "config.tsx",
      "code": "\"import AutoFormCheckbox from '@/modules/shadcn/components/ui/auto-form/fields/checkbox'\\nimport AutoFormDate from '@/modules/shadcn/components/ui/auto-form/fields/date'\\nimport AutoFormEnum from '@/modules/shadcn/components/ui/auto-form/fields/enum'\\nimport AutoFormFile from '@/modules/shadcn/components/ui/auto-form/fields/file'\\nimport AutoFormInput from '@/modules/shadcn/components/ui/auto-form/fields/input'\\nimport AutoFormNumber from '@/modules/shadcn/components/ui/auto-form/fields/number'\\nimport AutoFormRadioGroup from '@/modules/shadcn/components/ui/auto-form/fields/radio-group'\\nimport AutoFormSwitch from '@/modules/shadcn/components/ui/auto-form/fields/switch'\\nimport AutoFormTextarea from '@/modules/shadcn/components/ui/auto-form/fields/textarea'\\n\\nexport const INPUT_COMPONENTS = {\\n\\tcheckbox: AutoFormCheckbox,\\n\\tdate: AutoFormDate,\\n\\tselect: AutoFormEnum,\\n\\tradio: AutoFormRadioGroup,\\n\\tswitch: AutoFormSwitch,\\n\\ttextarea: AutoFormTextarea,\\n\\tnumber: AutoFormNumber,\\n\\tfile: AutoFormFile,\\n\\tfallback: AutoFormInput,\\n}\\n\\n/**\\n * Define handlers for specific Zod types.\\n * You can expand this object to support more types.\\n */\\nexport const DEFAULT_ZOD_HANDLERS: {\\n\\t[key: string]: keyof typeof INPUT_COMPONENTS\\n} = {\\n\\tZodBoolean: 'checkbox',\\n\\tZodDate: 'date',\\n\\tZodEnum: 'select',\\n\\tZodNativeEnum: 'select',\\n\\tZodNumber: 'number',\\n}\\n\""
    }
  ]
}
,
{
  "name": "date-picker",
  "description": "Description for date-picker component.",
  "usage": "\"'use client'\\nimport { forwardRef } from 'react'\\nimport { format } from 'date-fns'\\nimport { Calendar as CalendarIcon } from 'lucide-react'\\n\\nimport { cn } from '@/modules/shadcn/lib/utils'\\nimport {\\n\\tButton,\\n\\tCalendar,\\n\\tPopover,\\n\\tPopoverContent,\\n\\tPopoverTrigger,\\n} from '@/modules/shadcn/components/ui'\\n\\nexport const DatePicker = forwardRef<\\n\\tHTMLDivElement,\\n\\t{\\n\\t\\tdate?: Date\\n\\t\\tsetDate: (date?: Date) => void\\n\\t}\\n>(function DatePickerCmp({ date, setDate }, ref) {\\n\\treturn (\\n\\t\\t<Popover>\\n\\t\\t\\t<PopoverTrigger asChild>\\n\\t\\t\\t\\t<Button\\n\\t\\t\\t\\t\\tvariant={'outline'}\\n\\t\\t\\t\\t\\tclassName={cn(\\n\\t\\t\\t\\t\\t\\t'w-full justify-start text-left font-normal',\\n\\t\\t\\t\\t\\t\\t!date && 'text-muted-foreground'\\n\\t\\t\\t\\t\\t)}\\n\\t\\t\\t\\t>\\n\\t\\t\\t\\t\\t<CalendarIcon className=\\\"mr-2 h-4 w-4\\\" />\\n\\t\\t\\t\\t\\t{date ? format(date, 'PPP') : <span>Pick a date</span>}\\n\\t\\t\\t\\t</Button>\\n\\t\\t\\t</PopoverTrigger>\\n\\t\\t\\t<PopoverContent className=\\\"w-auto p-0\\\" ref={ref}>\\n\\t\\t\\t\\t<Calendar\\n\\t\\t\\t\\t\\tmode=\\\"single\\\"\\n\\t\\t\\t\\t\\tselected={date}\\n\\t\\t\\t\\t\\tonSelect={setDate}\\n\\t\\t\\t\\t\\tinitialFocus\\n\\t\\t\\t\\t/>\\n\\t\\t\\t</PopoverContent>\\n\\t\\t</Popover>\\n\\t)\\n})\\n\"",
  "examples": [
    {
      "source": "date-picker.tsx",
      "code": "\"'use client'\\nimport { forwardRef } from 'react'\\nimport { format } from 'date-fns'\\nimport { Calendar as CalendarIcon } from 'lucide-react'\\n\\nimport { cn } from '@/modules/shadcn/lib/utils'\\nimport {\\n\\tButton,\\n\\tCalendar,\\n\\tPopover,\\n\\tPopoverContent,\\n\\tPopoverTrigger,\\n} from '@/modules/shadcn/components/ui'\\n\\nexport const DatePicker = forwardRef<\\n\\tHTMLDivElement,\\n\\t{\\n\\t\\tdate?: Date\\n\\t\\tsetDate: (date?: Date) => void\\n\\t}\\n>(function DatePickerCmp({ date, setDate }, ref) {\\n\\treturn (\\n\\t\\t<Popover>\\n\\t\\t\\t<PopoverTrigger asChild>\\n\\t\\t\\t\\t<Button\\n\\t\\t\\t\\t\\tvariant={'outline'}\\n\\t\\t\\t\\t\\tclassName={cn(\\n\\t\\t\\t\\t\\t\\t'w-full justify-start text-left font-normal',\\n\\t\\t\\t\\t\\t\\t!date && 'text-muted-foreground'\\n\\t\\t\\t\\t\\t)}\\n\\t\\t\\t\\t>\\n\\t\\t\\t\\t\\t<CalendarIcon className=\\\"mr-2 h-4 w-4\\\" />\\n\\t\\t\\t\\t\\t{date ? format(date, 'PPP') : <span>Pick a date</span>}\\n\\t\\t\\t\\t</Button>\\n\\t\\t\\t</PopoverTrigger>\\n\\t\\t\\t<PopoverContent className=\\\"w-auto p-0\\\" ref={ref}>\\n\\t\\t\\t\\t<Calendar\\n\\t\\t\\t\\t\\tmode=\\\"single\\\"\\n\\t\\t\\t\\t\\tselected={date}\\n\\t\\t\\t\\t\\tonSelect={setDate}\\n\\t\\t\\t\\t\\tinitialFocus\\n\\t\\t\\t\\t/>\\n\\t\\t\\t</PopoverContent>\\n\\t\\t</Popover>\\n\\t)\\n})\\n\""
    }
  ]
}
,
{
  "name": "sheet",
  "description": "Description for sheet component.",
  "usage": "\"'use client'\\n\\nimport {\\n\\tforwardRef,\\n\\tHTMLAttributes,\\n\\tElementRef,\\n\\tComponentPropsWithoutRef,\\n} from 'react'\\nimport * as SheetPrimitive from '@radix-ui/react-dialog'\\nimport { Cross2Icon } from '@radix-ui/react-icons'\\nimport { cva, type VariantProps } from 'class-variance-authority'\\n\\nimport { cn } from '@/modules/shadcn/lib/utils'\\n\\nconst Sheet = SheetPrimitive.Root\\n\\nconst SheetTrigger = SheetPrimitive.Trigger\\n\\nconst SheetClose = SheetPrimitive.Close\\n\\nconst SheetPortal = SheetPrimitive.Portal\\n\\nconst SheetOverlay = forwardRef<\\n\\tElementRef<typeof SheetPrimitive.Overlay>,\\n\\tComponentPropsWithoutRef<typeof SheetPrimitive.Overlay>\\n>(({ className, ...props }, ref) => (\\n\\t<SheetPrimitive.Overlay\\n\\t\\tclassName={cn(\\n\\t\\t\\t'fixed inset-0 z-50 bg-background/80 backdrop-blur-sm data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0',\\n\\t\\t\\tclassName\\n\\t\\t)}\\n\\t\\t{...props}\\n\\t\\tref={ref}\\n\\t/>\\n))\\nSheetOverlay.displayName = SheetPrimitive.Overlay.displayName\\n\\nconst sheetVariants = cva(\\n\\t'fixed z-50 gap-4 bg-background p-6 shadow-lg transition ease-in-out data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:duration-300 data-[state=open]:duration-500',\\n\\t{\\n\\t\\tvariants: {\\n\\t\\t\\tside: {\\n\\t\\t\\t\\ttop: 'inset-x-0 top-0 border-b data-[state=closed]:slide-out-to-top data-[state=open]:slide-in-from-top',\\n\\t\\t\\t\\tbottom:\\n\\t\\t\\t\\t\\t'inset-x-0 bottom-0 border-t data-[state=closed]:slide-out-to-bottom data-[state=open]:slide-in-from-bottom',\\n\\t\\t\\t\\tleft: 'inset-y-0 left-0 h-full w-3/4 border-r data-[state=closed]:slide-out-to-left data-[state=open]:slide-in-from-left sm:max-w-sm',\\n\\t\\t\\t\\tright:\\n\\t\\t\\t\\t\\t'inset-y-0 right-0 h-full w-3/4 border-l data-[state=closed]:slide-out-to-right data-[state=open]:slide-in-from-right sm:max-w-sm',\\n\\t\\t\\t},\\n\\t\\t},\\n\\t\\tdefaultVariants: {\\n\\t\\t\\tside: 'right',\\n\\t\\t},\\n\\t}\\n)\\n\\ninterface SheetContentProps\\n\\textends ComponentPropsWithoutRef<typeof SheetPrimitive.Content>,\\n\\t\\tVariantProps<typeof sheetVariants> {}\\n\\nconst SheetContent = forwardRef<\\n\\tElementRef<typeof SheetPrimitive.Content>,\\n\\tSheetContentProps\\n>(({ side = 'right', className, children, ...props }, ref) => (\\n\\t<SheetPortal>\\n\\t\\t<SheetOverlay />\\n\\t\\t<SheetPrimitive.Content\\n\\t\\t\\tref={ref}\\n\\t\\t\\tclassName={cn(sheetVariants({ side }), className)}\\n\\t\\t\\t{...props}\\n\\t\\t>\\n\\t\\t\\t{children}\\n\\t\\t\\t<SheetPrimitive.Close className=\\\"absolute right-4 top-4 rounded-sm opacity-70 ring-offset-background transition-opacity hover:opacity-100 focus:outline-none focus:ring-2 focus:ring-ring focus:ring-offset-2 disabled:pointer-events-none data-[state=open]:bg-secondary\\\">\\n\\t\\t\\t\\t<Cross2Icon className=\\\"h-4 w-4\\\" />\\n\\t\\t\\t\\t<span className=\\\"sr-only\\\">Close</span>\\n\\t\\t\\t</SheetPrimitive.Close>\\n\\t\\t</SheetPrimitive.Content>\\n\\t</SheetPortal>\\n))\\nSheetContent.displayName = SheetPrimitive.Content.displayName\\n\\nconst SheetHeader = ({\\n\\tclassName,\\n\\t...props\\n}: HTMLAttributes<HTMLDivElement>) => (\\n\\t<div\\n\\t\\tclassName={cn(\\n\\t\\t\\t'flex flex-col space-y-2 text-center sm:text-left',\\n\\t\\t\\tclassName\\n\\t\\t)}\\n\\t\\t{...props}\\n\\t/>\\n)\\nSheetHeader.displayName = 'SheetHeader'\\n\\nconst SheetFooter = ({\\n\\tclassName,\\n\\t...props\\n}: HTMLAttributes<HTMLDivElement>) => (\\n\\t<div\\n\\t\\tclassName={cn(\\n\\t\\t\\t'flex flex-col-reverse sm:flex-row sm:justify-end sm:space-x-2',\\n\\t\\t\\tclassName\\n\\t\\t)}\\n\\t\\t{...props}\\n\\t/>\\n)\\nSheetFooter.displayName = 'SheetFooter'\\n\\nconst SheetTitle = forwardRef<\\n\\tElementRef<typeof SheetPrimitive.Title>,\\n\\tComponentPropsWithoutRef<typeof SheetPrimitive.Title>\\n>(({ className, ...props }, ref) => (\\n\\t<SheetPrimitive.Title\\n\\t\\tref={ref}\\n\\t\\tclassName={cn('text-lg font-semibold text-foreground', className)}\\n\\t\\t{...props}\\n\\t/>\\n))\\nSheetTitle.displayName = SheetPrimitive.Title.displayName\\n\\nconst SheetDescription = forwardRef<\\n\\tElementRef<typeof SheetPrimitive.Description>,\\n\\tComponentPropsWithoutRef<typeof SheetPrimitive.Description>\\n>(({ className, ...props }, ref) => (\\n\\t<SheetPrimitive.Description\\n\\t\\tref={ref}\\n\\t\\tclassName={cn('text-sm text-muted-foreground', className)}\\n\\t\\t{...props}\\n\\t/>\\n))\\nSheetDescription.displayName = SheetPrimitive.Description.displayName\\n\\nexport {\\n\\tSheet,\\n\\tSheetPortal,\\n\\tSheetOverlay,\\n\\tSheetTrigger,\\n\\tSheetClose,\\n\\tSheetContent,\\n\\tSheetHeader,\\n\\tSheetFooter,\\n\\tSheetTitle,\\n\\tSheetDescription,\\n}\\n\"",
  "examples": [
    {
      "source": "sheet.tsx",
      "code": "\"'use client'\\n\\nimport {\\n\\tforwardRef,\\n\\tHTMLAttributes,\\n\\tElementRef,\\n\\tComponentPropsWithoutRef,\\n} from 'react'\\nimport * as SheetPrimitive from '@radix-ui/react-dialog'\\nimport { Cross2Icon } from '@radix-ui/react-icons'\\nimport { cva, type VariantProps } from 'class-variance-authority'\\n\\nimport { cn } from '@/modules/shadcn/lib/utils'\\n\\nconst Sheet = SheetPrimitive.Root\\n\\nconst SheetTrigger = SheetPrimitive.Trigger\\n\\nconst SheetClose = SheetPrimitive.Close\\n\\nconst SheetPortal = SheetPrimitive.Portal\\n\\nconst SheetOverlay = forwardRef<\\n\\tElementRef<typeof SheetPrimitive.Overlay>,\\n\\tComponentPropsWithoutRef<typeof SheetPrimitive.Overlay>\\n>(({ className, ...props }, ref) => (\\n\\t<SheetPrimitive.Overlay\\n\\t\\tclassName={cn(\\n\\t\\t\\t'fixed inset-0 z-50 bg-background/80 backdrop-blur-sm data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0',\\n\\t\\t\\tclassName\\n\\t\\t)}\\n\\t\\t{...props}\\n\\t\\tref={ref}\\n\\t/>\\n))\\nSheetOverlay.displayName = SheetPrimitive.Overlay.displayName\\n\\nconst sheetVariants = cva(\\n\\t'fixed z-50 gap-4 bg-background p-6 shadow-lg transition ease-in-out data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:duration-300 data-[state=open]:duration-500',\\n\\t{\\n\\t\\tvariants: {\\n\\t\\t\\tside: {\\n\\t\\t\\t\\ttop: 'inset-x-0 top-0 border-b data-[state=closed]:slide-out-to-top data-[state=open]:slide-in-from-top',\\n\\t\\t\\t\\tbottom:\\n\\t\\t\\t\\t\\t'inset-x-0 bottom-0 border-t data-[state=closed]:slide-out-to-bottom data-[state=open]:slide-in-from-bottom',\\n\\t\\t\\t\\tleft: 'inset-y-0 left-0 h-full w-3/4 border-r data-[state=closed]:slide-out-to-left data-[state=open]:slide-in-from-left sm:max-w-sm',\\n\\t\\t\\t\\tright:\\n\\t\\t\\t\\t\\t'inset-y-0 right-0 h-full w-3/4 border-l data-[state=closed]:slide-out-to-right data-[state=open]:slide-in-from-right sm:max-w-sm',\\n\\t\\t\\t},\\n\\t\\t},\\n\\t\\tdefaultVariants: {\\n\\t\\t\\tside: 'right',\\n\\t\\t},\\n\\t}\\n)\\n\\ninterface SheetContentProps\\n\\textends ComponentPropsWithoutRef<typeof SheetPrimitive.Content>,\\n\\t\\tVariantProps<typeof sheetVariants> {}\\n\\nconst SheetContent = forwardRef<\\n\\tElementRef<typeof SheetPrimitive.Content>,\\n\\tSheetContentProps\\n>(({ side = 'right', className, children, ...props }, ref) => (\\n\\t<SheetPortal>\\n\\t\\t<SheetOverlay />\\n\\t\\t<SheetPrimitive.Content\\n\\t\\t\\tref={ref}\\n\\t\\t\\tclassName={cn(sheetVariants({ side }), className)}\\n\\t\\t\\t{...props}\\n\\t\\t>\\n\\t\\t\\t{children}\\n\\t\\t\\t<SheetPrimitive.Close className=\\\"absolute right-4 top-4 rounded-sm opacity-70 ring-offset-background transition-opacity hover:opacity-100 focus:outline-none focus:ring-2 focus:ring-ring focus:ring-offset-2 disabled:pointer-events-none data-[state=open]:bg-secondary\\\">\\n\\t\\t\\t\\t<Cross2Icon className=\\\"h-4 w-4\\\" />\\n\\t\\t\\t\\t<span className=\\\"sr-only\\\">Close</span>\\n\\t\\t\\t</SheetPrimitive.Close>\\n\\t\\t</SheetPrimitive.Content>\\n\\t</SheetPortal>\\n))\\nSheetContent.displayName = SheetPrimitive.Content.displayName\\n\\nconst SheetHeader = ({\\n\\tclassName,\\n\\t...props\\n}: HTMLAttributes<HTMLDivElement>) => (\\n\\t<div\\n\\t\\tclassName={cn(\\n\\t\\t\\t'flex flex-col space-y-2 text-center sm:text-left',\\n\\t\\t\\tclassName\\n\\t\\t)}\\n\\t\\t{...props}\\n\\t/>\\n)\\nSheetHeader.displayName = 'SheetHeader'\\n\\nconst SheetFooter = ({\\n\\tclassName,\\n\\t...props\\n}: HTMLAttributes<HTMLDivElement>) => (\\n\\t<div\\n\\t\\tclassName={cn(\\n\\t\\t\\t'flex flex-col-reverse sm:flex-row sm:justify-end sm:space-x-2',\\n\\t\\t\\tclassName\\n\\t\\t)}\\n\\t\\t{...props}\\n\\t/>\\n)\\nSheetFooter.displayName = 'SheetFooter'\\n\\nconst SheetTitle = forwardRef<\\n\\tElementRef<typeof SheetPrimitive.Title>,\\n\\tComponentPropsWithoutRef<typeof SheetPrimitive.Title>\\n>(({ className, ...props }, ref) => (\\n\\t<SheetPrimitive.Title\\n\\t\\tref={ref}\\n\\t\\tclassName={cn('text-lg font-semibold text-foreground', className)}\\n\\t\\t{...props}\\n\\t/>\\n))\\nSheetTitle.displayName = SheetPrimitive.Title.displayName\\n\\nconst SheetDescription = forwardRef<\\n\\tElementRef<typeof SheetPrimitive.Description>,\\n\\tComponentPropsWithoutRef<typeof SheetPrimitive.Description>\\n>(({ className, ...props }, ref) => (\\n\\t<SheetPrimitive.Description\\n\\t\\tref={ref}\\n\\t\\tclassName={cn('text-sm text-muted-foreground', className)}\\n\\t\\t{...props}\\n\\t/>\\n))\\nSheetDescription.displayName = SheetPrimitive.Description.displayName\\n\\nexport {\\n\\tSheet,\\n\\tSheetPortal,\\n\\tSheetOverlay,\\n\\tSheetTrigger,\\n\\tSheetClose,\\n\\tSheetContent,\\n\\tSheetHeader,\\n\\tSheetFooter,\\n\\tSheetTitle,\\n\\tSheetDescription,\\n}\\n\""
    }
  ]
}
,
{
  "name": "scroll-area",
  "description": "Description for scroll-area component.",
  "usage": "\"'use client'\\n\\nimport { forwardRef, ComponentPropsWithoutRef, ElementRef } from 'react'\\nimport * as ScrollAreaPrimitive from '@radix-ui/react-scroll-area'\\n\\nimport { cn } from '@/modules/shadcn/lib/utils'\\n\\nconst ScrollArea = forwardRef<\\n\\tElementRef<typeof ScrollAreaPrimitive.Root>,\\n\\tComponentPropsWithoutRef<typeof ScrollAreaPrimitive.Root>\\n>(({ className, children, ...props }, ref) => (\\n\\t<ScrollAreaPrimitive.Root\\n\\t\\tref={ref}\\n\\t\\tclassName={cn('relative', className)}\\n\\t\\t{...props}\\n\\t>\\n\\t\\t<ScrollAreaPrimitive.Viewport className=\\\"h-full w-full rounded-[inherit]\\\">\\n\\t\\t\\t{children}\\n\\t\\t</ScrollAreaPrimitive.Viewport>\\n\\t\\t<ScrollBar />\\n\\t\\t<ScrollAreaPrimitive.Corner />\\n\\t</ScrollAreaPrimitive.Root>\\n))\\nScrollArea.displayName = ScrollAreaPrimitive.Root.displayName\\n\\nconst ScrollBar = forwardRef<\\n\\tElementRef<typeof ScrollAreaPrimitive.ScrollAreaScrollbar>,\\n\\tComponentPropsWithoutRef<typeof ScrollAreaPrimitive.ScrollAreaScrollbar>\\n>(({ className, orientation = 'vertical', ...props }, ref) => (\\n\\t<ScrollAreaPrimitive.ScrollAreaScrollbar\\n\\t\\tref={ref}\\n\\t\\torientation={orientation}\\n\\t\\tclassName={cn(\\n\\t\\t\\t'flex touch-none select-none transition-colors',\\n\\t\\t\\torientation === 'vertical' &&\\n\\t\\t\\t\\t'h-full w-2.5 border-l border-l-transparent p-[1px]',\\n\\t\\t\\torientation === 'horizontal' &&\\n\\t\\t\\t\\t'h-2.5 flex-col border-t border-t-transparent p-[1px]',\\n\\t\\t\\tclassName\\n\\t\\t)}\\n\\t\\t{...props}\\n\\t>\\n\\t\\t<ScrollAreaPrimitive.ScrollAreaThumb className=\\\"relative flex-1 rounded-full bg-border\\\" />\\n\\t</ScrollAreaPrimitive.ScrollAreaScrollbar>\\n))\\nScrollBar.displayName = ScrollAreaPrimitive.ScrollAreaScrollbar.displayName\\n\\nexport { ScrollArea, ScrollBar }\\n\"",
  "examples": [
    {
      "source": "scroll-area.tsx",
      "code": "\"'use client'\\n\\nimport { forwardRef, ComponentPropsWithoutRef, ElementRef } from 'react'\\nimport * as ScrollAreaPrimitive from '@radix-ui/react-scroll-area'\\n\\nimport { cn } from '@/modules/shadcn/lib/utils'\\n\\nconst ScrollArea = forwardRef<\\n\\tElementRef<typeof ScrollAreaPrimitive.Root>,\\n\\tComponentPropsWithoutRef<typeof ScrollAreaPrimitive.Root>\\n>(({ className, children, ...props }, ref) => (\\n\\t<ScrollAreaPrimitive.Root\\n\\t\\tref={ref}\\n\\t\\tclassName={cn('relative', className)}\\n\\t\\t{...props}\\n\\t>\\n\\t\\t<ScrollAreaPrimitive.Viewport className=\\\"h-full w-full rounded-[inherit]\\\">\\n\\t\\t\\t{children}\\n\\t\\t</ScrollAreaPrimitive.Viewport>\\n\\t\\t<ScrollBar />\\n\\t\\t<ScrollAreaPrimitive.Corner />\\n\\t</ScrollAreaPrimitive.Root>\\n))\\nScrollArea.displayName = ScrollAreaPrimitive.Root.displayName\\n\\nconst ScrollBar = forwardRef<\\n\\tElementRef<typeof ScrollAreaPrimitive.ScrollAreaScrollbar>,\\n\\tComponentPropsWithoutRef<typeof ScrollAreaPrimitive.ScrollAreaScrollbar>\\n>(({ className, orientation = 'vertical', ...props }, ref) => (\\n\\t<ScrollAreaPrimitive.ScrollAreaScrollbar\\n\\t\\tref={ref}\\n\\t\\torientation={orientation}\\n\\t\\tclassName={cn(\\n\\t\\t\\t'flex touch-none select-none transition-colors',\\n\\t\\t\\torientation === 'vertical' &&\\n\\t\\t\\t\\t'h-full w-2.5 border-l border-l-transparent p-[1px]',\\n\\t\\t\\torientation === 'horizontal' &&\\n\\t\\t\\t\\t'h-2.5 flex-col border-t border-t-transparent p-[1px]',\\n\\t\\t\\tclassName\\n\\t\\t)}\\n\\t\\t{...props}\\n\\t>\\n\\t\\t<ScrollAreaPrimitive.ScrollAreaThumb className=\\\"relative flex-1 rounded-full bg-border\\\" />\\n\\t</ScrollAreaPrimitive.ScrollAreaScrollbar>\\n))\\nScrollBar.displayName = ScrollAreaPrimitive.ScrollAreaScrollbar.displayName\\n\\nexport { ScrollArea, ScrollBar }\\n\""
    }
  ]
}
,
{
  "name": "label",
  "description": "Description for label component.",
  "usage": "\"'use client'\\n\\nimport * as React from 'react'\\nimport * as LabelPrimitive from '@radix-ui/react-label'\\nimport { cva, type VariantProps } from 'class-variance-authority'\\n\\nimport { cn } from '@/modules/shadcn/lib/utils'\\n\\nconst labelVariants = cva(\\n\\t'text-sm font-medium leading-none peer-disabled:cursor-not-allowed peer-disabled:opacity-70'\\n)\\n\\nconst Label = React.forwardRef<\\n\\tReact.ElementRef<typeof LabelPrimitive.Root>,\\n\\tReact.ComponentPropsWithoutRef<typeof LabelPrimitive.Root> &\\n\\t\\tVariantProps<typeof labelVariants>\\n>(({ className, ...props }, ref) => (\\n\\t<LabelPrimitive.Root\\n\\t\\tref={ref}\\n\\t\\tclassName={cn(labelVariants(), className)}\\n\\t\\t{...props}\\n\\t/>\\n))\\nLabel.displayName = LabelPrimitive.Root.displayName\\n\\nexport { Label }\\n\"",
  "examples": [
    {
      "source": "label.tsx",
      "code": "\"'use client'\\n\\nimport * as React from 'react'\\nimport * as LabelPrimitive from '@radix-ui/react-label'\\nimport { cva, type VariantProps } from 'class-variance-authority'\\n\\nimport { cn } from '@/modules/shadcn/lib/utils'\\n\\nconst labelVariants = cva(\\n\\t'text-sm font-medium leading-none peer-disabled:cursor-not-allowed peer-disabled:opacity-70'\\n)\\n\\nconst Label = React.forwardRef<\\n\\tReact.ElementRef<typeof LabelPrimitive.Root>,\\n\\tReact.ComponentPropsWithoutRef<typeof LabelPrimitive.Root> &\\n\\t\\tVariantProps<typeof labelVariants>\\n>(({ className, ...props }, ref) => (\\n\\t<LabelPrimitive.Root\\n\\t\\tref={ref}\\n\\t\\tclassName={cn(labelVariants(), className)}\\n\\t\\t{...props}\\n\\t/>\\n))\\nLabel.displayName = LabelPrimitive.Root.displayName\\n\\nexport { Label }\\n\""
    }
  ]
}
,
{
  "name": "accordion",
  "description": "Description for accordion component.",
  "usage": "\"'use client'\\n\\nimport * as React from 'react'\\nimport * as AccordionPrimitive from '@radix-ui/react-accordion'\\nimport { ChevronDown } from 'lucide-react'\\nimport { cn } from '@/modules/shadcn/lib/utils'\\n\\nconst Accordion = AccordionPrimitive.Root\\n\\nconst AccordionItem = React.forwardRef<\\n\\tReact.ElementRef<typeof AccordionPrimitive.Item>,\\n\\tReact.ComponentPropsWithoutRef<typeof AccordionPrimitive.Item>\\n>(({ className, ...props }, ref) => (\\n\\t<AccordionPrimitive.Item\\n\\t\\tref={ref}\\n\\t\\tclassName={cn('border-b', className)}\\n\\t\\t{...props}\\n\\t/>\\n))\\nAccordionItem.displayName = 'AccordionItem'\\n\\nconst AccordionTrigger = React.forwardRef<\\n\\tReact.ElementRef<typeof AccordionPrimitive.Trigger>,\\n\\tReact.ComponentPropsWithoutRef<typeof AccordionPrimitive.Trigger>\\n>(({ className, children, ...props }, ref) => (\\n\\t<AccordionPrimitive.Header className=\\\"flex\\\">\\n\\t\\t<AccordionPrimitive.Trigger\\n\\t\\t\\tref={ref}\\n\\t\\t\\tclassName={cn(\\n\\t\\t\\t\\t'flex flex-1 items-center justify-between py-4 font-medium transition-all hover:underline [&[data-state=open]>svg]:rotate-180',\\n\\t\\t\\t\\tclassName\\n\\t\\t\\t)}\\n\\t\\t\\t{...props}\\n\\t\\t>\\n\\t\\t\\t{children}\\n\\t\\t\\t{!props.disabled && (\\n\\t\\t\\t\\t<ChevronDown className=\\\"h-4 w-4 shrink-0 transition-transform duration-200\\\" />\\n\\t\\t\\t)}\\n\\t\\t</AccordionPrimitive.Trigger>\\n\\t</AccordionPrimitive.Header>\\n))\\nAccordionTrigger.displayName = AccordionPrimitive.Trigger.displayName\\n\\nconst AccordionContent = React.forwardRef<\\n\\tReact.ElementRef<typeof AccordionPrimitive.Content>,\\n\\tReact.ComponentPropsWithoutRef<typeof AccordionPrimitive.Content>\\n>(({ className, children, ...props }, ref) => (\\n\\t<AccordionPrimitive.Content\\n\\t\\tref={ref}\\n\\t\\tclassName=\\\"overflow-hidden text-sm transition-all data-[state=closed]:animate-accordion-up data-[state=open]:animate-accordion-down\\\"\\n\\t\\t{...props}\\n\\t>\\n\\t\\t<div className={cn('pb-4 pt-0', className)}>{children}</div>\\n\\t</AccordionPrimitive.Content>\\n))\\n\\nAccordionContent.displayName = AccordionPrimitive.Content.displayName\\n\\nexport { Accordion, AccordionItem, AccordionTrigger, AccordionContent }\\n\"",
  "examples": [
    {
      "source": "accordion.tsx",
      "code": "\"'use client'\\n\\nimport * as React from 'react'\\nimport * as AccordionPrimitive from '@radix-ui/react-accordion'\\nimport { ChevronDown } from 'lucide-react'\\nimport { cn } from '@/modules/shadcn/lib/utils'\\n\\nconst Accordion = AccordionPrimitive.Root\\n\\nconst AccordionItem = React.forwardRef<\\n\\tReact.ElementRef<typeof AccordionPrimitive.Item>,\\n\\tReact.ComponentPropsWithoutRef<typeof AccordionPrimitive.Item>\\n>(({ className, ...props }, ref) => (\\n\\t<AccordionPrimitive.Item\\n\\t\\tref={ref}\\n\\t\\tclassName={cn('border-b', className)}\\n\\t\\t{...props}\\n\\t/>\\n))\\nAccordionItem.displayName = 'AccordionItem'\\n\\nconst AccordionTrigger = React.forwardRef<\\n\\tReact.ElementRef<typeof AccordionPrimitive.Trigger>,\\n\\tReact.ComponentPropsWithoutRef<typeof AccordionPrimitive.Trigger>\\n>(({ className, children, ...props }, ref) => (\\n\\t<AccordionPrimitive.Header className=\\\"flex\\\">\\n\\t\\t<AccordionPrimitive.Trigger\\n\\t\\t\\tref={ref}\\n\\t\\t\\tclassName={cn(\\n\\t\\t\\t\\t'flex flex-1 items-center justify-between py-4 font-medium transition-all hover:underline [&[data-state=open]>svg]:rotate-180',\\n\\t\\t\\t\\tclassName\\n\\t\\t\\t)}\\n\\t\\t\\t{...props}\\n\\t\\t>\\n\\t\\t\\t{children}\\n\\t\\t\\t{!props.disabled && (\\n\\t\\t\\t\\t<ChevronDown className=\\\"h-4 w-4 shrink-0 transition-transform duration-200\\\" />\\n\\t\\t\\t)}\\n\\t\\t</AccordionPrimitive.Trigger>\\n\\t</AccordionPrimitive.Header>\\n))\\nAccordionTrigger.displayName = AccordionPrimitive.Trigger.displayName\\n\\nconst AccordionContent = React.forwardRef<\\n\\tReact.ElementRef<typeof AccordionPrimitive.Content>,\\n\\tReact.ComponentPropsWithoutRef<typeof AccordionPrimitive.Content>\\n>(({ className, children, ...props }, ref) => (\\n\\t<AccordionPrimitive.Content\\n\\t\\tref={ref}\\n\\t\\tclassName=\\\"overflow-hidden text-sm transition-all data-[state=closed]:animate-accordion-up data-[state=open]:animate-accordion-down\\\"\\n\\t\\t{...props}\\n\\t>\\n\\t\\t<div className={cn('pb-4 pt-0', className)}>{children}</div>\\n\\t</AccordionPrimitive.Content>\\n))\\n\\nAccordionContent.displayName = AccordionPrimitive.Content.displayName\\n\\nexport { Accordion, AccordionItem, AccordionTrigger, AccordionContent }\\n\""
    }
  ]
}
,
{
  "name": "tooltip",
  "description": "Description for tooltip component.",
  "usage": "\"'use client'\\n\\nimport { forwardRef } from 'react'\\nimport * as TooltipPrimitive from '@radix-ui/react-tooltip'\\n\\nimport { cn } from '@/modules/shadcn/lib/utils'\\n\\nconst TooltipProvider = TooltipPrimitive.Provider\\n\\nconst Tooltip = TooltipPrimitive.Root\\n\\nconst TooltipTrigger = TooltipPrimitive.Trigger\\n\\nconst TooltipContent = forwardRef<\\n\\tReact.ElementRef<typeof TooltipPrimitive.Content>,\\n\\tReact.ComponentPropsWithoutRef<typeof TooltipPrimitive.Content>\\n>(({ className, sideOffset = 4, ...props }, ref) => (\\n\\t<TooltipPrimitive.Content\\n\\t\\tref={ref}\\n\\t\\tsideOffset={sideOffset}\\n\\t\\tclassName={cn(\\n\\t\\t\\t'z-50 overflow-hidden rounded-md bg-primary px-3 py-1.5 text-xs text-primary-foreground animate-in fade-in-0 zoom-in-95 data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=closed]:zoom-out-95 data-[side=bottom]:slide-in-from-top-2 data-[side=left]:slide-in-from-right-2 data-[side=right]:slide-in-from-left-2 data-[side=top]:slide-in-from-bottom-2',\\n\\t\\t\\tclassName\\n\\t\\t)}\\n\\t\\t{...props}\\n\\t/>\\n))\\nTooltipContent.displayName = TooltipPrimitive.Content.displayName\\n\\nexport { Tooltip, TooltipTrigger, TooltipContent, TooltipProvider }\\n\"",
  "examples": [
    {
      "source": "tooltip.tsx",
      "code": "\"'use client'\\n\\nimport { forwardRef } from 'react'\\nimport * as TooltipPrimitive from '@radix-ui/react-tooltip'\\n\\nimport { cn } from '@/modules/shadcn/lib/utils'\\n\\nconst TooltipProvider = TooltipPrimitive.Provider\\n\\nconst Tooltip = TooltipPrimitive.Root\\n\\nconst TooltipTrigger = TooltipPrimitive.Trigger\\n\\nconst TooltipContent = forwardRef<\\n\\tReact.ElementRef<typeof TooltipPrimitive.Content>,\\n\\tReact.ComponentPropsWithoutRef<typeof TooltipPrimitive.Content>\\n>(({ className, sideOffset = 4, ...props }, ref) => (\\n\\t<TooltipPrimitive.Content\\n\\t\\tref={ref}\\n\\t\\tsideOffset={sideOffset}\\n\\t\\tclassName={cn(\\n\\t\\t\\t'z-50 overflow-hidden rounded-md bg-primary px-3 py-1.5 text-xs text-primary-foreground animate-in fade-in-0 zoom-in-95 data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=closed]:zoom-out-95 data-[side=bottom]:slide-in-from-top-2 data-[side=left]:slide-in-from-right-2 data-[side=right]:slide-in-from-left-2 data-[side=top]:slide-in-from-bottom-2',\\n\\t\\t\\tclassName\\n\\t\\t)}\\n\\t\\t{...props}\\n\\t/>\\n))\\nTooltipContent.displayName = TooltipPrimitive.Content.displayName\\n\\nexport { Tooltip, TooltipTrigger, TooltipContent, TooltipProvider }\\n\""
    }
  ]
}
,
{
  "name": "switch",
  "description": "Description for switch component.",
  "usage": "\"'use client'\\n\\nimport * as React from 'react'\\nimport * as SwitchPrimitives from '@radix-ui/react-switch'\\n\\nimport { cn } from '@/modules/shadcn/lib/utils'\\n\\nconst Switch = React.forwardRef<\\n\\tReact.ElementRef<typeof SwitchPrimitives.Root>,\\n\\tReact.ComponentPropsWithoutRef<typeof SwitchPrimitives.Root>\\n>(({ className, ...props }, ref) => (\\n\\t<SwitchPrimitives.Root\\n\\t\\tclassName={cn(\\n\\t\\t\\t'peer inline-flex h-6 w-11 shrink-0 cursor-pointer items-center rounded-full border-2 border-transparent transition-colors focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2 focus-visible:ring-offset-background disabled:cursor-not-allowed disabled:opacity-50 data-[state=checked]:bg-primary data-[state=unchecked]:bg-input',\\n\\t\\t\\tclassName\\n\\t\\t)}\\n\\t\\t{...props}\\n\\t\\tref={ref}\\n\\t>\\n\\t\\t<SwitchPrimitives.Thumb\\n\\t\\t\\tclassName={cn(\\n\\t\\t\\t\\t'pointer-events-none block h-5 w-5 rounded-full bg-background shadow-lg ring-0 transition-transform data-[state=checked]:translate-x-5 data-[state=unchecked]:translate-x-0'\\n\\t\\t\\t)}\\n\\t\\t/>\\n\\t</SwitchPrimitives.Root>\\n))\\nSwitch.displayName = SwitchPrimitives.Root.displayName\\n\\nexport { Switch }\\n\"",
  "examples": [
    {
      "source": "switch.tsx",
      "code": "\"'use client'\\n\\nimport * as React from 'react'\\nimport * as SwitchPrimitives from '@radix-ui/react-switch'\\n\\nimport { cn } from '@/modules/shadcn/lib/utils'\\n\\nconst Switch = React.forwardRef<\\n\\tReact.ElementRef<typeof SwitchPrimitives.Root>,\\n\\tReact.ComponentPropsWithoutRef<typeof SwitchPrimitives.Root>\\n>(({ className, ...props }, ref) => (\\n\\t<SwitchPrimitives.Root\\n\\t\\tclassName={cn(\\n\\t\\t\\t'peer inline-flex h-6 w-11 shrink-0 cursor-pointer items-center rounded-full border-2 border-transparent transition-colors focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2 focus-visible:ring-offset-background disabled:cursor-not-allowed disabled:opacity-50 data-[state=checked]:bg-primary data-[state=unchecked]:bg-input',\\n\\t\\t\\tclassName\\n\\t\\t)}\\n\\t\\t{...props}\\n\\t\\tref={ref}\\n\\t>\\n\\t\\t<SwitchPrimitives.Thumb\\n\\t\\t\\tclassName={cn(\\n\\t\\t\\t\\t'pointer-events-none block h-5 w-5 rounded-full bg-background shadow-lg ring-0 transition-transform data-[state=checked]:translate-x-5 data-[state=unchecked]:translate-x-0'\\n\\t\\t\\t)}\\n\\t\\t/>\\n\\t</SwitchPrimitives.Root>\\n))\\nSwitch.displayName = SwitchPrimitives.Root.displayName\\n\\nexport { Switch }\\n\""
    }
  ]
}
,
{
  "name": "calendar",
  "description": "Description for calendar component.",
  "usage": "\"'use client'\\n\\nimport * as React from 'react'\\nimport { ChevronLeft, ChevronRight } from 'lucide-react'\\nimport { DayPicker } from 'react-day-picker'\\n\\nimport { cn } from '@/modules/shadcn/lib/utils'\\nimport { buttonVariants } from '@/modules/shadcn/components/ui'\\n\\nexport type CalendarProps = React.ComponentProps<typeof DayPicker>\\n\\nfunction Calendar({\\n\\tclassName,\\n\\tclassNames,\\n\\tshowOutsideDays = true,\\n\\t...props\\n}: CalendarProps) {\\n\\treturn (\\n\\t\\t<DayPicker\\n\\t\\t\\tshowOutsideDays={showOutsideDays}\\n\\t\\t\\tclassName={cn('p-3', className)}\\n\\t\\t\\tclassNames={{\\n\\t\\t\\t\\tmonths: 'flex flex-col sm:flex-row space-y-4 sm:space-x-4 sm:space-y-0',\\n\\t\\t\\t\\tmonth: 'space-y-4',\\n\\t\\t\\t\\tcaption: 'flex justify-center pt-1 relative items-center',\\n\\t\\t\\t\\tcaption_label: 'text-sm font-medium',\\n\\t\\t\\t\\tnav: 'space-x-1 flex items-center',\\n\\t\\t\\t\\tnav_button: cn(\\n\\t\\t\\t\\t\\tbuttonVariants({ variant: 'outline' }),\\n\\t\\t\\t\\t\\t'h-7 w-7 bg-transparent p-0 opacity-50 hover:opacity-100'\\n\\t\\t\\t\\t),\\n\\t\\t\\t\\tnav_button_previous: 'absolute left-1',\\n\\t\\t\\t\\tnav_button_next: 'absolute right-1',\\n\\t\\t\\t\\ttable: 'w-full border-collapse space-y-1',\\n\\t\\t\\t\\thead_row: 'flex',\\n\\t\\t\\t\\thead_cell:\\n\\t\\t\\t\\t\\t'text-muted-foreground rounded-md w-9 font-normal text-[0.8rem]',\\n\\t\\t\\t\\trow: 'flex w-full mt-2',\\n\\t\\t\\t\\tcell: 'h-9 w-9 text-center text-sm p-0 relative [&:has([aria-selected].day-range-end)]:rounded-r-md [&:has([aria-selected].day-outside)]:bg-accent/50 [&:has([aria-selected])]:bg-accent first:[&:has([aria-selected])]:rounded-l-md last:[&:has([aria-selected])]:rounded-r-md focus-within:relative focus-within:z-20',\\n\\t\\t\\t\\tday: cn(\\n\\t\\t\\t\\t\\tbuttonVariants({ variant: 'ghost' }),\\n\\t\\t\\t\\t\\t'h-9 w-9 p-0 font-normal aria-selected:opacity-100'\\n\\t\\t\\t\\t),\\n\\t\\t\\t\\tday_range_end: 'day-range-end',\\n\\t\\t\\t\\tday_selected:\\n\\t\\t\\t\\t\\t'bg-primary text-primary-foreground hover:bg-primary hover:text-primary-foreground focus:bg-primary focus:text-primary-foreground',\\n\\t\\t\\t\\tday_today: 'bg-accent text-accent-foreground',\\n\\t\\t\\t\\tday_outside:\\n\\t\\t\\t\\t\\t'day-outside text-muted-foreground opacity-50 aria-selected:bg-accent/50 aria-selected:text-muted-foreground aria-selected:opacity-30',\\n\\t\\t\\t\\tday_disabled: 'text-muted-foreground opacity-50',\\n\\t\\t\\t\\tday_range_middle:\\n\\t\\t\\t\\t\\t'aria-selected:bg-accent aria-selected:text-accent-foreground',\\n\\t\\t\\t\\tday_hidden: 'invisible',\\n\\t\\t\\t\\t...classNames,\\n\\t\\t\\t}}\\n\\t\\t\\tcomponents={{\\n\\t\\t\\t\\tIconLeft: ({ ...props }) => <ChevronLeft className=\\\"h-4 w-4\\\" />,\\n\\t\\t\\t\\tIconRight: ({ ...props }) => <ChevronRight className=\\\"h-4 w-4\\\" />,\\n\\t\\t\\t}}\\n\\t\\t\\t{...props}\\n\\t\\t/>\\n\\t)\\n}\\nCalendar.displayName = 'Calendar'\\n\\nexport { Calendar }\\n\"",
  "examples": [
    {
      "source": "calendar.tsx",
      "code": "\"'use client'\\n\\nimport * as React from 'react'\\nimport { ChevronLeft, ChevronRight } from 'lucide-react'\\nimport { DayPicker } from 'react-day-picker'\\n\\nimport { cn } from '@/modules/shadcn/lib/utils'\\nimport { buttonVariants } from '@/modules/shadcn/components/ui'\\n\\nexport type CalendarProps = React.ComponentProps<typeof DayPicker>\\n\\nfunction Calendar({\\n\\tclassName,\\n\\tclassNames,\\n\\tshowOutsideDays = true,\\n\\t...props\\n}: CalendarProps) {\\n\\treturn (\\n\\t\\t<DayPicker\\n\\t\\t\\tshowOutsideDays={showOutsideDays}\\n\\t\\t\\tclassName={cn('p-3', className)}\\n\\t\\t\\tclassNames={{\\n\\t\\t\\t\\tmonths: 'flex flex-col sm:flex-row space-y-4 sm:space-x-4 sm:space-y-0',\\n\\t\\t\\t\\tmonth: 'space-y-4',\\n\\t\\t\\t\\tcaption: 'flex justify-center pt-1 relative items-center',\\n\\t\\t\\t\\tcaption_label: 'text-sm font-medium',\\n\\t\\t\\t\\tnav: 'space-x-1 flex items-center',\\n\\t\\t\\t\\tnav_button: cn(\\n\\t\\t\\t\\t\\tbuttonVariants({ variant: 'outline' }),\\n\\t\\t\\t\\t\\t'h-7 w-7 bg-transparent p-0 opacity-50 hover:opacity-100'\\n\\t\\t\\t\\t),\\n\\t\\t\\t\\tnav_button_previous: 'absolute left-1',\\n\\t\\t\\t\\tnav_button_next: 'absolute right-1',\\n\\t\\t\\t\\ttable: 'w-full border-collapse space-y-1',\\n\\t\\t\\t\\thead_row: 'flex',\\n\\t\\t\\t\\thead_cell:\\n\\t\\t\\t\\t\\t'text-muted-foreground rounded-md w-9 font-normal text-[0.8rem]',\\n\\t\\t\\t\\trow: 'flex w-full mt-2',\\n\\t\\t\\t\\tcell: 'h-9 w-9 text-center text-sm p-0 relative [&:has([aria-selected].day-range-end)]:rounded-r-md [&:has([aria-selected].day-outside)]:bg-accent/50 [&:has([aria-selected])]:bg-accent first:[&:has([aria-selected])]:rounded-l-md last:[&:has([aria-selected])]:rounded-r-md focus-within:relative focus-within:z-20',\\n\\t\\t\\t\\tday: cn(\\n\\t\\t\\t\\t\\tbuttonVariants({ variant: 'ghost' }),\\n\\t\\t\\t\\t\\t'h-9 w-9 p-0 font-normal aria-selected:opacity-100'\\n\\t\\t\\t\\t),\\n\\t\\t\\t\\tday_range_end: 'day-range-end',\\n\\t\\t\\t\\tday_selected:\\n\\t\\t\\t\\t\\t'bg-primary text-primary-foreground hover:bg-primary hover:text-primary-foreground focus:bg-primary focus:text-primary-foreground',\\n\\t\\t\\t\\tday_today: 'bg-accent text-accent-foreground',\\n\\t\\t\\t\\tday_outside:\\n\\t\\t\\t\\t\\t'day-outside text-muted-foreground opacity-50 aria-selected:bg-accent/50 aria-selected:text-muted-foreground aria-selected:opacity-30',\\n\\t\\t\\t\\tday_disabled: 'text-muted-foreground opacity-50',\\n\\t\\t\\t\\tday_range_middle:\\n\\t\\t\\t\\t\\t'aria-selected:bg-accent aria-selected:text-accent-foreground',\\n\\t\\t\\t\\tday_hidden: 'invisible',\\n\\t\\t\\t\\t...classNames,\\n\\t\\t\\t}}\\n\\t\\t\\tcomponents={{\\n\\t\\t\\t\\tIconLeft: ({ ...props }) => <ChevronLeft className=\\\"h-4 w-4\\\" />,\\n\\t\\t\\t\\tIconRight: ({ ...props }) => <ChevronRight className=\\\"h-4 w-4\\\" />,\\n\\t\\t\\t}}\\n\\t\\t\\t{...props}\\n\\t\\t/>\\n\\t)\\n}\\nCalendar.displayName = 'Calendar'\\n\\nexport { Calendar }\\n\""
    }
  ]
}
,
{
  "name": "radio-group",
  "description": "Description for radio-group component.",
  "usage": "\"'use client'\\n\\nimport * as React from 'react'\\nimport * as RadioGroupPrimitive from '@radix-ui/react-radio-group'\\nimport { Circle } from 'lucide-react'\\n\\nimport { cn } from '@/modules/shadcn/lib/utils'\\n\\nconst RadioGroup = React.forwardRef<\\n\\tReact.ElementRef<typeof RadioGroupPrimitive.Root>,\\n\\tReact.ComponentPropsWithoutRef<typeof RadioGroupPrimitive.Root>\\n>(({ className, ...props }, ref) => {\\n\\treturn (\\n\\t\\t<RadioGroupPrimitive.Root\\n\\t\\t\\tclassName={cn('grid gap-2', className)}\\n\\t\\t\\t{...props}\\n\\t\\t\\tref={ref}\\n\\t\\t/>\\n\\t)\\n})\\nRadioGroup.displayName = RadioGroupPrimitive.Root.displayName\\n\\nconst RadioGroupItem = React.forwardRef<\\n\\tReact.ElementRef<typeof RadioGroupPrimitive.Item>,\\n\\tReact.ComponentPropsWithoutRef<typeof RadioGroupPrimitive.Item>\\n>(({ className, ...props }, ref) => {\\n\\treturn (\\n\\t\\t<RadioGroupPrimitive.Item\\n\\t\\t\\tref={ref}\\n\\t\\t\\tclassName={cn(\\n\\t\\t\\t\\t'aspect-square h-4 w-4 rounded-full border border-primary text-primary ring-offset-background focus:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2 disabled:cursor-not-allowed disabled:opacity-50',\\n\\t\\t\\t\\tclassName\\n\\t\\t\\t)}\\n\\t\\t\\t{...props}\\n\\t\\t>\\n\\t\\t\\t<RadioGroupPrimitive.Indicator className=\\\"flex items-center justify-center\\\">\\n\\t\\t\\t\\t<Circle className=\\\"h-2.5 w-2.5 fill-current text-current\\\" />\\n\\t\\t\\t</RadioGroupPrimitive.Indicator>\\n\\t\\t</RadioGroupPrimitive.Item>\\n\\t)\\n})\\nRadioGroupItem.displayName = RadioGroupPrimitive.Item.displayName\\n\\nexport { RadioGroup, RadioGroupItem }\\n\"",
  "examples": [
    {
      "source": "radio-group.tsx",
      "code": "\"'use client'\\n\\nimport * as React from 'react'\\nimport * as RadioGroupPrimitive from '@radix-ui/react-radio-group'\\nimport { Circle } from 'lucide-react'\\n\\nimport { cn } from '@/modules/shadcn/lib/utils'\\n\\nconst RadioGroup = React.forwardRef<\\n\\tReact.ElementRef<typeof RadioGroupPrimitive.Root>,\\n\\tReact.ComponentPropsWithoutRef<typeof RadioGroupPrimitive.Root>\\n>(({ className, ...props }, ref) => {\\n\\treturn (\\n\\t\\t<RadioGroupPrimitive.Root\\n\\t\\t\\tclassName={cn('grid gap-2', className)}\\n\\t\\t\\t{...props}\\n\\t\\t\\tref={ref}\\n\\t\\t/>\\n\\t)\\n})\\nRadioGroup.displayName = RadioGroupPrimitive.Root.displayName\\n\\nconst RadioGroupItem = React.forwardRef<\\n\\tReact.ElementRef<typeof RadioGroupPrimitive.Item>,\\n\\tReact.ComponentPropsWithoutRef<typeof RadioGroupPrimitive.Item>\\n>(({ className, ...props }, ref) => {\\n\\treturn (\\n\\t\\t<RadioGroupPrimitive.Item\\n\\t\\t\\tref={ref}\\n\\t\\t\\tclassName={cn(\\n\\t\\t\\t\\t'aspect-square h-4 w-4 rounded-full border border-primary text-primary ring-offset-background focus:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2 disabled:cursor-not-allowed disabled:opacity-50',\\n\\t\\t\\t\\tclassName\\n\\t\\t\\t)}\\n\\t\\t\\t{...props}\\n\\t\\t>\\n\\t\\t\\t<RadioGroupPrimitive.Indicator className=\\\"flex items-center justify-center\\\">\\n\\t\\t\\t\\t<Circle className=\\\"h-2.5 w-2.5 fill-current text-current\\\" />\\n\\t\\t\\t</RadioGroupPrimitive.Indicator>\\n\\t\\t</RadioGroupPrimitive.Item>\\n\\t)\\n})\\nRadioGroupItem.displayName = RadioGroupPrimitive.Item.displayName\\n\\nexport { RadioGroup, RadioGroupItem }\\n\""
    }
  ]
}
,
{
  "name": "avatar",
  "description": "Description for avatar component.",
  "usage": "\"'use client'\\n\\nimport { forwardRef } from 'react'\\nimport * as AvatarPrimitive from '@radix-ui/react-avatar'\\n\\nimport { cn } from '@/modules/shadcn/lib/utils'\\n\\nconst Avatar = forwardRef<\\n\\tReact.ElementRef<typeof AvatarPrimitive.Root>,\\n\\tReact.ComponentPropsWithoutRef<typeof AvatarPrimitive.Root>\\n>(({ className, ...props }, ref) => (\\n\\t<AvatarPrimitive.Root\\n\\t\\tref={ref}\\n\\t\\tclassName={cn(\\n\\t\\t\\t'relative flex h-10 w-10 shrink-0 overflow-hidden rounded-full',\\n\\t\\t\\tclassName\\n\\t\\t)}\\n\\t\\t{...props}\\n\\t/>\\n))\\nAvatar.displayName = AvatarPrimitive.Root.displayName\\n\\nconst AvatarImage = forwardRef<\\n\\tReact.ElementRef<typeof AvatarPrimitive.Image>,\\n\\tReact.ComponentPropsWithoutRef<typeof AvatarPrimitive.Image>\\n>(({ className, ...props }, ref) => (\\n\\t<AvatarPrimitive.Image\\n\\t\\tref={ref}\\n\\t\\tclassName={cn('aspect-square h-full w-full', className)}\\n\\t\\t{...props}\\n\\t/>\\n))\\nAvatarImage.displayName = AvatarPrimitive.Image.displayName\\n\\nconst AvatarFallback = forwardRef<\\n\\tReact.ElementRef<typeof AvatarPrimitive.Fallback>,\\n\\tReact.ComponentPropsWithoutRef<typeof AvatarPrimitive.Fallback>\\n>(({ className, ...props }, ref) => (\\n\\t<AvatarPrimitive.Fallback\\n\\t\\tref={ref}\\n\\t\\tclassName={cn(\\n\\t\\t\\t'flex h-full w-full items-center justify-center rounded-full bg-muted',\\n\\t\\t\\tclassName\\n\\t\\t)}\\n\\t\\t{...props}\\n\\t/>\\n))\\nAvatarFallback.displayName = AvatarPrimitive.Fallback.displayName\\n\\nexport { Avatar, AvatarImage, AvatarFallback }\\n\"",
  "examples": [
    {
      "source": "avatar.tsx",
      "code": "\"'use client'\\n\\nimport { forwardRef } from 'react'\\nimport * as AvatarPrimitive from '@radix-ui/react-avatar'\\n\\nimport { cn } from '@/modules/shadcn/lib/utils'\\n\\nconst Avatar = forwardRef<\\n\\tReact.ElementRef<typeof AvatarPrimitive.Root>,\\n\\tReact.ComponentPropsWithoutRef<typeof AvatarPrimitive.Root>\\n>(({ className, ...props }, ref) => (\\n\\t<AvatarPrimitive.Root\\n\\t\\tref={ref}\\n\\t\\tclassName={cn(\\n\\t\\t\\t'relative flex h-10 w-10 shrink-0 overflow-hidden rounded-full',\\n\\t\\t\\tclassName\\n\\t\\t)}\\n\\t\\t{...props}\\n\\t/>\\n))\\nAvatar.displayName = AvatarPrimitive.Root.displayName\\n\\nconst AvatarImage = forwardRef<\\n\\tReact.ElementRef<typeof AvatarPrimitive.Image>,\\n\\tReact.ComponentPropsWithoutRef<typeof AvatarPrimitive.Image>\\n>(({ className, ...props }, ref) => (\\n\\t<AvatarPrimitive.Image\\n\\t\\tref={ref}\\n\\t\\tclassName={cn('aspect-square h-full w-full', className)}\\n\\t\\t{...props}\\n\\t/>\\n))\\nAvatarImage.displayName = AvatarPrimitive.Image.displayName\\n\\nconst AvatarFallback = forwardRef<\\n\\tReact.ElementRef<typeof AvatarPrimitive.Fallback>,\\n\\tReact.ComponentPropsWithoutRef<typeof AvatarPrimitive.Fallback>\\n>(({ className, ...props }, ref) => (\\n\\t<AvatarPrimitive.Fallback\\n\\t\\tref={ref}\\n\\t\\tclassName={cn(\\n\\t\\t\\t'flex h-full w-full items-center justify-center rounded-full bg-muted',\\n\\t\\t\\tclassName\\n\\t\\t)}\\n\\t\\t{...props}\\n\\t/>\\n))\\nAvatarFallback.displayName = AvatarPrimitive.Fallback.displayName\\n\\nexport { Avatar, AvatarImage, AvatarFallback }\\n\""
    }
  ]
}
,
{
  "name": "dialog",
  "description": "Description for dialog component.",
  "usage": "\"'use client'\\nimport * as React from 'react'\\nimport * as DialogPrimitive from '@radix-ui/react-dialog'\\n\\nimport { cn } from '@/modules/shadcn/lib/utils'\\n\\nconst Dialog = DialogPrimitive.Root\\n\\nconst DialogTrigger = DialogPrimitive.Trigger\\n\\nconst DialogPortal = DialogPrimitive.Portal\\n\\nconst DialogClose = DialogPrimitive.Close\\n\\nconst DialogOverlay = React.forwardRef<\\n\\tReact.ElementRef<typeof DialogPrimitive.Overlay>,\\n\\tReact.ComponentPropsWithoutRef<typeof DialogPrimitive.Overlay>\\n>(({ className, ...props }, ref) => (\\n\\t<DialogPrimitive.Overlay\\n\\t\\tref={ref}\\n\\t\\tclassName={cn(\\n\\t\\t\\t'fixed inset-0 z-50 bg-black/80  data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0',\\n\\t\\t\\tclassName\\n\\t\\t)}\\n\\t\\t{...props}\\n\\t/>\\n))\\nDialogOverlay.displayName = DialogPrimitive.Overlay.displayName\\n\\nconst DialogContent = React.forwardRef<\\n\\tReact.ElementRef<typeof DialogPrimitive.Content>,\\n\\tReact.ComponentPropsWithoutRef<typeof DialogPrimitive.Content>\\n>(({ className, children, ...props }, ref) => (\\n\\t<DialogPortal>\\n\\t\\t<DialogOverlay />\\n\\t\\t<DialogPrimitive.Content\\n\\t\\t\\tref={ref}\\n\\t\\t\\tclassName={cn(\\n\\t\\t\\t\\t'fixed left-[50%] top-[50%] z-50 grid w-full max-w-lg translate-x-[-50%] translate-y-[-50%] gap-4 border bg-background p-6 shadow-lg duration-200 data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[state=closed]:slide-out-to-left-1/2 data-[state=closed]:slide-out-to-top-[48%] data-[state=open]:slide-in-from-left-1/2 data-[state=open]:slide-in-from-top-[48%] sm:rounded-lg',\\n\\t\\t\\t\\tclassName\\n\\t\\t\\t)}\\n\\t\\t\\t{...props}\\n\\t\\t>\\n\\t\\t\\t{children}\\n\\t\\t\\t{/* <DialogPrimitive.Close className=\\\"absolute right-4 top-4 rounded-sm opacity-70 ring-offset-background transition-opacity hover:opacity-100 focus:outline-none focus:ring-2 focus:ring-ring focus:ring-offset-2 disabled:pointer-events-none data-[state=open]:bg-accent data-[state=open]:text-muted-foreground\\\">\\n\\t\\t\\t\\t<span className=\\\"sr-only\\\">Close</span>\\n\\t\\t\\t</DialogPrimitive.Close> */}\\n\\t\\t</DialogPrimitive.Content>\\n\\t</DialogPortal>\\n))\\nDialogContent.displayName = DialogPrimitive.Content.displayName\\n\\nconst DialogHeader = ({\\n\\tclassName,\\n\\t...props\\n}: React.HTMLAttributes<HTMLDivElement>) => (\\n\\t<div\\n\\t\\tclassName={cn(\\n\\t\\t\\t'flex flex-col space-y-1.5 text-center sm:text-left',\\n\\t\\t\\tclassName\\n\\t\\t)}\\n\\t\\t{...props}\\n\\t/>\\n)\\nDialogHeader.displayName = 'DialogHeader'\\n\\nconst DialogFooter = ({\\n\\tclassName,\\n\\t...props\\n}: React.HTMLAttributes<HTMLDivElement>) => (\\n\\t<div\\n\\t\\tclassName={cn(\\n\\t\\t\\t'flex flex-col-reverse sm:flex-row sm:justify-end sm:space-x-2',\\n\\t\\t\\tclassName\\n\\t\\t)}\\n\\t\\t{...props}\\n\\t/>\\n)\\nDialogFooter.displayName = 'DialogFooter'\\n\\nconst DialogTitle = React.forwardRef<\\n\\tReact.ElementRef<typeof DialogPrimitive.Title>,\\n\\tReact.ComponentPropsWithoutRef<typeof DialogPrimitive.Title>\\n>(({ className, ...props }, ref) => (\\n\\t<DialogPrimitive.Title\\n\\t\\tref={ref}\\n\\t\\tclassName={cn(\\n\\t\\t\\t'text-lg font-semibold leading-none tracking-tight',\\n\\t\\t\\tclassName\\n\\t\\t)}\\n\\t\\t{...props}\\n\\t/>\\n))\\nDialogTitle.displayName = DialogPrimitive.Title.displayName\\n\\nconst DialogDescription = React.forwardRef<\\n\\tReact.ElementRef<typeof DialogPrimitive.Description>,\\n\\tReact.ComponentPropsWithoutRef<typeof DialogPrimitive.Description>\\n>(({ className, ...props }, ref) => (\\n\\t<DialogPrimitive.Description\\n\\t\\tref={ref}\\n\\t\\tclassName={cn('text-sm text-muted-foreground', className)}\\n\\t\\t{...props}\\n\\t/>\\n))\\nDialogDescription.displayName = DialogPrimitive.Description.displayName\\n\\nexport {\\n\\tDialog,\\n\\tDialogPortal,\\n\\tDialogOverlay,\\n\\tDialogClose,\\n\\tDialogTrigger,\\n\\tDialogContent,\\n\\tDialogHeader,\\n\\tDialogFooter,\\n\\tDialogTitle,\\n\\tDialogDescription,\\n}\\n\"",
  "examples": [
    {
      "source": "dialog.tsx",
      "code": "\"'use client'\\nimport * as React from 'react'\\nimport * as DialogPrimitive from '@radix-ui/react-dialog'\\n\\nimport { cn } from '@/modules/shadcn/lib/utils'\\n\\nconst Dialog = DialogPrimitive.Root\\n\\nconst DialogTrigger = DialogPrimitive.Trigger\\n\\nconst DialogPortal = DialogPrimitive.Portal\\n\\nconst DialogClose = DialogPrimitive.Close\\n\\nconst DialogOverlay = React.forwardRef<\\n\\tReact.ElementRef<typeof DialogPrimitive.Overlay>,\\n\\tReact.ComponentPropsWithoutRef<typeof DialogPrimitive.Overlay>\\n>(({ className, ...props }, ref) => (\\n\\t<DialogPrimitive.Overlay\\n\\t\\tref={ref}\\n\\t\\tclassName={cn(\\n\\t\\t\\t'fixed inset-0 z-50 bg-black/80  data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0',\\n\\t\\t\\tclassName\\n\\t\\t)}\\n\\t\\t{...props}\\n\\t/>\\n))\\nDialogOverlay.displayName = DialogPrimitive.Overlay.displayName\\n\\nconst DialogContent = React.forwardRef<\\n\\tReact.ElementRef<typeof DialogPrimitive.Content>,\\n\\tReact.ComponentPropsWithoutRef<typeof DialogPrimitive.Content>\\n>(({ className, children, ...props }, ref) => (\\n\\t<DialogPortal>\\n\\t\\t<DialogOverlay />\\n\\t\\t<DialogPrimitive.Content\\n\\t\\t\\tref={ref}\\n\\t\\t\\tclassName={cn(\\n\\t\\t\\t\\t'fixed left-[50%] top-[50%] z-50 grid w-full max-w-lg translate-x-[-50%] translate-y-[-50%] gap-4 border bg-background p-6 shadow-lg duration-200 data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[state=closed]:slide-out-to-left-1/2 data-[state=closed]:slide-out-to-top-[48%] data-[state=open]:slide-in-from-left-1/2 data-[state=open]:slide-in-from-top-[48%] sm:rounded-lg',\\n\\t\\t\\t\\tclassName\\n\\t\\t\\t)}\\n\\t\\t\\t{...props}\\n\\t\\t>\\n\\t\\t\\t{children}\\n\\t\\t\\t{/* <DialogPrimitive.Close className=\\\"absolute right-4 top-4 rounded-sm opacity-70 ring-offset-background transition-opacity hover:opacity-100 focus:outline-none focus:ring-2 focus:ring-ring focus:ring-offset-2 disabled:pointer-events-none data-[state=open]:bg-accent data-[state=open]:text-muted-foreground\\\">\\n\\t\\t\\t\\t<span className=\\\"sr-only\\\">Close</span>\\n\\t\\t\\t</DialogPrimitive.Close> */}\\n\\t\\t</DialogPrimitive.Content>\\n\\t</DialogPortal>\\n))\\nDialogContent.displayName = DialogPrimitive.Content.displayName\\n\\nconst DialogHeader = ({\\n\\tclassName,\\n\\t...props\\n}: React.HTMLAttributes<HTMLDivElement>) => (\\n\\t<div\\n\\t\\tclassName={cn(\\n\\t\\t\\t'flex flex-col space-y-1.5 text-center sm:text-left',\\n\\t\\t\\tclassName\\n\\t\\t)}\\n\\t\\t{...props}\\n\\t/>\\n)\\nDialogHeader.displayName = 'DialogHeader'\\n\\nconst DialogFooter = ({\\n\\tclassName,\\n\\t...props\\n}: React.HTMLAttributes<HTMLDivElement>) => (\\n\\t<div\\n\\t\\tclassName={cn(\\n\\t\\t\\t'flex flex-col-reverse sm:flex-row sm:justify-end sm:space-x-2',\\n\\t\\t\\tclassName\\n\\t\\t)}\\n\\t\\t{...props}\\n\\t/>\\n)\\nDialogFooter.displayName = 'DialogFooter'\\n\\nconst DialogTitle = React.forwardRef<\\n\\tReact.ElementRef<typeof DialogPrimitive.Title>,\\n\\tReact.ComponentPropsWithoutRef<typeof DialogPrimitive.Title>\\n>(({ className, ...props }, ref) => (\\n\\t<DialogPrimitive.Title\\n\\t\\tref={ref}\\n\\t\\tclassName={cn(\\n\\t\\t\\t'text-lg font-semibold leading-none tracking-tight',\\n\\t\\t\\tclassName\\n\\t\\t)}\\n\\t\\t{...props}\\n\\t/>\\n))\\nDialogTitle.displayName = DialogPrimitive.Title.displayName\\n\\nconst DialogDescription = React.forwardRef<\\n\\tReact.ElementRef<typeof DialogPrimitive.Description>,\\n\\tReact.ComponentPropsWithoutRef<typeof DialogPrimitive.Description>\\n>(({ className, ...props }, ref) => (\\n\\t<DialogPrimitive.Description\\n\\t\\tref={ref}\\n\\t\\tclassName={cn('text-sm text-muted-foreground', className)}\\n\\t\\t{...props}\\n\\t/>\\n))\\nDialogDescription.displayName = DialogPrimitive.Description.displayName\\n\\nexport {\\n\\tDialog,\\n\\tDialogPortal,\\n\\tDialogOverlay,\\n\\tDialogClose,\\n\\tDialogTrigger,\\n\\tDialogContent,\\n\\tDialogHeader,\\n\\tDialogFooter,\\n\\tDialogTitle,\\n\\tDialogDescription,\\n}\\n\""
    }
  ]
}
,
{
  "name": "table",
  "description": "Description for table component.",
  "usage": "\"import { forwardRef } from 'react'\\n\\nimport { cn } from '@/modules/shadcn/lib/utils'\\n\\nconst Table = forwardRef<\\n\\tHTMLTableElement,\\n\\tReact.HTMLAttributes<HTMLTableElement>\\n>(({ className, ...props }, ref) => (\\n\\t<div className=\\\"w-full overflow-auto\\\">\\n\\t\\t<table\\n\\t\\t\\tref={ref}\\n\\t\\t\\tclassName={cn('w-full caption-bottom text-sm', className)}\\n\\t\\t\\t{...props}\\n\\t\\t/>\\n\\t</div>\\n))\\nTable.displayName = 'Table'\\n\\nconst TableHeader = forwardRef<\\n\\tHTMLTableSectionElement,\\n\\tReact.HTMLAttributes<HTMLTableSectionElement>\\n>(({ className, ...props }, ref) => (\\n\\t<thead ref={ref} className={cn('[&_tr]:border-b', className)} {...props} />\\n))\\nTableHeader.displayName = 'TableHeader'\\n\\nconst TableBody = forwardRef<\\n\\tHTMLTableSectionElement,\\n\\tReact.HTMLAttributes<HTMLTableSectionElement>\\n>(({ className, ...props }, ref) => (\\n\\t<tbody\\n\\t\\tref={ref}\\n\\t\\tclassName={cn('[&_tr:last-child]:border-0', className)}\\n\\t\\t{...props}\\n\\t/>\\n))\\nTableBody.displayName = 'TableBody'\\n\\nconst TableFooter = forwardRef<\\n\\tHTMLTableSectionElement,\\n\\tReact.HTMLAttributes<HTMLTableSectionElement>\\n>(({ className, ...props }, ref) => (\\n\\t<tfoot\\n\\t\\tref={ref}\\n\\t\\tclassName={cn('bg-primary font-medium text-primary-foreground', className)}\\n\\t\\t{...props}\\n\\t/>\\n))\\nTableFooter.displayName = 'TableFooter'\\n\\nconst TableRow = forwardRef<\\n\\tHTMLTableRowElement,\\n\\tReact.HTMLAttributes<HTMLTableRowElement>\\n>(({ className, ...props }, ref) => (\\n\\t<tr\\n\\t\\tref={ref}\\n\\t\\tclassName={cn(\\n\\t\\t\\t'border-b transition-colors hover:bg-muted/50 data-[state=selected]:bg-muted',\\n\\t\\t\\tclassName\\n\\t\\t)}\\n\\t\\t{...props}\\n\\t/>\\n))\\nTableRow.displayName = 'TableRow'\\n\\nconst TableHead = forwardRef<\\n\\tHTMLTableCellElement,\\n\\tReact.ThHTMLAttributes<HTMLTableCellElement>\\n>(({ className, ...props }, ref) => (\\n\\t<th\\n\\t\\tref={ref}\\n\\t\\tclassName={cn(\\n\\t\\t\\t'h-10 px-2 text-left align-middle font-medium text-muted-foreground [&:has([role=checkbox])]:pr-0 [&>[role=checkbox]]:translate-y-[2px]',\\n\\t\\t\\tclassName\\n\\t\\t)}\\n\\t\\t{...props}\\n\\t/>\\n))\\nTableHead.displayName = 'TableHead'\\n\\nconst TableCell = forwardRef<\\n\\tHTMLTableCellElement,\\n\\tReact.TdHTMLAttributes<HTMLTableCellElement>\\n>(({ className, ...props }, ref) => (\\n\\t<td\\n\\t\\tref={ref}\\n\\t\\tclassName={cn(\\n\\t\\t\\t'p-2 align-middle [&:has([role=checkbox])]:pr-0 [&>[role=checkbox]]:translate-y-[2px]',\\n\\t\\t\\tclassName\\n\\t\\t)}\\n\\t\\t{...props}\\n\\t/>\\n))\\nTableCell.displayName = 'TableCell'\\n\\nconst TableCaption = forwardRef<\\n\\tHTMLTableCaptionElement,\\n\\tReact.HTMLAttributes<HTMLTableCaptionElement>\\n>(({ className, ...props }, ref) => (\\n\\t<caption\\n\\t\\tref={ref}\\n\\t\\tclassName={cn('mt-4 text-sm text-muted-foreground', className)}\\n\\t\\t{...props}\\n\\t/>\\n))\\nTableCaption.displayName = 'TableCaption'\\n\\nexport {\\n\\tTable,\\n\\tTableHeader,\\n\\tTableBody,\\n\\tTableFooter,\\n\\tTableHead,\\n\\tTableRow,\\n\\tTableCell,\\n\\tTableCaption,\\n}\\n\"",
  "examples": [
    {
      "source": "table.tsx",
      "code": "\"import { forwardRef } from 'react'\\n\\nimport { cn } from '@/modules/shadcn/lib/utils'\\n\\nconst Table = forwardRef<\\n\\tHTMLTableElement,\\n\\tReact.HTMLAttributes<HTMLTableElement>\\n>(({ className, ...props }, ref) => (\\n\\t<div className=\\\"w-full overflow-auto\\\">\\n\\t\\t<table\\n\\t\\t\\tref={ref}\\n\\t\\t\\tclassName={cn('w-full caption-bottom text-sm', className)}\\n\\t\\t\\t{...props}\\n\\t\\t/>\\n\\t</div>\\n))\\nTable.displayName = 'Table'\\n\\nconst TableHeader = forwardRef<\\n\\tHTMLTableSectionElement,\\n\\tReact.HTMLAttributes<HTMLTableSectionElement>\\n>(({ className, ...props }, ref) => (\\n\\t<thead ref={ref} className={cn('[&_tr]:border-b', className)} {...props} />\\n))\\nTableHeader.displayName = 'TableHeader'\\n\\nconst TableBody = forwardRef<\\n\\tHTMLTableSectionElement,\\n\\tReact.HTMLAttributes<HTMLTableSectionElement>\\n>(({ className, ...props }, ref) => (\\n\\t<tbody\\n\\t\\tref={ref}\\n\\t\\tclassName={cn('[&_tr:last-child]:border-0', className)}\\n\\t\\t{...props}\\n\\t/>\\n))\\nTableBody.displayName = 'TableBody'\\n\\nconst TableFooter = forwardRef<\\n\\tHTMLTableSectionElement,\\n\\tReact.HTMLAttributes<HTMLTableSectionElement>\\n>(({ className, ...props }, ref) => (\\n\\t<tfoot\\n\\t\\tref={ref}\\n\\t\\tclassName={cn('bg-primary font-medium text-primary-foreground', className)}\\n\\t\\t{...props}\\n\\t/>\\n))\\nTableFooter.displayName = 'TableFooter'\\n\\nconst TableRow = forwardRef<\\n\\tHTMLTableRowElement,\\n\\tReact.HTMLAttributes<HTMLTableRowElement>\\n>(({ className, ...props }, ref) => (\\n\\t<tr\\n\\t\\tref={ref}\\n\\t\\tclassName={cn(\\n\\t\\t\\t'border-b transition-colors hover:bg-muted/50 data-[state=selected]:bg-muted',\\n\\t\\t\\tclassName\\n\\t\\t)}\\n\\t\\t{...props}\\n\\t/>\\n))\\nTableRow.displayName = 'TableRow'\\n\\nconst TableHead = forwardRef<\\n\\tHTMLTableCellElement,\\n\\tReact.ThHTMLAttributes<HTMLTableCellElement>\\n>(({ className, ...props }, ref) => (\\n\\t<th\\n\\t\\tref={ref}\\n\\t\\tclassName={cn(\\n\\t\\t\\t'h-10 px-2 text-left align-middle font-medium text-muted-foreground [&:has([role=checkbox])]:pr-0 [&>[role=checkbox]]:translate-y-[2px]',\\n\\t\\t\\tclassName\\n\\t\\t)}\\n\\t\\t{...props}\\n\\t/>\\n))\\nTableHead.displayName = 'TableHead'\\n\\nconst TableCell = forwardRef<\\n\\tHTMLTableCellElement,\\n\\tReact.TdHTMLAttributes<HTMLTableCellElement>\\n>(({ className, ...props }, ref) => (\\n\\t<td\\n\\t\\tref={ref}\\n\\t\\tclassName={cn(\\n\\t\\t\\t'p-2 align-middle [&:has([role=checkbox])]:pr-0 [&>[role=checkbox]]:translate-y-[2px]',\\n\\t\\t\\tclassName\\n\\t\\t)}\\n\\t\\t{...props}\\n\\t/>\\n))\\nTableCell.displayName = 'TableCell'\\n\\nconst TableCaption = forwardRef<\\n\\tHTMLTableCaptionElement,\\n\\tReact.HTMLAttributes<HTMLTableCaptionElement>\\n>(({ className, ...props }, ref) => (\\n\\t<caption\\n\\t\\tref={ref}\\n\\t\\tclassName={cn('mt-4 text-sm text-muted-foreground', className)}\\n\\t\\t{...props}\\n\\t/>\\n))\\nTableCaption.displayName = 'TableCaption'\\n\\nexport {\\n\\tTable,\\n\\tTableHeader,\\n\\tTableBody,\\n\\tTableFooter,\\n\\tTableHead,\\n\\tTableRow,\\n\\tTableCell,\\n\\tTableCaption,\\n}\\n\""
    }
  ]
}
,
{
  "name": "index",
  "description": "Description for index component.",
  "usage": "\"export * from '@/modules/shadcn/components/ui/accordion'\\nexport * from '@/modules/shadcn/components/ui/avatar'\\nexport * from '@/modules/shadcn/components/ui/button'\\nexport * from '@/modules/shadcn/components/ui/calendar'\\nexport * from '@/modules/shadcn/components/ui/card'\\nexport * from '@/modules/shadcn/components/ui/checkbox'\\nexport * from '@/modules/shadcn/components/ui/data-table'\\nexport * from '@/modules/shadcn/components/ui/date-picker'\\nexport * from '@/modules/shadcn/components/ui/dialog'\\nexport * from '@/modules/shadcn/components/ui/dropdown-menu'\\nexport * from '@/modules/shadcn/components/ui/form'\\nexport * from '@/modules/shadcn/components/ui/input'\\nexport * from '@/modules/shadcn/components/ui/label'\\nexport * from '@/modules/shadcn/components/ui/popover'\\nexport * from '@/modules/shadcn/components/ui/radio-group'\\nexport * from '@/modules/shadcn/components/ui/scroll-area'\\nexport * from '@/modules/shadcn/components/ui/select'\\nexport * from '@/modules/shadcn/components/ui/separator'\\nexport * from '@/modules/shadcn/components/ui/sheet'\\nexport * from '@/modules/shadcn/components/ui/switch'\\nexport * from '@/modules/shadcn/components/ui/table'\\nexport * from '@/modules/shadcn/components/ui/tabs'\\nexport * from '@/modules/shadcn/components/ui/textarea'\\nexport * from '@/modules/shadcn/components/ui/toggle'\\nexport * from '@/modules/shadcn/components/ui/tooltip'\\nexport * from '@/modules/shadcn/components/ui/tableFilter'\\n\"",
  "examples": [
    {
      "source": "index.tsx",
      "code": "\"export * from '@/modules/shadcn/components/ui/accordion'\\nexport * from '@/modules/shadcn/components/ui/avatar'\\nexport * from '@/modules/shadcn/components/ui/button'\\nexport * from '@/modules/shadcn/components/ui/calendar'\\nexport * from '@/modules/shadcn/components/ui/card'\\nexport * from '@/modules/shadcn/components/ui/checkbox'\\nexport * from '@/modules/shadcn/components/ui/data-table'\\nexport * from '@/modules/shadcn/components/ui/date-picker'\\nexport * from '@/modules/shadcn/components/ui/dialog'\\nexport * from '@/modules/shadcn/components/ui/dropdown-menu'\\nexport * from '@/modules/shadcn/components/ui/form'\\nexport * from '@/modules/shadcn/components/ui/input'\\nexport * from '@/modules/shadcn/components/ui/label'\\nexport * from '@/modules/shadcn/components/ui/popover'\\nexport * from '@/modules/shadcn/components/ui/radio-group'\\nexport * from '@/modules/shadcn/components/ui/scroll-area'\\nexport * from '@/modules/shadcn/components/ui/select'\\nexport * from '@/modules/shadcn/components/ui/separator'\\nexport * from '@/modules/shadcn/components/ui/sheet'\\nexport * from '@/modules/shadcn/components/ui/switch'\\nexport * from '@/modules/shadcn/components/ui/table'\\nexport * from '@/modules/shadcn/components/ui/tabs'\\nexport * from '@/modules/shadcn/components/ui/textarea'\\nexport * from '@/modules/shadcn/components/ui/toggle'\\nexport * from '@/modules/shadcn/components/ui/tooltip'\\nexport * from '@/modules/shadcn/components/ui/tableFilter'\\n\""
    }
  ]
}
,
{
  "name": "separator",
  "description": "Description for separator component.",
  "usage": "\"'use client'\\n\\nimport * as React from 'react'\\nimport * as SeparatorPrimitive from '@radix-ui/react-separator'\\n\\nimport { cn } from '@/modules/shadcn/lib/utils'\\n\\nconst Separator = React.forwardRef<\\n\\tReact.ElementRef<typeof SeparatorPrimitive.Root>,\\n\\tReact.ComponentPropsWithoutRef<typeof SeparatorPrimitive.Root>\\n>(\\n\\t(\\n\\t\\t{ className, orientation = 'horizontal', decorative = true, ...props },\\n\\t\\tref\\n\\t) => (\\n\\t\\t<SeparatorPrimitive.Root\\n\\t\\t\\tref={ref}\\n\\t\\t\\tdecorative={decorative}\\n\\t\\t\\torientation={orientation}\\n\\t\\t\\tclassName={cn(\\n\\t\\t\\t\\t'shrink-0 bg-border',\\n\\t\\t\\t\\torientation === 'horizontal' ? 'h-[1px] w-full' : 'h-full w-[1px]',\\n\\t\\t\\t\\tclassName\\n\\t\\t\\t)}\\n\\t\\t\\t{...props}\\n\\t\\t/>\\n\\t)\\n)\\nSeparator.displayName = SeparatorPrimitive.Root.displayName\\n\\nexport { Separator }\\n\"",
  "examples": [
    {
      "source": "separator.tsx",
      "code": "\"'use client'\\n\\nimport * as React from 'react'\\nimport * as SeparatorPrimitive from '@radix-ui/react-separator'\\n\\nimport { cn } from '@/modules/shadcn/lib/utils'\\n\\nconst Separator = React.forwardRef<\\n\\tReact.ElementRef<typeof SeparatorPrimitive.Root>,\\n\\tReact.ComponentPropsWithoutRef<typeof SeparatorPrimitive.Root>\\n>(\\n\\t(\\n\\t\\t{ className, orientation = 'horizontal', decorative = true, ...props },\\n\\t\\tref\\n\\t) => (\\n\\t\\t<SeparatorPrimitive.Root\\n\\t\\t\\tref={ref}\\n\\t\\t\\tdecorative={decorative}\\n\\t\\t\\torientation={orientation}\\n\\t\\t\\tclassName={cn(\\n\\t\\t\\t\\t'shrink-0 bg-border',\\n\\t\\t\\t\\torientation === 'horizontal' ? 'h-[1px] w-full' : 'h-full w-[1px]',\\n\\t\\t\\t\\tclassName\\n\\t\\t\\t)}\\n\\t\\t\\t{...props}\\n\\t\\t/>\\n\\t)\\n)\\nSeparator.displayName = SeparatorPrimitive.Root.displayName\\n\\nexport { Separator }\\n\""
    }
  ]
}
,
{
  "name": "index",
  "description": "Description for index component.",
  "usage": "\"'use client'\\n\\nimport * as React from 'react'\\nimport {\\n\\tColumnDef,\\n\\tColumnFiltersState,\\n\\tSortingState,\\n\\tVisibilityState,\\n\\tflexRender,\\n\\tgetCoreRowModel,\\n\\tgetFacetedRowModel,\\n\\tgetFacetedUniqueValues,\\n\\tgetFilteredRowModel,\\n\\tgetPaginationRowModel,\\n\\tgetSortedRowModel,\\n\\tuseReactTable,\\n} from '@tanstack/react-table'\\n\\nimport {\\n\\tTable,\\n\\tTableBody,\\n\\tTableCell,\\n\\tTableHead,\\n\\tTableHeader,\\n\\tTableRow,\\n} from '@/modules/shadcn/components/ui/tableFilter/table'\\n\\nimport { DataTablePagination } from './data-table-pagination'\\nimport { DataTableToolbar } from './data-table-toolbar'\\n\\ninterface DataTableProps<TData, TValue> {\\n\\tcolumns: ColumnDef<TData, TValue>[]\\n\\tdata: TData[]\\n\\tsearchKey?: string\\n}\\n\\nexport function TableFilter<TData, TValue>({\\n\\tcolumns,\\n\\tdata,\\n}: DataTableProps<TData, TValue>) {\\n\\tconst [rowSelection, setRowSelection] = React.useState({})\\n\\tconst [columnVisibility, setColumnVisibility] =\\n\\t\\tReact.useState<VisibilityState>({})\\n\\tconst [columnFilters, setColumnFilters] = React.useState<ColumnFiltersState>(\\n\\t\\t[]\\n\\t)\\n\\tconst [sorting, setSorting] = React.useState<SortingState>([])\\n\\n\\tconst table = useReactTable({\\n\\t\\tdata,\\n\\t\\tcolumns,\\n\\t\\tstate: {\\n\\t\\t\\tsorting,\\n\\t\\t\\tcolumnVisibility,\\n\\t\\t\\trowSelection,\\n\\t\\t\\tcolumnFilters,\\n\\t\\t},\\n\\t\\tenableRowSelection: true,\\n\\t\\tonRowSelectionChange: setRowSelection,\\n\\t\\tonSortingChange: setSorting,\\n\\t\\tonColumnFiltersChange: setColumnFilters,\\n\\t\\tonColumnVisibilityChange: setColumnVisibility,\\n\\t\\tgetCoreRowModel: getCoreRowModel(),\\n\\t\\tgetFilteredRowModel: getFilteredRowModel(),\\n\\t\\tgetPaginationRowModel: getPaginationRowModel(),\\n\\t\\tgetSortedRowModel: getSortedRowModel(),\\n\\t\\tgetFacetedRowModel: getFacetedRowModel(),\\n\\t\\tgetFacetedUniqueValues: getFacetedUniqueValues(),\\n\\t})\\n\\n\\treturn (\\n\\t\\t<div className=\\\"space-y-4\\\">\\n\\t\\t\\t<DataTableToolbar table={table} />\\n\\t\\t\\t<div className=\\\"rounded-md border\\\">\\n\\t\\t\\t\\t<Table>\\n\\t\\t\\t\\t\\t<TableHeader>\\n\\t\\t\\t\\t\\t\\t{table.getHeaderGroups().map((headerGroup) => (\\n\\t\\t\\t\\t\\t\\t\\t<TableRow key={headerGroup.id}>\\n\\t\\t\\t\\t\\t\\t\\t\\t{headerGroup.headers.map((header) => {\\n\\t\\t\\t\\t\\t\\t\\t\\t\\treturn (\\n\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t<TableHead key={header.id} colSpan={header.colSpan}>\\n\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t{header.isPlaceholder\\n\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t? null\\n\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t: flexRender(\\n\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\theader.column.columnDef.header,\\n\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\theader.getContext()\\n\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t)}\\n\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t</TableHead>\\n\\t\\t\\t\\t\\t\\t\\t\\t\\t)\\n\\t\\t\\t\\t\\t\\t\\t\\t})}\\n\\t\\t\\t\\t\\t\\t\\t</TableRow>\\n\\t\\t\\t\\t\\t\\t))}\\n\\t\\t\\t\\t\\t</TableHeader>\\n\\t\\t\\t\\t\\t<TableBody>\\n\\t\\t\\t\\t\\t\\t{table.getRowModel().rows?.length ? (\\n\\t\\t\\t\\t\\t\\t\\ttable.getRowModel().rows.map((row) => (\\n\\t\\t\\t\\t\\t\\t\\t\\t<TableRow\\n\\t\\t\\t\\t\\t\\t\\t\\t\\tkey={row.id}\\n\\t\\t\\t\\t\\t\\t\\t\\t\\tdata-state={row.getIsSelected() && 'selected'}\\n\\t\\t\\t\\t\\t\\t\\t\\t>\\n\\t\\t\\t\\t\\t\\t\\t\\t\\t{row.getVisibleCells().map((cell) => (\\n\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t<TableCell key={cell.id}>\\n\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t{flexRender(\\n\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\tcell.column.columnDef.cell,\\n\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\tcell.getContext()\\n\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t)}\\n\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t</TableCell>\\n\\t\\t\\t\\t\\t\\t\\t\\t\\t))}\\n\\t\\t\\t\\t\\t\\t\\t\\t</TableRow>\\n\\t\\t\\t\\t\\t\\t\\t))\\n\\t\\t\\t\\t\\t\\t) : (\\n\\t\\t\\t\\t\\t\\t\\t<TableRow>\\n\\t\\t\\t\\t\\t\\t\\t\\t<TableCell\\n\\t\\t\\t\\t\\t\\t\\t\\t\\tcolSpan={columns.length}\\n\\t\\t\\t\\t\\t\\t\\t\\t\\tclassName=\\\"h-24 text-center\\\"\\n\\t\\t\\t\\t\\t\\t\\t\\t>\\n\\t\\t\\t\\t\\t\\t\\t\\t\\tNo results.\\n\\t\\t\\t\\t\\t\\t\\t\\t</TableCell>\\n\\t\\t\\t\\t\\t\\t\\t</TableRow>\\n\\t\\t\\t\\t\\t\\t)}\\n\\t\\t\\t\\t\\t</TableBody>\\n\\t\\t\\t\\t</Table>\\n\\t\\t\\t</div>\\n\\t\\t\\t<DataTablePagination table={table} />\\n\\t\\t</div>\\n\\t)\\n}\\n\"",
  "examples": [
    {
      "source": "index.tsx",
      "code": "\"'use client'\\n\\nimport * as React from 'react'\\nimport {\\n\\tColumnDef,\\n\\tColumnFiltersState,\\n\\tSortingState,\\n\\tVisibilityState,\\n\\tflexRender,\\n\\tgetCoreRowModel,\\n\\tgetFacetedRowModel,\\n\\tgetFacetedUniqueValues,\\n\\tgetFilteredRowModel,\\n\\tgetPaginationRowModel,\\n\\tgetSortedRowModel,\\n\\tuseReactTable,\\n} from '@tanstack/react-table'\\n\\nimport {\\n\\tTable,\\n\\tTableBody,\\n\\tTableCell,\\n\\tTableHead,\\n\\tTableHeader,\\n\\tTableRow,\\n} from '@/modules/shadcn/components/ui/tableFilter/table'\\n\\nimport { DataTablePagination } from './data-table-pagination'\\nimport { DataTableToolbar } from './data-table-toolbar'\\n\\ninterface DataTableProps<TData, TValue> {\\n\\tcolumns: ColumnDef<TData, TValue>[]\\n\\tdata: TData[]\\n\\tsearchKey?: string\\n}\\n\\nexport function TableFilter<TData, TValue>({\\n\\tcolumns,\\n\\tdata,\\n}: DataTableProps<TData, TValue>) {\\n\\tconst [rowSelection, setRowSelection] = React.useState({})\\n\\tconst [columnVisibility, setColumnVisibility] =\\n\\t\\tReact.useState<VisibilityState>({})\\n\\tconst [columnFilters, setColumnFilters] = React.useState<ColumnFiltersState>(\\n\\t\\t[]\\n\\t)\\n\\tconst [sorting, setSorting] = React.useState<SortingState>([])\\n\\n\\tconst table = useReactTable({\\n\\t\\tdata,\\n\\t\\tcolumns,\\n\\t\\tstate: {\\n\\t\\t\\tsorting,\\n\\t\\t\\tcolumnVisibility,\\n\\t\\t\\trowSelection,\\n\\t\\t\\tcolumnFilters,\\n\\t\\t},\\n\\t\\tenableRowSelection: true,\\n\\t\\tonRowSelectionChange: setRowSelection,\\n\\t\\tonSortingChange: setSorting,\\n\\t\\tonColumnFiltersChange: setColumnFilters,\\n\\t\\tonColumnVisibilityChange: setColumnVisibility,\\n\\t\\tgetCoreRowModel: getCoreRowModel(),\\n\\t\\tgetFilteredRowModel: getFilteredRowModel(),\\n\\t\\tgetPaginationRowModel: getPaginationRowModel(),\\n\\t\\tgetSortedRowModel: getSortedRowModel(),\\n\\t\\tgetFacetedRowModel: getFacetedRowModel(),\\n\\t\\tgetFacetedUniqueValues: getFacetedUniqueValues(),\\n\\t})\\n\\n\\treturn (\\n\\t\\t<div className=\\\"space-y-4\\\">\\n\\t\\t\\t<DataTableToolbar table={table} />\\n\\t\\t\\t<div className=\\\"rounded-md border\\\">\\n\\t\\t\\t\\t<Table>\\n\\t\\t\\t\\t\\t<TableHeader>\\n\\t\\t\\t\\t\\t\\t{table.getHeaderGroups().map((headerGroup) => (\\n\\t\\t\\t\\t\\t\\t\\t<TableRow key={headerGroup.id}>\\n\\t\\t\\t\\t\\t\\t\\t\\t{headerGroup.headers.map((header) => {\\n\\t\\t\\t\\t\\t\\t\\t\\t\\treturn (\\n\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t<TableHead key={header.id} colSpan={header.colSpan}>\\n\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t{header.isPlaceholder\\n\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t? null\\n\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t: flexRender(\\n\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\theader.column.columnDef.header,\\n\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\theader.getContext()\\n\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t)}\\n\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t</TableHead>\\n\\t\\t\\t\\t\\t\\t\\t\\t\\t)\\n\\t\\t\\t\\t\\t\\t\\t\\t})}\\n\\t\\t\\t\\t\\t\\t\\t</TableRow>\\n\\t\\t\\t\\t\\t\\t))}\\n\\t\\t\\t\\t\\t</TableHeader>\\n\\t\\t\\t\\t\\t<TableBody>\\n\\t\\t\\t\\t\\t\\t{table.getRowModel().rows?.length ? (\\n\\t\\t\\t\\t\\t\\t\\ttable.getRowModel().rows.map((row) => (\\n\\t\\t\\t\\t\\t\\t\\t\\t<TableRow\\n\\t\\t\\t\\t\\t\\t\\t\\t\\tkey={row.id}\\n\\t\\t\\t\\t\\t\\t\\t\\t\\tdata-state={row.getIsSelected() && 'selected'}\\n\\t\\t\\t\\t\\t\\t\\t\\t>\\n\\t\\t\\t\\t\\t\\t\\t\\t\\t{row.getVisibleCells().map((cell) => (\\n\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t<TableCell key={cell.id}>\\n\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t{flexRender(\\n\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\tcell.column.columnDef.cell,\\n\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\tcell.getContext()\\n\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t)}\\n\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t</TableCell>\\n\\t\\t\\t\\t\\t\\t\\t\\t\\t))}\\n\\t\\t\\t\\t\\t\\t\\t\\t</TableRow>\\n\\t\\t\\t\\t\\t\\t\\t))\\n\\t\\t\\t\\t\\t\\t) : (\\n\\t\\t\\t\\t\\t\\t\\t<TableRow>\\n\\t\\t\\t\\t\\t\\t\\t\\t<TableCell\\n\\t\\t\\t\\t\\t\\t\\t\\t\\tcolSpan={columns.length}\\n\\t\\t\\t\\t\\t\\t\\t\\t\\tclassName=\\\"h-24 text-center\\\"\\n\\t\\t\\t\\t\\t\\t\\t\\t>\\n\\t\\t\\t\\t\\t\\t\\t\\t\\tNo results.\\n\\t\\t\\t\\t\\t\\t\\t\\t</TableCell>\\n\\t\\t\\t\\t\\t\\t\\t</TableRow>\\n\\t\\t\\t\\t\\t\\t)}\\n\\t\\t\\t\\t\\t</TableBody>\\n\\t\\t\\t\\t</Table>\\n\\t\\t\\t</div>\\n\\t\\t\\t<DataTablePagination table={table} />\\n\\t\\t</div>\\n\\t)\\n}\\n\""
    }
  ]
}
,
{
  "name": "data-table-row-actions",
  "description": "Description for data-table-row-actions component.",
  "usage": "\"'use client'\\n\\nimport { Dispatch, SetStateAction, useCallback, useEffect } from 'react'\\nimport { DotsHorizontalIcon } from '@radix-ui/react-icons'\\nimport { Row } from '@tanstack/react-table'\\nimport Link from 'next/link'\\nimport {\\n\\tButton,\\n\\tDropdownMenu,\\n\\tDropdownMenuContent,\\n\\tDropdownMenuItem,\\n\\tDropdownMenuSeparator,\\n\\tDropdownMenuTrigger,\\n} from '@/modules/shadcn/components/ui'\\nimport { useDeleteWorkflow, useSaveWorkflow } from '@/hooks/useWorkflow'\\nimport { useSessionUser } from '@/hooks/useSessionUser'\\nimport { Workflow } from '@/types/workflow'\\n\\ninterface DataTableRowActionsProps {\\n\\trow: Row<Workflow>\\n\\tsetWorkflowList: Dispatch<SetStateAction<Workflow[]>>\\n\\tworkflows: Workflow[]\\n}\\n\\nexport function DataTableRowActions({\\n\\t// eslint-disable-next-line no-unused-vars\\n\\trow,\\n\\tworkflows,\\n\\tsetWorkflowList,\\n}: DataTableRowActionsProps) {\\n\\tconst user = useSessionUser()\\n\\tconst {\\n\\t\\tresponse: responseDeleteWorkflow,\\n\\t\\trequest: requestDeleteWorkflow,\\n\\t\\tloading: loadingDeleteWorkflow,\\n\\t} = useDeleteWorkflow()\\n\\tconst {\\n\\t\\tresponse: responseSaveWorkflow,\\n\\t\\trequest: requestSaveWorkflow,\\n\\t\\tloading: loadingSaveWorkflow,\\n\\t} = useSaveWorkflow()\\n\\n\\tconst copyWorkflow = useCallback(() => {\\n\\t\\tconst newWorkflowBody = {\\n\\t\\t\\tname: `${row.original.name}_copy`,\\n\\t\\t\\tdeployed: false,\\n\\t\\t\\tflowData: row.original.flowData,\\n\\t\\t}\\n\\t\\trequestSaveWorkflow(newWorkflowBody)\\n\\t}, [requestSaveWorkflow, row])\\n\\n\\tconst deleteWorkflow = useCallback(() => {\\n\\t\\trequestDeleteWorkflow({\\n\\t\\t\\tid: row.original._id,\\n\\t\\t\\tuser,\\n\\t\\t})\\n\\t\\t// eslint-disable-next-line react-hooks/exhaustive-deps\\n\\t}, [requestDeleteWorkflow, user])\\n\\n\\tuseEffect(() => {\\n\\t\\tif (responseDeleteWorkflow) {\\n\\t\\t\\tsetWorkflowList(\\n\\t\\t\\t\\tworkflows.filter(\\n\\t\\t\\t\\t\\t(workflowItem) => workflowItem._id !== row.original._id\\n\\t\\t\\t\\t)\\n\\t\\t\\t)\\n\\t\\t}\\n\\t\\t// eslint-disable-next-line react-hooks/exhaustive-deps\\n\\t}, [responseDeleteWorkflow])\\n\\n\\tuseEffect(() => {\\n\\t\\tif (responseSaveWorkflow) {\\n\\t\\t\\tsetWorkflowList([...workflows, responseSaveWorkflow.data])\\n\\t\\t}\\n\\t\\t// eslint-disable-next-line react-hooks/exhaustive-deps\\n\\t}, [responseSaveWorkflow])\\n\\n\\treturn (\\n\\t\\t<DropdownMenu>\\n\\t\\t\\t<DropdownMenuTrigger asChild>\\n\\t\\t\\t\\t<Button\\n\\t\\t\\t\\t\\tdisabled={loadingDeleteWorkflow}\\n\\t\\t\\t\\t\\tvariant=\\\"ghost\\\"\\n\\t\\t\\t\\t\\tclassName=\\\"flex h-8 w-8 p-0 data-[state=open]:bg-muted\\\"\\n\\t\\t\\t\\t>\\n\\t\\t\\t\\t\\t{loadingDeleteWorkflow || loadingSaveWorkflow ? (\\n\\t\\t\\t\\t\\t\\t<>\\n\\t\\t\\t\\t\\t\\t\\t<span className=\\\"workflow_grid_card_loading_animated\\\"></span>\\n\\t\\t\\t\\t\\t\\t</>\\n\\t\\t\\t\\t\\t) : (\\n\\t\\t\\t\\t\\t\\t<>\\n\\t\\t\\t\\t\\t\\t\\t<DotsHorizontalIcon className=\\\"h-4 w-4\\\" />\\n\\t\\t\\t\\t\\t\\t\\t<span className=\\\"sr-only\\\">Open menu</span>\\n\\t\\t\\t\\t\\t\\t</>\\n\\t\\t\\t\\t\\t)}\\n\\t\\t\\t\\t</Button>\\n\\t\\t\\t</DropdownMenuTrigger>\\n\\t\\t\\t<DropdownMenuContent align=\\\"end\\\" className=\\\"w-[160px]\\\">\\n\\t\\t\\t\\t<DropdownMenuItem disabled>Manage Region</DropdownMenuItem>\\n\\t\\t\\t\\t<DropdownMenuItem>\\n\\t\\t\\t\\t\\t<Link href={`/canvas/${row.original._id}`}>Edit</Link>\\n\\t\\t\\t\\t</DropdownMenuItem>\\n\\t\\t\\t\\t<DropdownMenuItem\\n\\t\\t\\t\\t\\tonClick={() => {\\n\\t\\t\\t\\t\\t\\tcopyWorkflow()\\n\\t\\t\\t\\t\\t}}\\n\\t\\t\\t\\t>\\n\\t\\t\\t\\t\\tMake a copy\\n\\t\\t\\t\\t</DropdownMenuItem>\\n\\t\\t\\t\\t<DropdownMenuSeparator />\\n\\t\\t\\t\\t<DropdownMenuItem\\n\\t\\t\\t\\t\\tonClick={() => {\\n\\t\\t\\t\\t\\t\\tdeleteWorkflow()\\n\\t\\t\\t\\t\\t}}\\n\\t\\t\\t\\t>\\n\\t\\t\\t\\t\\tDelete\\n\\t\\t\\t\\t</DropdownMenuItem>\\n\\t\\t\\t</DropdownMenuContent>\\n\\t\\t</DropdownMenu>\\n\\t)\\n}\\n\"",
  "examples": [
    {
      "source": "data-table-row-actions.tsx",
      "code": "\"'use client'\\n\\nimport { Dispatch, SetStateAction, useCallback, useEffect } from 'react'\\nimport { DotsHorizontalIcon } from '@radix-ui/react-icons'\\nimport { Row } from '@tanstack/react-table'\\nimport Link from 'next/link'\\nimport {\\n\\tButton,\\n\\tDropdownMenu,\\n\\tDropdownMenuContent,\\n\\tDropdownMenuItem,\\n\\tDropdownMenuSeparator,\\n\\tDropdownMenuTrigger,\\n} from '@/modules/shadcn/components/ui'\\nimport { useDeleteWorkflow, useSaveWorkflow } from '@/hooks/useWorkflow'\\nimport { useSessionUser } from '@/hooks/useSessionUser'\\nimport { Workflow } from '@/types/workflow'\\n\\ninterface DataTableRowActionsProps {\\n\\trow: Row<Workflow>\\n\\tsetWorkflowList: Dispatch<SetStateAction<Workflow[]>>\\n\\tworkflows: Workflow[]\\n}\\n\\nexport function DataTableRowActions({\\n\\t// eslint-disable-next-line no-unused-vars\\n\\trow,\\n\\tworkflows,\\n\\tsetWorkflowList,\\n}: DataTableRowActionsProps) {\\n\\tconst user = useSessionUser()\\n\\tconst {\\n\\t\\tresponse: responseDeleteWorkflow,\\n\\t\\trequest: requestDeleteWorkflow,\\n\\t\\tloading: loadingDeleteWorkflow,\\n\\t} = useDeleteWorkflow()\\n\\tconst {\\n\\t\\tresponse: responseSaveWorkflow,\\n\\t\\trequest: requestSaveWorkflow,\\n\\t\\tloading: loadingSaveWorkflow,\\n\\t} = useSaveWorkflow()\\n\\n\\tconst copyWorkflow = useCallback(() => {\\n\\t\\tconst newWorkflowBody = {\\n\\t\\t\\tname: `${row.original.name}_copy`,\\n\\t\\t\\tdeployed: false,\\n\\t\\t\\tflowData: row.original.flowData,\\n\\t\\t}\\n\\t\\trequestSaveWorkflow(newWorkflowBody)\\n\\t}, [requestSaveWorkflow, row])\\n\\n\\tconst deleteWorkflow = useCallback(() => {\\n\\t\\trequestDeleteWorkflow({\\n\\t\\t\\tid: row.original._id,\\n\\t\\t\\tuser,\\n\\t\\t})\\n\\t\\t// eslint-disable-next-line react-hooks/exhaustive-deps\\n\\t}, [requestDeleteWorkflow, user])\\n\\n\\tuseEffect(() => {\\n\\t\\tif (responseDeleteWorkflow) {\\n\\t\\t\\tsetWorkflowList(\\n\\t\\t\\t\\tworkflows.filter(\\n\\t\\t\\t\\t\\t(workflowItem) => workflowItem._id !== row.original._id\\n\\t\\t\\t\\t)\\n\\t\\t\\t)\\n\\t\\t}\\n\\t\\t// eslint-disable-next-line react-hooks/exhaustive-deps\\n\\t}, [responseDeleteWorkflow])\\n\\n\\tuseEffect(() => {\\n\\t\\tif (responseSaveWorkflow) {\\n\\t\\t\\tsetWorkflowList([...workflows, responseSaveWorkflow.data])\\n\\t\\t}\\n\\t\\t// eslint-disable-next-line react-hooks/exhaustive-deps\\n\\t}, [responseSaveWorkflow])\\n\\n\\treturn (\\n\\t\\t<DropdownMenu>\\n\\t\\t\\t<DropdownMenuTrigger asChild>\\n\\t\\t\\t\\t<Button\\n\\t\\t\\t\\t\\tdisabled={loadingDeleteWorkflow}\\n\\t\\t\\t\\t\\tvariant=\\\"ghost\\\"\\n\\t\\t\\t\\t\\tclassName=\\\"flex h-8 w-8 p-0 data-[state=open]:bg-muted\\\"\\n\\t\\t\\t\\t>\\n\\t\\t\\t\\t\\t{loadingDeleteWorkflow || loadingSaveWorkflow ? (\\n\\t\\t\\t\\t\\t\\t<>\\n\\t\\t\\t\\t\\t\\t\\t<span className=\\\"workflow_grid_card_loading_animated\\\"></span>\\n\\t\\t\\t\\t\\t\\t</>\\n\\t\\t\\t\\t\\t) : (\\n\\t\\t\\t\\t\\t\\t<>\\n\\t\\t\\t\\t\\t\\t\\t<DotsHorizontalIcon className=\\\"h-4 w-4\\\" />\\n\\t\\t\\t\\t\\t\\t\\t<span className=\\\"sr-only\\\">Open menu</span>\\n\\t\\t\\t\\t\\t\\t</>\\n\\t\\t\\t\\t\\t)}\\n\\t\\t\\t\\t</Button>\\n\\t\\t\\t</DropdownMenuTrigger>\\n\\t\\t\\t<DropdownMenuContent align=\\\"end\\\" className=\\\"w-[160px]\\\">\\n\\t\\t\\t\\t<DropdownMenuItem disabled>Manage Region</DropdownMenuItem>\\n\\t\\t\\t\\t<DropdownMenuItem>\\n\\t\\t\\t\\t\\t<Link href={`/canvas/${row.original._id}`}>Edit</Link>\\n\\t\\t\\t\\t</DropdownMenuItem>\\n\\t\\t\\t\\t<DropdownMenuItem\\n\\t\\t\\t\\t\\tonClick={() => {\\n\\t\\t\\t\\t\\t\\tcopyWorkflow()\\n\\t\\t\\t\\t\\t}}\\n\\t\\t\\t\\t>\\n\\t\\t\\t\\t\\tMake a copy\\n\\t\\t\\t\\t</DropdownMenuItem>\\n\\t\\t\\t\\t<DropdownMenuSeparator />\\n\\t\\t\\t\\t<DropdownMenuItem\\n\\t\\t\\t\\t\\tonClick={() => {\\n\\t\\t\\t\\t\\t\\tdeleteWorkflow()\\n\\t\\t\\t\\t\\t}}\\n\\t\\t\\t\\t>\\n\\t\\t\\t\\t\\tDelete\\n\\t\\t\\t\\t</DropdownMenuItem>\\n\\t\\t\\t</DropdownMenuContent>\\n\\t\\t</DropdownMenu>\\n\\t)\\n}\\n\""
    }
  ]
}
,
{
  "name": "columns",
  "description": "Description for columns component.",
  "usage": "\"'use client'\\n\\nimport { Dispatch, SetStateAction } from 'react'\\nimport { ColumnDef } from '@tanstack/react-table'\\nimport { DataTableColumnHeader } from './data-table-column-header'\\nimport { DataTableRowActions } from './data-table-row-actions'\\nimport { Workflow } from '@/types/workflow'\\nimport { WorkflowGridCardHighlight } from '@/components'\\nimport Link from 'next/link'\\n\\ninterface SetColumnsProps {\\n\\tsetWorkflowList: Dispatch<SetStateAction<Workflow[]>>\\n\\tworkflows: Workflow[]\\n}\\n\\nexport const setColumns = ({\\n\\tsetWorkflowList,\\n\\tworkflows,\\n}: SetColumnsProps): ColumnDef<Workflow>[] => {\\n\\treturn [\\n\\t\\t// {\\n\\t\\t// \\taccessorKey: 'name',\\n\\t\\t// \\theader: ({ column }) => (\\n\\t\\t// \\t\\t<DataTableColumnHeader column={column} title=\\\"Name\\\" />\\n\\t\\t// \\t),\\n\\t\\t// \\tcell: ({ row }) => <div className=\\\"w-[80px]\\\">{row.getValue('name')}</div>,\\n\\t\\t// \\tenableSorting: false,\\n\\t\\t// \\tenableHiding: false,\\n\\t\\t// },\\n\\t\\t{\\n\\t\\t\\taccessorKey: 'name',\\n\\t\\t\\theader: ({ column }) => (\\n\\t\\t\\t\\t<DataTableColumnHeader column={column} title=\\\"Name\\\" />\\n\\t\\t\\t),\\n\\t\\t\\tcell: ({ row }) => (\\n\\t\\t\\t\\t<div className=\\\"flex space-x-2 max-w-[500px] truncate font-medium\\\">\\n\\t\\t\\t\\t\\t<Link href={`/canvas/${row.original._id}`}>\\n\\t\\t\\t\\t\\t\\t{row.getValue('name')}\\n\\t\\t\\t\\t\\t</Link>\\n\\t\\t\\t\\t</div>\\n\\t\\t\\t),\\n\\t\\t},\\n\\t\\t{\\n\\t\\t\\taccessorKey: 'deployed',\\n\\t\\t\\theader: ({ column }) => (\\n\\t\\t\\t\\t<DataTableColumnHeader column={column} title=\\\"Deployed\\\" />\\n\\t\\t\\t),\\n\\t\\t\\tcell: ({ row }) => {\\n\\t\\t\\t\\tconst isDeployed = row.getValue('deployed')\\n\\n\\t\\t\\t\\treturn (\\n\\t\\t\\t\\t\\t<div\\n\\t\\t\\t\\t\\t\\tclassName={`workflow_grid_card_deploy ${isDeployed ? 'workflow_grid_card_deploy-launch' : ''}`}\\n\\t\\t\\t\\t\\t>\\n\\t\\t\\t\\t\\t\\t{isDeployed ? 'Deployed' : 'Not Deployed'}\\n\\t\\t\\t\\t\\t</div>\\n\\t\\t\\t\\t)\\n\\t\\t\\t},\\n\\t\\t},\\n\\t\\t{\\n\\t\\t\\tid: 'informaton',\\n\\t\\t\\theader: ({ column }) => (\\n\\t\\t\\t\\t<DataTableColumnHeader column={column} title=\\\"Information\\\" />\\n\\t\\t\\t),\\n\\t\\t\\tcell: ({ row }) => {\\n\\t\\t\\t\\tconst nodesList = !!row.original.flowData\\n\\t\\t\\t\\t\\t? row.original.flowData.nodes\\n\\t\\t\\t\\t\\t: []\\n\\n\\t\\t\\t\\treturn (\\n\\t\\t\\t\\t\\t<div className=\\\"workflow_grid_card_data\\\">\\n\\t\\t\\t\\t\\t\\t<WorkflowGridCardHighlight\\n\\t\\t\\t\\t\\t\\t\\tvalue={22}\\n\\t\\t\\t\\t\\t\\t\\ticon=\\\"executions\\\"\\n\\t\\t\\t\\t\\t\\t\\tdescription=\\\"Number of executions\\\"\\n\\t\\t\\t\\t\\t\\t/>\\n\\t\\t\\t\\t\\t\\t<WorkflowGridCardHighlight\\n\\t\\t\\t\\t\\t\\t\\tvalue={nodesList.length}\\n\\t\\t\\t\\t\\t\\t\\ticon=\\\"nodes\\\"\\n\\t\\t\\t\\t\\t\\t\\tdescription=\\\"Number of nodes\\\"\\n\\t\\t\\t\\t\\t\\t/>\\n\\t\\t\\t\\t\\t\\t<WorkflowGridCardHighlight\\n\\t\\t\\t\\t\\t\\t\\tvalue=\\\"VA\\\"\\n\\t\\t\\t\\t\\t\\t\\ticon=\\\"point\\\"\\n\\t\\t\\t\\t\\t\\t\\tdescription=\\\"Virginia\\\"\\n\\t\\t\\t\\t\\t\\t/>\\n\\t\\t\\t\\t\\t</div>\\n\\t\\t\\t\\t)\\n\\t\\t\\t},\\n\\t\\t},\\n\\t\\t// {\\n\\t\\t// \\taccessorKey: 'status',\\n\\t\\t// \\theader: ({ column }) => (\\n\\t\\t// \\t\\t<DataTableColumnHeader column={column} title=\\\"Status\\\" />\\n\\t\\t// \\t),\\n\\t\\t// \\tcell: ({ row }) => {\\n\\t\\t// \\t\\treturn (\\n\\t\\t// \\t\\t\\t<div className=\\\"flex w-[100px] items-center\\\">\\n\\t\\t// \\t\\t\\t\\t<span>{status.label}</span>\\n\\t\\t// \\t\\t\\t</div>\\n\\t\\t// \\t\\t)\\n\\t\\t// \\t},\\n\\t\\t// \\tfilterFn: (row, id, value) => {\\n\\t\\t// \\t\\treturn value.includes(row.getValue(id))\\n\\t\\t// \\t},\\n\\t\\t// },\\n\\t\\t// {\\n\\t\\t// \\taccessorKey: 'priority',\\n\\t\\t// \\theader: ({ column }) => (\\n\\t\\t// \\t\\t<DataTableColumnHeader column={column} title=\\\"Priority\\\" />\\n\\t\\t// \\t),\\n\\t\\t// \\tcell: ({ row }) => {\\n\\t\\t// \\t\\tconst priority = priorities.find(\\n\\t\\t// \\t\\t\\t(priority) => priority.value === row.getValue('priority')\\n\\t\\t// \\t\\t)\\n\\n\\t\\t// \\t\\tif (!priority) {\\n\\t\\t// \\t\\t\\treturn null\\n\\t\\t// \\t\\t}\\n\\n\\t\\t// \\t\\treturn (\\n\\t\\t// \\t\\t\\t<div className=\\\"flex items-center\\\">\\n\\t\\t// \\t\\t\\t\\t{priority.icon && (\\n\\t\\t// \\t\\t\\t\\t\\t<priority.icon className=\\\"mr-2 h-4 w-4 text-muted-foreground\\\" />\\n\\t\\t// \\t\\t\\t\\t)}\\n\\t\\t// \\t\\t\\t\\t<span>{priority.label}</span>\\n\\t\\t// \\t\\t\\t</div>\\n\\t\\t// \\t\\t)\\n\\t\\t// \\t},\\n\\t\\t// \\tfilterFn: (row, id, value) => {\\n\\t\\t// \\t\\treturn value.includes(row.getValue(id))\\n\\t\\t// \\t},\\n\\t\\t// },\\n\\t\\t{\\n\\t\\t\\tid: 'actions',\\n\\t\\t\\tcell: ({ row }) => (\\n\\t\\t\\t\\t<div className=\\\"flex items-center justify-end w-full\\\">\\n\\t\\t\\t\\t\\t<DataTableRowActions\\n\\t\\t\\t\\t\\t\\trow={row}\\n\\t\\t\\t\\t\\t\\tworkflows={workflows}\\n\\t\\t\\t\\t\\t\\tsetWorkflowList={setWorkflowList}\\n\\t\\t\\t\\t\\t/>\\n\\t\\t\\t\\t</div>\\n\\t\\t\\t),\\n\\t\\t},\\n\\t]\\n}\\n\"",
  "examples": [
    {
      "source": "columns.tsx",
      "code": "\"'use client'\\n\\nimport { Dispatch, SetStateAction } from 'react'\\nimport { ColumnDef } from '@tanstack/react-table'\\nimport { DataTableColumnHeader } from './data-table-column-header'\\nimport { DataTableRowActions } from './data-table-row-actions'\\nimport { Workflow } from '@/types/workflow'\\nimport { WorkflowGridCardHighlight } from '@/components'\\nimport Link from 'next/link'\\n\\ninterface SetColumnsProps {\\n\\tsetWorkflowList: Dispatch<SetStateAction<Workflow[]>>\\n\\tworkflows: Workflow[]\\n}\\n\\nexport const setColumns = ({\\n\\tsetWorkflowList,\\n\\tworkflows,\\n}: SetColumnsProps): ColumnDef<Workflow>[] => {\\n\\treturn [\\n\\t\\t// {\\n\\t\\t// \\taccessorKey: 'name',\\n\\t\\t// \\theader: ({ column }) => (\\n\\t\\t// \\t\\t<DataTableColumnHeader column={column} title=\\\"Name\\\" />\\n\\t\\t// \\t),\\n\\t\\t// \\tcell: ({ row }) => <div className=\\\"w-[80px]\\\">{row.getValue('name')}</div>,\\n\\t\\t// \\tenableSorting: false,\\n\\t\\t// \\tenableHiding: false,\\n\\t\\t// },\\n\\t\\t{\\n\\t\\t\\taccessorKey: 'name',\\n\\t\\t\\theader: ({ column }) => (\\n\\t\\t\\t\\t<DataTableColumnHeader column={column} title=\\\"Name\\\" />\\n\\t\\t\\t),\\n\\t\\t\\tcell: ({ row }) => (\\n\\t\\t\\t\\t<div className=\\\"flex space-x-2 max-w-[500px] truncate font-medium\\\">\\n\\t\\t\\t\\t\\t<Link href={`/canvas/${row.original._id}`}>\\n\\t\\t\\t\\t\\t\\t{row.getValue('name')}\\n\\t\\t\\t\\t\\t</Link>\\n\\t\\t\\t\\t</div>\\n\\t\\t\\t),\\n\\t\\t},\\n\\t\\t{\\n\\t\\t\\taccessorKey: 'deployed',\\n\\t\\t\\theader: ({ column }) => (\\n\\t\\t\\t\\t<DataTableColumnHeader column={column} title=\\\"Deployed\\\" />\\n\\t\\t\\t),\\n\\t\\t\\tcell: ({ row }) => {\\n\\t\\t\\t\\tconst isDeployed = row.getValue('deployed')\\n\\n\\t\\t\\t\\treturn (\\n\\t\\t\\t\\t\\t<div\\n\\t\\t\\t\\t\\t\\tclassName={`workflow_grid_card_deploy ${isDeployed ? 'workflow_grid_card_deploy-launch' : ''}`}\\n\\t\\t\\t\\t\\t>\\n\\t\\t\\t\\t\\t\\t{isDeployed ? 'Deployed' : 'Not Deployed'}\\n\\t\\t\\t\\t\\t</div>\\n\\t\\t\\t\\t)\\n\\t\\t\\t},\\n\\t\\t},\\n\\t\\t{\\n\\t\\t\\tid: 'informaton',\\n\\t\\t\\theader: ({ column }) => (\\n\\t\\t\\t\\t<DataTableColumnHeader column={column} title=\\\"Information\\\" />\\n\\t\\t\\t),\\n\\t\\t\\tcell: ({ row }) => {\\n\\t\\t\\t\\tconst nodesList = !!row.original.flowData\\n\\t\\t\\t\\t\\t? row.original.flowData.nodes\\n\\t\\t\\t\\t\\t: []\\n\\n\\t\\t\\t\\treturn (\\n\\t\\t\\t\\t\\t<div className=\\\"workflow_grid_card_data\\\">\\n\\t\\t\\t\\t\\t\\t<WorkflowGridCardHighlight\\n\\t\\t\\t\\t\\t\\t\\tvalue={22}\\n\\t\\t\\t\\t\\t\\t\\ticon=\\\"executions\\\"\\n\\t\\t\\t\\t\\t\\t\\tdescription=\\\"Number of executions\\\"\\n\\t\\t\\t\\t\\t\\t/>\\n\\t\\t\\t\\t\\t\\t<WorkflowGridCardHighlight\\n\\t\\t\\t\\t\\t\\t\\tvalue={nodesList.length}\\n\\t\\t\\t\\t\\t\\t\\ticon=\\\"nodes\\\"\\n\\t\\t\\t\\t\\t\\t\\tdescription=\\\"Number of nodes\\\"\\n\\t\\t\\t\\t\\t\\t/>\\n\\t\\t\\t\\t\\t\\t<WorkflowGridCardHighlight\\n\\t\\t\\t\\t\\t\\t\\tvalue=\\\"VA\\\"\\n\\t\\t\\t\\t\\t\\t\\ticon=\\\"point\\\"\\n\\t\\t\\t\\t\\t\\t\\tdescription=\\\"Virginia\\\"\\n\\t\\t\\t\\t\\t\\t/>\\n\\t\\t\\t\\t\\t</div>\\n\\t\\t\\t\\t)\\n\\t\\t\\t},\\n\\t\\t},\\n\\t\\t// {\\n\\t\\t// \\taccessorKey: 'status',\\n\\t\\t// \\theader: ({ column }) => (\\n\\t\\t// \\t\\t<DataTableColumnHeader column={column} title=\\\"Status\\\" />\\n\\t\\t// \\t),\\n\\t\\t// \\tcell: ({ row }) => {\\n\\t\\t// \\t\\treturn (\\n\\t\\t// \\t\\t\\t<div className=\\\"flex w-[100px] items-center\\\">\\n\\t\\t// \\t\\t\\t\\t<span>{status.label}</span>\\n\\t\\t// \\t\\t\\t</div>\\n\\t\\t// \\t\\t)\\n\\t\\t// \\t},\\n\\t\\t// \\tfilterFn: (row, id, value) => {\\n\\t\\t// \\t\\treturn value.includes(row.getValue(id))\\n\\t\\t// \\t},\\n\\t\\t// },\\n\\t\\t// {\\n\\t\\t// \\taccessorKey: 'priority',\\n\\t\\t// \\theader: ({ column }) => (\\n\\t\\t// \\t\\t<DataTableColumnHeader column={column} title=\\\"Priority\\\" />\\n\\t\\t// \\t),\\n\\t\\t// \\tcell: ({ row }) => {\\n\\t\\t// \\t\\tconst priority = priorities.find(\\n\\t\\t// \\t\\t\\t(priority) => priority.value === row.getValue('priority')\\n\\t\\t// \\t\\t)\\n\\n\\t\\t// \\t\\tif (!priority) {\\n\\t\\t// \\t\\t\\treturn null\\n\\t\\t// \\t\\t}\\n\\n\\t\\t// \\t\\treturn (\\n\\t\\t// \\t\\t\\t<div className=\\\"flex items-center\\\">\\n\\t\\t// \\t\\t\\t\\t{priority.icon && (\\n\\t\\t// \\t\\t\\t\\t\\t<priority.icon className=\\\"mr-2 h-4 w-4 text-muted-foreground\\\" />\\n\\t\\t// \\t\\t\\t\\t)}\\n\\t\\t// \\t\\t\\t\\t<span>{priority.label}</span>\\n\\t\\t// \\t\\t\\t</div>\\n\\t\\t// \\t\\t)\\n\\t\\t// \\t},\\n\\t\\t// \\tfilterFn: (row, id, value) => {\\n\\t\\t// \\t\\treturn value.includes(row.getValue(id))\\n\\t\\t// \\t},\\n\\t\\t// },\\n\\t\\t{\\n\\t\\t\\tid: 'actions',\\n\\t\\t\\tcell: ({ row }) => (\\n\\t\\t\\t\\t<div className=\\\"flex items-center justify-end w-full\\\">\\n\\t\\t\\t\\t\\t<DataTableRowActions\\n\\t\\t\\t\\t\\t\\trow={row}\\n\\t\\t\\t\\t\\t\\tworkflows={workflows}\\n\\t\\t\\t\\t\\t\\tsetWorkflowList={setWorkflowList}\\n\\t\\t\\t\\t\\t/>\\n\\t\\t\\t\\t</div>\\n\\t\\t\\t),\\n\\t\\t},\\n\\t]\\n}\\n\""
    }
  ]
}
,
{
  "name": "data-table-column-header",
  "description": "Description for data-table-column-header component.",
  "usage": "\"import {\\n\\tArrowDownIcon,\\n\\tArrowUpIcon,\\n\\tCaretSortIcon,\\n\\t// EyeNoneIcon,\\n} from '@radix-ui/react-icons'\\nimport { Column } from '@tanstack/react-table'\\n\\nimport { cn } from '@/lib/utils'\\nimport {\\n\\tDropdownMenu,\\n\\tDropdownMenuContent,\\n\\tDropdownMenuItem,\\n\\t// DropdownMenuSeparator,\\n\\tDropdownMenuTrigger,\\n\\tButton,\\n} from '@/modules/shadcn/components/ui'\\n\\ninterface DataTableColumnHeaderProps<TData, TValue>\\n\\textends React.HTMLAttributes<HTMLDivElement> {\\n\\tcolumn: Column<TData, TValue>\\n\\ttitle: string\\n}\\n\\nexport function DataTableColumnHeader<TData, TValue>({\\n\\tcolumn,\\n\\ttitle,\\n\\tclassName,\\n}: DataTableColumnHeaderProps<TData, TValue>) {\\n\\tif (!column.getCanSort()) {\\n\\t\\treturn <div className={cn(className)}>{title}</div>\\n\\t}\\n\\n\\treturn (\\n\\t\\t<div className={cn('flex items-center space-x-2', className)}>\\n\\t\\t\\t<DropdownMenu>\\n\\t\\t\\t\\t<DropdownMenuTrigger asChild>\\n\\t\\t\\t\\t\\t<Button\\n\\t\\t\\t\\t\\t\\tvariant=\\\"ghost\\\"\\n\\t\\t\\t\\t\\t\\tsize=\\\"sm\\\"\\n\\t\\t\\t\\t\\t\\tclassName=\\\"-ml-3 h-8 data-[state=open]:bg-accent\\\"\\n\\t\\t\\t\\t\\t>\\n\\t\\t\\t\\t\\t\\t<span>{title}</span>\\n\\t\\t\\t\\t\\t\\t{column.getIsSorted() === 'desc' ? (\\n\\t\\t\\t\\t\\t\\t\\t<ArrowDownIcon className=\\\"ml-2 h-4 w-4\\\" />\\n\\t\\t\\t\\t\\t\\t) : column.getIsSorted() === 'asc' ? (\\n\\t\\t\\t\\t\\t\\t\\t<ArrowUpIcon className=\\\"ml-2 h-4 w-4\\\" />\\n\\t\\t\\t\\t\\t\\t) : (\\n\\t\\t\\t\\t\\t\\t\\t<CaretSortIcon className=\\\"ml-2 h-4 w-4\\\" />\\n\\t\\t\\t\\t\\t\\t)}\\n\\t\\t\\t\\t\\t</Button>\\n\\t\\t\\t\\t</DropdownMenuTrigger>\\n\\t\\t\\t\\t<DropdownMenuContent align=\\\"start\\\">\\n\\t\\t\\t\\t\\t<DropdownMenuItem onClick={() => column.toggleSorting(false)}>\\n\\t\\t\\t\\t\\t\\t<ArrowUpIcon className=\\\"mr-2 h-3.5 w-3.5 text-muted-foreground/70\\\" />\\n\\t\\t\\t\\t\\t\\tAsc\\n\\t\\t\\t\\t\\t</DropdownMenuItem>\\n\\t\\t\\t\\t\\t<DropdownMenuItem onClick={() => column.toggleSorting(true)}>\\n\\t\\t\\t\\t\\t\\t<ArrowDownIcon className=\\\"mr-2 h-3.5 w-3.5 text-muted-foreground/70\\\" />\\n\\t\\t\\t\\t\\t\\tDesc\\n\\t\\t\\t\\t\\t</DropdownMenuItem>\\n\\t\\t\\t\\t\\t{/* <DropdownMenuSeparator />\\n\\t\\t\\t\\t\\t<DropdownMenuItem onClick={() => column.toggleVisibility(false)}>\\n\\t\\t\\t\\t\\t\\t<EyeNoneIcon className=\\\"mr-2 h-3.5 w-3.5 text-muted-foreground/70\\\" />\\n\\t\\t\\t\\t\\t\\tHide\\n\\t\\t\\t\\t\\t</DropdownMenuItem> */}\\n\\t\\t\\t\\t</DropdownMenuContent>\\n\\t\\t\\t</DropdownMenu>\\n\\t\\t</div>\\n\\t)\\n}\\n\"",
  "examples": [
    {
      "source": "data-table-column-header.tsx",
      "code": "\"import {\\n\\tArrowDownIcon,\\n\\tArrowUpIcon,\\n\\tCaretSortIcon,\\n\\t// EyeNoneIcon,\\n} from '@radix-ui/react-icons'\\nimport { Column } from '@tanstack/react-table'\\n\\nimport { cn } from '@/lib/utils'\\nimport {\\n\\tDropdownMenu,\\n\\tDropdownMenuContent,\\n\\tDropdownMenuItem,\\n\\t// DropdownMenuSeparator,\\n\\tDropdownMenuTrigger,\\n\\tButton,\\n} from '@/modules/shadcn/components/ui'\\n\\ninterface DataTableColumnHeaderProps<TData, TValue>\\n\\textends React.HTMLAttributes<HTMLDivElement> {\\n\\tcolumn: Column<TData, TValue>\\n\\ttitle: string\\n}\\n\\nexport function DataTableColumnHeader<TData, TValue>({\\n\\tcolumn,\\n\\ttitle,\\n\\tclassName,\\n}: DataTableColumnHeaderProps<TData, TValue>) {\\n\\tif (!column.getCanSort()) {\\n\\t\\treturn <div className={cn(className)}>{title}</div>\\n\\t}\\n\\n\\treturn (\\n\\t\\t<div className={cn('flex items-center space-x-2', className)}>\\n\\t\\t\\t<DropdownMenu>\\n\\t\\t\\t\\t<DropdownMenuTrigger asChild>\\n\\t\\t\\t\\t\\t<Button\\n\\t\\t\\t\\t\\t\\tvariant=\\\"ghost\\\"\\n\\t\\t\\t\\t\\t\\tsize=\\\"sm\\\"\\n\\t\\t\\t\\t\\t\\tclassName=\\\"-ml-3 h-8 data-[state=open]:bg-accent\\\"\\n\\t\\t\\t\\t\\t>\\n\\t\\t\\t\\t\\t\\t<span>{title}</span>\\n\\t\\t\\t\\t\\t\\t{column.getIsSorted() === 'desc' ? (\\n\\t\\t\\t\\t\\t\\t\\t<ArrowDownIcon className=\\\"ml-2 h-4 w-4\\\" />\\n\\t\\t\\t\\t\\t\\t) : column.getIsSorted() === 'asc' ? (\\n\\t\\t\\t\\t\\t\\t\\t<ArrowUpIcon className=\\\"ml-2 h-4 w-4\\\" />\\n\\t\\t\\t\\t\\t\\t) : (\\n\\t\\t\\t\\t\\t\\t\\t<CaretSortIcon className=\\\"ml-2 h-4 w-4\\\" />\\n\\t\\t\\t\\t\\t\\t)}\\n\\t\\t\\t\\t\\t</Button>\\n\\t\\t\\t\\t</DropdownMenuTrigger>\\n\\t\\t\\t\\t<DropdownMenuContent align=\\\"start\\\">\\n\\t\\t\\t\\t\\t<DropdownMenuItem onClick={() => column.toggleSorting(false)}>\\n\\t\\t\\t\\t\\t\\t<ArrowUpIcon className=\\\"mr-2 h-3.5 w-3.5 text-muted-foreground/70\\\" />\\n\\t\\t\\t\\t\\t\\tAsc\\n\\t\\t\\t\\t\\t</DropdownMenuItem>\\n\\t\\t\\t\\t\\t<DropdownMenuItem onClick={() => column.toggleSorting(true)}>\\n\\t\\t\\t\\t\\t\\t<ArrowDownIcon className=\\\"mr-2 h-3.5 w-3.5 text-muted-foreground/70\\\" />\\n\\t\\t\\t\\t\\t\\tDesc\\n\\t\\t\\t\\t\\t</DropdownMenuItem>\\n\\t\\t\\t\\t\\t{/* <DropdownMenuSeparator />\\n\\t\\t\\t\\t\\t<DropdownMenuItem onClick={() => column.toggleVisibility(false)}>\\n\\t\\t\\t\\t\\t\\t<EyeNoneIcon className=\\\"mr-2 h-3.5 w-3.5 text-muted-foreground/70\\\" />\\n\\t\\t\\t\\t\\t\\tHide\\n\\t\\t\\t\\t\\t</DropdownMenuItem> */}\\n\\t\\t\\t\\t</DropdownMenuContent>\\n\\t\\t\\t</DropdownMenu>\\n\\t\\t</div>\\n\\t)\\n}\\n\""
    }
  ]
}
,
{
  "name": "data-table-faceted-filter",
  "description": "Description for data-table-faceted-filter component.",
  "usage": "\"import * as React from 'react'\\nimport { CheckIcon, PlusCircledIcon } from '@radix-ui/react-icons'\\nimport { Column } from '@tanstack/react-table'\\n\\nimport { cn } from '@/lib/utils'\\nimport { Badge } from '@/modules/shadcn/components/ui/tableFilter/badge'\\nimport {\\n\\tCommand,\\n\\tCommandEmpty,\\n\\tCommandGroup,\\n\\tCommandInput,\\n\\tCommandItem,\\n\\tCommandList,\\n\\tCommandSeparator,\\n} from '@/modules/shadcn/components/ui/tableFilter/command'\\nimport {\\n\\tButton,\\n\\tSeparator,\\n\\tPopover,\\n\\tPopoverContent,\\n\\tPopoverTrigger,\\n} from '@/modules/shadcn/components/ui'\\n\\ninterface DataTableFacetedFilterProps<TData, TValue> {\\n\\tcolumn?: Column<TData, TValue>\\n\\ttitle?: string\\n\\toptions: {\\n\\t\\tlabel: string\\n\\t\\tvalue: string\\n\\t\\ticon?: React.ComponentType<{ className?: string }>\\n\\t}[]\\n}\\n\\nexport function DataTableFacetedFilter<TData, TValue>({\\n\\tcolumn,\\n\\ttitle,\\n\\toptions,\\n}: DataTableFacetedFilterProps<TData, TValue>) {\\n\\tconst facets = column?.getFacetedUniqueValues()\\n\\tconst selectedValues = new Set(column?.getFilterValue() as string[])\\n\\n\\treturn (\\n\\t\\t<Popover>\\n\\t\\t\\t<PopoverTrigger asChild>\\n\\t\\t\\t\\t<Button variant=\\\"outline\\\" size=\\\"sm\\\" className=\\\"h-8 border-dashed\\\">\\n\\t\\t\\t\\t\\t<PlusCircledIcon className=\\\"mr-2 h-4 w-4\\\" />\\n\\t\\t\\t\\t\\t{title}\\n\\t\\t\\t\\t\\t{selectedValues?.size > 0 && (\\n\\t\\t\\t\\t\\t\\t<>\\n\\t\\t\\t\\t\\t\\t\\t<Separator orientation=\\\"vertical\\\" className=\\\"mx-2 h-4\\\" />\\n\\t\\t\\t\\t\\t\\t\\t<Badge\\n\\t\\t\\t\\t\\t\\t\\t\\tvariant=\\\"secondary\\\"\\n\\t\\t\\t\\t\\t\\t\\t\\tclassName=\\\"rounded-sm px-1 font-normal lg:hidden\\\"\\n\\t\\t\\t\\t\\t\\t\\t>\\n\\t\\t\\t\\t\\t\\t\\t\\t{selectedValues.size}\\n\\t\\t\\t\\t\\t\\t\\t</Badge>\\n\\t\\t\\t\\t\\t\\t\\t<div className=\\\"hidden space-x-1 lg:flex\\\">\\n\\t\\t\\t\\t\\t\\t\\t\\t{selectedValues.size > 2 ? (\\n\\t\\t\\t\\t\\t\\t\\t\\t\\t<Badge\\n\\t\\t\\t\\t\\t\\t\\t\\t\\t\\tvariant=\\\"secondary\\\"\\n\\t\\t\\t\\t\\t\\t\\t\\t\\t\\tclassName=\\\"rounded-sm px-1 font-normal\\\"\\n\\t\\t\\t\\t\\t\\t\\t\\t\\t>\\n\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t{selectedValues.size} selected\\n\\t\\t\\t\\t\\t\\t\\t\\t\\t</Badge>\\n\\t\\t\\t\\t\\t\\t\\t\\t) : (\\n\\t\\t\\t\\t\\t\\t\\t\\t\\toptions\\n\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t.filter((option) => selectedValues.has(option.value))\\n\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t.map((option) => (\\n\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t<Badge\\n\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\tvariant=\\\"secondary\\\"\\n\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\tkey={option.value}\\n\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\tclassName=\\\"rounded-sm px-1 font-normal\\\"\\n\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t>\\n\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t{option.label}\\n\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t</Badge>\\n\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t))\\n\\t\\t\\t\\t\\t\\t\\t\\t)}\\n\\t\\t\\t\\t\\t\\t\\t</div>\\n\\t\\t\\t\\t\\t\\t</>\\n\\t\\t\\t\\t\\t)}\\n\\t\\t\\t\\t</Button>\\n\\t\\t\\t</PopoverTrigger>\\n\\t\\t\\t<PopoverContent className=\\\"w-[200px] p-0\\\" align=\\\"start\\\">\\n\\t\\t\\t\\t<Command>\\n\\t\\t\\t\\t\\t<CommandInput placeholder={title} />\\n\\t\\t\\t\\t\\t<CommandList>\\n\\t\\t\\t\\t\\t\\t<CommandEmpty>No results found.</CommandEmpty>\\n\\t\\t\\t\\t\\t\\t<CommandGroup>\\n\\t\\t\\t\\t\\t\\t\\t{options.map((option) => {\\n\\t\\t\\t\\t\\t\\t\\t\\tconst isSelected = selectedValues.has(option.value)\\n\\t\\t\\t\\t\\t\\t\\t\\treturn (\\n\\t\\t\\t\\t\\t\\t\\t\\t\\t<CommandItem\\n\\t\\t\\t\\t\\t\\t\\t\\t\\t\\tkey={option.value}\\n\\t\\t\\t\\t\\t\\t\\t\\t\\t\\tonSelect={() => {\\n\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\tif (isSelected) {\\n\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\tselectedValues.delete(option.value)\\n\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t} else {\\n\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\tselectedValues.add(option.value)\\n\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t}\\n\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\tconst filterValues = Array.from(selectedValues)\\n\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\tcolumn?.setFilterValue(\\n\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\tfilterValues.length ? filterValues : undefined\\n\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t)\\n\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t}}\\n\\t\\t\\t\\t\\t\\t\\t\\t\\t>\\n\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t<div\\n\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\tclassName={cn(\\n\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t'mr-2 flex h-4 w-4 items-center justify-center rounded-sm border border-primary',\\n\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\tisSelected\\n\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t? 'bg-primary text-primary-foreground'\\n\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t: 'opacity-50 [&_svg]:invisible'\\n\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t)}\\n\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t>\\n\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t<CheckIcon className={cn('h-4 w-4')} />\\n\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t</div>\\n\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t{option.icon && (\\n\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t<option.icon className=\\\"mr-2 h-4 w-4 text-muted-foreground\\\" />\\n\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t)}\\n\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t<span>{option.label}</span>\\n\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t{facets?.get(option.value) && (\\n\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t<span className=\\\"ml-auto flex h-4 w-4 items-center justify-center font-mono text-xs\\\">\\n\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t{facets.get(option.value)}\\n\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t</span>\\n\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t)}\\n\\t\\t\\t\\t\\t\\t\\t\\t\\t</CommandItem>\\n\\t\\t\\t\\t\\t\\t\\t\\t)\\n\\t\\t\\t\\t\\t\\t\\t})}\\n\\t\\t\\t\\t\\t\\t</CommandGroup>\\n\\t\\t\\t\\t\\t\\t{selectedValues.size > 0 && (\\n\\t\\t\\t\\t\\t\\t\\t<>\\n\\t\\t\\t\\t\\t\\t\\t\\t<CommandSeparator />\\n\\t\\t\\t\\t\\t\\t\\t\\t<CommandGroup>\\n\\t\\t\\t\\t\\t\\t\\t\\t\\t<CommandItem\\n\\t\\t\\t\\t\\t\\t\\t\\t\\t\\tonSelect={() => column?.setFilterValue(undefined)}\\n\\t\\t\\t\\t\\t\\t\\t\\t\\t\\tclassName=\\\"justify-center text-center\\\"\\n\\t\\t\\t\\t\\t\\t\\t\\t\\t>\\n\\t\\t\\t\\t\\t\\t\\t\\t\\t\\tClear filters\\n\\t\\t\\t\\t\\t\\t\\t\\t\\t</CommandItem>\\n\\t\\t\\t\\t\\t\\t\\t\\t</CommandGroup>\\n\\t\\t\\t\\t\\t\\t\\t</>\\n\\t\\t\\t\\t\\t\\t)}\\n\\t\\t\\t\\t\\t</CommandList>\\n\\t\\t\\t\\t</Command>\\n\\t\\t\\t</PopoverContent>\\n\\t\\t</Popover>\\n\\t)\\n}\\n\"",
  "examples": [
    {
      "source": "data-table-faceted-filter.tsx",
      "code": "\"import * as React from 'react'\\nimport { CheckIcon, PlusCircledIcon } from '@radix-ui/react-icons'\\nimport { Column } from '@tanstack/react-table'\\n\\nimport { cn } from '@/lib/utils'\\nimport { Badge } from '@/modules/shadcn/components/ui/tableFilter/badge'\\nimport {\\n\\tCommand,\\n\\tCommandEmpty,\\n\\tCommandGroup,\\n\\tCommandInput,\\n\\tCommandItem,\\n\\tCommandList,\\n\\tCommandSeparator,\\n} from '@/modules/shadcn/components/ui/tableFilter/command'\\nimport {\\n\\tButton,\\n\\tSeparator,\\n\\tPopover,\\n\\tPopoverContent,\\n\\tPopoverTrigger,\\n} from '@/modules/shadcn/components/ui'\\n\\ninterface DataTableFacetedFilterProps<TData, TValue> {\\n\\tcolumn?: Column<TData, TValue>\\n\\ttitle?: string\\n\\toptions: {\\n\\t\\tlabel: string\\n\\t\\tvalue: string\\n\\t\\ticon?: React.ComponentType<{ className?: string }>\\n\\t}[]\\n}\\n\\nexport function DataTableFacetedFilter<TData, TValue>({\\n\\tcolumn,\\n\\ttitle,\\n\\toptions,\\n}: DataTableFacetedFilterProps<TData, TValue>) {\\n\\tconst facets = column?.getFacetedUniqueValues()\\n\\tconst selectedValues = new Set(column?.getFilterValue() as string[])\\n\\n\\treturn (\\n\\t\\t<Popover>\\n\\t\\t\\t<PopoverTrigger asChild>\\n\\t\\t\\t\\t<Button variant=\\\"outline\\\" size=\\\"sm\\\" className=\\\"h-8 border-dashed\\\">\\n\\t\\t\\t\\t\\t<PlusCircledIcon className=\\\"mr-2 h-4 w-4\\\" />\\n\\t\\t\\t\\t\\t{title}\\n\\t\\t\\t\\t\\t{selectedValues?.size > 0 && (\\n\\t\\t\\t\\t\\t\\t<>\\n\\t\\t\\t\\t\\t\\t\\t<Separator orientation=\\\"vertical\\\" className=\\\"mx-2 h-4\\\" />\\n\\t\\t\\t\\t\\t\\t\\t<Badge\\n\\t\\t\\t\\t\\t\\t\\t\\tvariant=\\\"secondary\\\"\\n\\t\\t\\t\\t\\t\\t\\t\\tclassName=\\\"rounded-sm px-1 font-normal lg:hidden\\\"\\n\\t\\t\\t\\t\\t\\t\\t>\\n\\t\\t\\t\\t\\t\\t\\t\\t{selectedValues.size}\\n\\t\\t\\t\\t\\t\\t\\t</Badge>\\n\\t\\t\\t\\t\\t\\t\\t<div className=\\\"hidden space-x-1 lg:flex\\\">\\n\\t\\t\\t\\t\\t\\t\\t\\t{selectedValues.size > 2 ? (\\n\\t\\t\\t\\t\\t\\t\\t\\t\\t<Badge\\n\\t\\t\\t\\t\\t\\t\\t\\t\\t\\tvariant=\\\"secondary\\\"\\n\\t\\t\\t\\t\\t\\t\\t\\t\\t\\tclassName=\\\"rounded-sm px-1 font-normal\\\"\\n\\t\\t\\t\\t\\t\\t\\t\\t\\t>\\n\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t{selectedValues.size} selected\\n\\t\\t\\t\\t\\t\\t\\t\\t\\t</Badge>\\n\\t\\t\\t\\t\\t\\t\\t\\t) : (\\n\\t\\t\\t\\t\\t\\t\\t\\t\\toptions\\n\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t.filter((option) => selectedValues.has(option.value))\\n\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t.map((option) => (\\n\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t<Badge\\n\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\tvariant=\\\"secondary\\\"\\n\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\tkey={option.value}\\n\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\tclassName=\\\"rounded-sm px-1 font-normal\\\"\\n\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t>\\n\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t{option.label}\\n\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t</Badge>\\n\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t))\\n\\t\\t\\t\\t\\t\\t\\t\\t)}\\n\\t\\t\\t\\t\\t\\t\\t</div>\\n\\t\\t\\t\\t\\t\\t</>\\n\\t\\t\\t\\t\\t)}\\n\\t\\t\\t\\t</Button>\\n\\t\\t\\t</PopoverTrigger>\\n\\t\\t\\t<PopoverContent className=\\\"w-[200px] p-0\\\" align=\\\"start\\\">\\n\\t\\t\\t\\t<Command>\\n\\t\\t\\t\\t\\t<CommandInput placeholder={title} />\\n\\t\\t\\t\\t\\t<CommandList>\\n\\t\\t\\t\\t\\t\\t<CommandEmpty>No results found.</CommandEmpty>\\n\\t\\t\\t\\t\\t\\t<CommandGroup>\\n\\t\\t\\t\\t\\t\\t\\t{options.map((option) => {\\n\\t\\t\\t\\t\\t\\t\\t\\tconst isSelected = selectedValues.has(option.value)\\n\\t\\t\\t\\t\\t\\t\\t\\treturn (\\n\\t\\t\\t\\t\\t\\t\\t\\t\\t<CommandItem\\n\\t\\t\\t\\t\\t\\t\\t\\t\\t\\tkey={option.value}\\n\\t\\t\\t\\t\\t\\t\\t\\t\\t\\tonSelect={() => {\\n\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\tif (isSelected) {\\n\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\tselectedValues.delete(option.value)\\n\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t} else {\\n\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\tselectedValues.add(option.value)\\n\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t}\\n\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\tconst filterValues = Array.from(selectedValues)\\n\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\tcolumn?.setFilterValue(\\n\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\tfilterValues.length ? filterValues : undefined\\n\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t)\\n\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t}}\\n\\t\\t\\t\\t\\t\\t\\t\\t\\t>\\n\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t<div\\n\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\tclassName={cn(\\n\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t'mr-2 flex h-4 w-4 items-center justify-center rounded-sm border border-primary',\\n\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\tisSelected\\n\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t? 'bg-primary text-primary-foreground'\\n\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t: 'opacity-50 [&_svg]:invisible'\\n\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t)}\\n\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t>\\n\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t<CheckIcon className={cn('h-4 w-4')} />\\n\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t</div>\\n\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t{option.icon && (\\n\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t<option.icon className=\\\"mr-2 h-4 w-4 text-muted-foreground\\\" />\\n\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t)}\\n\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t<span>{option.label}</span>\\n\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t{facets?.get(option.value) && (\\n\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t<span className=\\\"ml-auto flex h-4 w-4 items-center justify-center font-mono text-xs\\\">\\n\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t{facets.get(option.value)}\\n\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t</span>\\n\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t)}\\n\\t\\t\\t\\t\\t\\t\\t\\t\\t</CommandItem>\\n\\t\\t\\t\\t\\t\\t\\t\\t)\\n\\t\\t\\t\\t\\t\\t\\t})}\\n\\t\\t\\t\\t\\t\\t</CommandGroup>\\n\\t\\t\\t\\t\\t\\t{selectedValues.size > 0 && (\\n\\t\\t\\t\\t\\t\\t\\t<>\\n\\t\\t\\t\\t\\t\\t\\t\\t<CommandSeparator />\\n\\t\\t\\t\\t\\t\\t\\t\\t<CommandGroup>\\n\\t\\t\\t\\t\\t\\t\\t\\t\\t<CommandItem\\n\\t\\t\\t\\t\\t\\t\\t\\t\\t\\tonSelect={() => column?.setFilterValue(undefined)}\\n\\t\\t\\t\\t\\t\\t\\t\\t\\t\\tclassName=\\\"justify-center text-center\\\"\\n\\t\\t\\t\\t\\t\\t\\t\\t\\t>\\n\\t\\t\\t\\t\\t\\t\\t\\t\\t\\tClear filters\\n\\t\\t\\t\\t\\t\\t\\t\\t\\t</CommandItem>\\n\\t\\t\\t\\t\\t\\t\\t\\t</CommandGroup>\\n\\t\\t\\t\\t\\t\\t\\t</>\\n\\t\\t\\t\\t\\t\\t)}\\n\\t\\t\\t\\t\\t</CommandList>\\n\\t\\t\\t\\t</Command>\\n\\t\\t\\t</PopoverContent>\\n\\t\\t</Popover>\\n\\t)\\n}\\n\""
    }
  ]
}
,
{
  "name": "data-table-view-options",
  "description": "Description for data-table-view-options component.",
  "usage": "\"'use client'\\n\\nimport { DropdownMenuTrigger } from '@radix-ui/react-dropdown-menu'\\nimport { MixerHorizontalIcon } from '@radix-ui/react-icons'\\nimport { Table } from '@tanstack/react-table'\\n\\nimport {\\n\\tButton,\\n\\tDropdownMenu,\\n\\tDropdownMenuCheckboxItem,\\n\\tDropdownMenuContent,\\n\\tDropdownMenuLabel,\\n\\tDropdownMenuSeparator,\\n} from '@/modules/shadcn/components/ui'\\n\\ninterface DataTableViewOptionsProps<TData> {\\n\\ttable: Table<TData>\\n}\\n\\nexport function DataTableViewOptions<TData>({\\n\\ttable,\\n}: DataTableViewOptionsProps<TData>) {\\n\\treturn (\\n\\t\\t<DropdownMenu>\\n\\t\\t\\t<DropdownMenuTrigger asChild>\\n\\t\\t\\t\\t<Button\\n\\t\\t\\t\\t\\tvariant=\\\"outline\\\"\\n\\t\\t\\t\\t\\tsize=\\\"sm\\\"\\n\\t\\t\\t\\t\\tclassName=\\\"ml-auto hidden h-8 lg:flex\\\"\\n\\t\\t\\t\\t>\\n\\t\\t\\t\\t\\t<MixerHorizontalIcon className=\\\"mr-2 h-4 w-4\\\" />\\n\\t\\t\\t\\t\\tView\\n\\t\\t\\t\\t</Button>\\n\\t\\t\\t</DropdownMenuTrigger>\\n\\t\\t\\t<DropdownMenuContent align=\\\"end\\\" className=\\\"w-[150px]\\\">\\n\\t\\t\\t\\t<DropdownMenuLabel>Toggle columns</DropdownMenuLabel>\\n\\t\\t\\t\\t<DropdownMenuSeparator />\\n\\t\\t\\t\\t{table\\n\\t\\t\\t\\t\\t.getAllColumns()\\n\\t\\t\\t\\t\\t.filter(\\n\\t\\t\\t\\t\\t\\t(column) =>\\n\\t\\t\\t\\t\\t\\t\\ttypeof column.accessorFn !== 'undefined' && column.getCanHide()\\n\\t\\t\\t\\t\\t)\\n\\t\\t\\t\\t\\t.map((column) => {\\n\\t\\t\\t\\t\\t\\treturn (\\n\\t\\t\\t\\t\\t\\t\\t<DropdownMenuCheckboxItem\\n\\t\\t\\t\\t\\t\\t\\t\\tkey={column.id}\\n\\t\\t\\t\\t\\t\\t\\t\\tclassName=\\\"capitalize\\\"\\n\\t\\t\\t\\t\\t\\t\\t\\tchecked={column.getIsVisible()}\\n\\t\\t\\t\\t\\t\\t\\t\\tonCheckedChange={(value) => column.toggleVisibility(!!value)}\\n\\t\\t\\t\\t\\t\\t\\t>\\n\\t\\t\\t\\t\\t\\t\\t\\t{column.id}\\n\\t\\t\\t\\t\\t\\t\\t</DropdownMenuCheckboxItem>\\n\\t\\t\\t\\t\\t\\t)\\n\\t\\t\\t\\t\\t})}\\n\\t\\t\\t</DropdownMenuContent>\\n\\t\\t</DropdownMenu>\\n\\t)\\n}\\n\"",
  "examples": [
    {
      "source": "data-table-view-options.tsx",
      "code": "\"'use client'\\n\\nimport { DropdownMenuTrigger } from '@radix-ui/react-dropdown-menu'\\nimport { MixerHorizontalIcon } from '@radix-ui/react-icons'\\nimport { Table } from '@tanstack/react-table'\\n\\nimport {\\n\\tButton,\\n\\tDropdownMenu,\\n\\tDropdownMenuCheckboxItem,\\n\\tDropdownMenuContent,\\n\\tDropdownMenuLabel,\\n\\tDropdownMenuSeparator,\\n} from '@/modules/shadcn/components/ui'\\n\\ninterface DataTableViewOptionsProps<TData> {\\n\\ttable: Table<TData>\\n}\\n\\nexport function DataTableViewOptions<TData>({\\n\\ttable,\\n}: DataTableViewOptionsProps<TData>) {\\n\\treturn (\\n\\t\\t<DropdownMenu>\\n\\t\\t\\t<DropdownMenuTrigger asChild>\\n\\t\\t\\t\\t<Button\\n\\t\\t\\t\\t\\tvariant=\\\"outline\\\"\\n\\t\\t\\t\\t\\tsize=\\\"sm\\\"\\n\\t\\t\\t\\t\\tclassName=\\\"ml-auto hidden h-8 lg:flex\\\"\\n\\t\\t\\t\\t>\\n\\t\\t\\t\\t\\t<MixerHorizontalIcon className=\\\"mr-2 h-4 w-4\\\" />\\n\\t\\t\\t\\t\\tView\\n\\t\\t\\t\\t</Button>\\n\\t\\t\\t</DropdownMenuTrigger>\\n\\t\\t\\t<DropdownMenuContent align=\\\"end\\\" className=\\\"w-[150px]\\\">\\n\\t\\t\\t\\t<DropdownMenuLabel>Toggle columns</DropdownMenuLabel>\\n\\t\\t\\t\\t<DropdownMenuSeparator />\\n\\t\\t\\t\\t{table\\n\\t\\t\\t\\t\\t.getAllColumns()\\n\\t\\t\\t\\t\\t.filter(\\n\\t\\t\\t\\t\\t\\t(column) =>\\n\\t\\t\\t\\t\\t\\t\\ttypeof column.accessorFn !== 'undefined' && column.getCanHide()\\n\\t\\t\\t\\t\\t)\\n\\t\\t\\t\\t\\t.map((column) => {\\n\\t\\t\\t\\t\\t\\treturn (\\n\\t\\t\\t\\t\\t\\t\\t<DropdownMenuCheckboxItem\\n\\t\\t\\t\\t\\t\\t\\t\\tkey={column.id}\\n\\t\\t\\t\\t\\t\\t\\t\\tclassName=\\\"capitalize\\\"\\n\\t\\t\\t\\t\\t\\t\\t\\tchecked={column.getIsVisible()}\\n\\t\\t\\t\\t\\t\\t\\t\\tonCheckedChange={(value) => column.toggleVisibility(!!value)}\\n\\t\\t\\t\\t\\t\\t\\t>\\n\\t\\t\\t\\t\\t\\t\\t\\t{column.id}\\n\\t\\t\\t\\t\\t\\t\\t</DropdownMenuCheckboxItem>\\n\\t\\t\\t\\t\\t\\t)\\n\\t\\t\\t\\t\\t})}\\n\\t\\t\\t</DropdownMenuContent>\\n\\t\\t</DropdownMenu>\\n\\t)\\n}\\n\""
    }
  ]
}
,
{
  "name": "data",
  "description": "Description for data component.",
  "usage": "\"import {\\n\\tArrowDownIcon,\\n\\tArrowRightIcon,\\n\\tArrowUpIcon,\\n\\tCheckCircledIcon,\\n\\tCircleIcon,\\n\\tCrossCircledIcon,\\n\\tQuestionMarkCircledIcon,\\n\\tStopwatchIcon,\\n} from '@radix-ui/react-icons'\\n\\nexport const labels = [\\n\\t{\\n\\t\\tvalue: 'bug',\\n\\t\\tlabel: 'Bug',\\n\\t},\\n\\t{\\n\\t\\tvalue: 'feature',\\n\\t\\tlabel: 'Feature',\\n\\t},\\n\\t{\\n\\t\\tvalue: 'documentation',\\n\\t\\tlabel: 'Documentation',\\n\\t},\\n]\\n\\nexport const statuses = [\\n\\t{\\n\\t\\tvalue: 'backlog',\\n\\t\\tlabel: 'Backlog',\\n\\t\\ticon: QuestionMarkCircledIcon,\\n\\t},\\n\\t{\\n\\t\\tvalue: 'todo',\\n\\t\\tlabel: 'Todo',\\n\\t\\ticon: CircleIcon,\\n\\t},\\n\\t{\\n\\t\\tvalue: 'in progress',\\n\\t\\tlabel: 'In Progress',\\n\\t\\ticon: StopwatchIcon,\\n\\t},\\n\\t{\\n\\t\\tvalue: 'done',\\n\\t\\tlabel: 'Done',\\n\\t\\ticon: CheckCircledIcon,\\n\\t},\\n\\t{\\n\\t\\tvalue: 'canceled',\\n\\t\\tlabel: 'Canceled',\\n\\t\\ticon: CrossCircledIcon,\\n\\t},\\n]\\n\\nexport const priorities = [\\n\\t{\\n\\t\\tlabel: 'Low',\\n\\t\\tvalue: 'low',\\n\\t\\ticon: ArrowDownIcon,\\n\\t},\\n\\t{\\n\\t\\tlabel: 'Medium',\\n\\t\\tvalue: 'medium',\\n\\t\\ticon: ArrowRightIcon,\\n\\t},\\n\\t{\\n\\t\\tlabel: 'High',\\n\\t\\tvalue: 'high',\\n\\t\\ticon: ArrowUpIcon,\\n\\t},\\n]\\n\"",
  "examples": [
    {
      "source": "data.tsx",
      "code": "\"import {\\n\\tArrowDownIcon,\\n\\tArrowRightIcon,\\n\\tArrowUpIcon,\\n\\tCheckCircledIcon,\\n\\tCircleIcon,\\n\\tCrossCircledIcon,\\n\\tQuestionMarkCircledIcon,\\n\\tStopwatchIcon,\\n} from '@radix-ui/react-icons'\\n\\nexport const labels = [\\n\\t{\\n\\t\\tvalue: 'bug',\\n\\t\\tlabel: 'Bug',\\n\\t},\\n\\t{\\n\\t\\tvalue: 'feature',\\n\\t\\tlabel: 'Feature',\\n\\t},\\n\\t{\\n\\t\\tvalue: 'documentation',\\n\\t\\tlabel: 'Documentation',\\n\\t},\\n]\\n\\nexport const statuses = [\\n\\t{\\n\\t\\tvalue: 'backlog',\\n\\t\\tlabel: 'Backlog',\\n\\t\\ticon: QuestionMarkCircledIcon,\\n\\t},\\n\\t{\\n\\t\\tvalue: 'todo',\\n\\t\\tlabel: 'Todo',\\n\\t\\ticon: CircleIcon,\\n\\t},\\n\\t{\\n\\t\\tvalue: 'in progress',\\n\\t\\tlabel: 'In Progress',\\n\\t\\ticon: StopwatchIcon,\\n\\t},\\n\\t{\\n\\t\\tvalue: 'done',\\n\\t\\tlabel: 'Done',\\n\\t\\ticon: CheckCircledIcon,\\n\\t},\\n\\t{\\n\\t\\tvalue: 'canceled',\\n\\t\\tlabel: 'Canceled',\\n\\t\\ticon: CrossCircledIcon,\\n\\t},\\n]\\n\\nexport const priorities = [\\n\\t{\\n\\t\\tlabel: 'Low',\\n\\t\\tvalue: 'low',\\n\\t\\ticon: ArrowDownIcon,\\n\\t},\\n\\t{\\n\\t\\tlabel: 'Medium',\\n\\t\\tvalue: 'medium',\\n\\t\\ticon: ArrowRightIcon,\\n\\t},\\n\\t{\\n\\t\\tlabel: 'High',\\n\\t\\tvalue: 'high',\\n\\t\\ticon: ArrowUpIcon,\\n\\t},\\n]\\n\""
    }
  ]
}
,
{
  "name": "command",
  "description": "Description for command component.",
  "usage": "\"'use client'\\n\\nimport * as React from 'react'\\nimport { type DialogProps } from '@radix-ui/react-dialog'\\nimport { MagnifyingGlassIcon } from '@radix-ui/react-icons'\\nimport { Command as CommandPrimitive } from 'cmdk'\\n\\nimport { cn } from '@/lib/utils'\\nimport { Dialog, DialogContent } from '@/modules/shadcn/components/ui'\\n\\nconst Command = React.forwardRef<\\n\\tReact.ElementRef<typeof CommandPrimitive>,\\n\\tReact.ComponentPropsWithoutRef<typeof CommandPrimitive>\\n>(({ className, ...props }, ref) => (\\n\\t<CommandPrimitive\\n\\t\\tref={ref}\\n\\t\\tclassName={cn(\\n\\t\\t\\t'flex h-full w-full flex-col overflow-hidden rounded-md bg-popover text-popover-foreground',\\n\\t\\t\\tclassName\\n\\t\\t)}\\n\\t\\t{...props}\\n\\t/>\\n))\\nCommand.displayName = CommandPrimitive.displayName\\n\\ninterface CommandDialogProps extends DialogProps {}\\n\\nconst CommandDialog = ({ children, ...props }: CommandDialogProps) => {\\n\\treturn (\\n\\t\\t<Dialog {...props}>\\n\\t\\t\\t<DialogContent className=\\\"overflow-hidden p-0\\\">\\n\\t\\t\\t\\t<Command className=\\\"[&_[cmdk-group-heading]]:px-2 [&_[cmdk-group-heading]]:font-medium [&_[cmdk-group-heading]]:text-muted-foreground [&_[cmdk-group]:not([hidden])_~[cmdk-group]]:pt-0 [&_[cmdk-group]]:px-2 [&_[cmdk-input-wrapper]_svg]:h-5 [&_[cmdk-input-wrapper]_svg]:w-5 [&_[cmdk-input]]:h-12 [&_[cmdk-item]]:px-2 [&_[cmdk-item]]:py-3 [&_[cmdk-item]_svg]:h-5 [&_[cmdk-item]_svg]:w-5\\\">\\n\\t\\t\\t\\t\\t{children}\\n\\t\\t\\t\\t</Command>\\n\\t\\t\\t</DialogContent>\\n\\t\\t</Dialog>\\n\\t)\\n}\\n\\nconst CommandInput = React.forwardRef<\\n\\tReact.ElementRef<typeof CommandPrimitive.Input>,\\n\\tReact.ComponentPropsWithoutRef<typeof CommandPrimitive.Input>\\n>(({ className, ...props }, ref) => (\\n\\t<div className=\\\"flex items-center border-b px-3\\\" cmdk-input-wrapper=\\\"\\\">\\n\\t\\t<MagnifyingGlassIcon className=\\\"mr-2 h-4 w-4 shrink-0 opacity-50\\\" />\\n\\t\\t<CommandPrimitive.Input\\n\\t\\t\\tref={ref}\\n\\t\\t\\tclassName={cn(\\n\\t\\t\\t\\t'flex h-10 w-full rounded-md bg-transparent py-3 text-sm outline-none placeholder:text-muted-foreground disabled:cursor-not-allowed disabled:opacity-50',\\n\\t\\t\\t\\tclassName\\n\\t\\t\\t)}\\n\\t\\t\\t{...props}\\n\\t\\t/>\\n\\t</div>\\n))\\n\\nCommandInput.displayName = CommandPrimitive.Input.displayName\\n\\nconst CommandList = React.forwardRef<\\n\\tReact.ElementRef<typeof CommandPrimitive.List>,\\n\\tReact.ComponentPropsWithoutRef<typeof CommandPrimitive.List>\\n>(({ className, ...props }, ref) => (\\n\\t<CommandPrimitive.List\\n\\t\\tref={ref}\\n\\t\\tclassName={cn('max-h-[300px] overflow-y-auto overflow-x-hidden', className)}\\n\\t\\t{...props}\\n\\t/>\\n))\\n\\nCommandList.displayName = CommandPrimitive.List.displayName\\n\\nconst CommandEmpty = React.forwardRef<\\n\\tReact.ElementRef<typeof CommandPrimitive.Empty>,\\n\\tReact.ComponentPropsWithoutRef<typeof CommandPrimitive.Empty>\\n>((props, ref) => (\\n\\t<CommandPrimitive.Empty\\n\\t\\tref={ref}\\n\\t\\tclassName=\\\"py-6 text-center text-sm\\\"\\n\\t\\t{...props}\\n\\t/>\\n))\\n\\nCommandEmpty.displayName = CommandPrimitive.Empty.displayName\\n\\nconst CommandGroup = React.forwardRef<\\n\\tReact.ElementRef<typeof CommandPrimitive.Group>,\\n\\tReact.ComponentPropsWithoutRef<typeof CommandPrimitive.Group>\\n>(({ className, ...props }, ref) => (\\n\\t<CommandPrimitive.Group\\n\\t\\tref={ref}\\n\\t\\tclassName={cn(\\n\\t\\t\\t'overflow-hidden p-1 text-foreground [&_[cmdk-group-heading]]:px-2 [&_[cmdk-group-heading]]:py-1.5 [&_[cmdk-group-heading]]:text-xs [&_[cmdk-group-heading]]:font-medium [&_[cmdk-group-heading]]:text-muted-foreground',\\n\\t\\t\\tclassName\\n\\t\\t)}\\n\\t\\t{...props}\\n\\t/>\\n))\\n\\nCommandGroup.displayName = CommandPrimitive.Group.displayName\\n\\nconst CommandSeparator = React.forwardRef<\\n\\tReact.ElementRef<typeof CommandPrimitive.Separator>,\\n\\tReact.ComponentPropsWithoutRef<typeof CommandPrimitive.Separator>\\n>(({ className, ...props }, ref) => (\\n\\t<CommandPrimitive.Separator\\n\\t\\tref={ref}\\n\\t\\tclassName={cn('-mx-1 h-px bg-border', className)}\\n\\t\\t{...props}\\n\\t/>\\n))\\nCommandSeparator.displayName = CommandPrimitive.Separator.displayName\\n\\nconst CommandItem = React.forwardRef<\\n\\tReact.ElementRef<typeof CommandPrimitive.Item>,\\n\\tReact.ComponentPropsWithoutRef<typeof CommandPrimitive.Item>\\n>(({ className, ...props }, ref) => (\\n\\t<CommandPrimitive.Item\\n\\t\\tref={ref}\\n\\t\\tclassName={cn(\\n\\t\\t\\t'relative flex cursor-default select-none items-center rounded-sm px-2 py-1.5 text-sm outline-none data-[disabled=true]:pointer-events-none data-[selected=true]:bg-accent data-[selected=true]:text-accent-foreground data-[disabled=true]:opacity-50',\\n\\t\\t\\tclassName\\n\\t\\t)}\\n\\t\\t{...props}\\n\\t/>\\n))\\n\\nCommandItem.displayName = CommandPrimitive.Item.displayName\\n\\nconst CommandShortcut = ({\\n\\tclassName,\\n\\t...props\\n}: React.HTMLAttributes<HTMLSpanElement>) => {\\n\\treturn (\\n\\t\\t<span\\n\\t\\t\\tclassName={cn(\\n\\t\\t\\t\\t'ml-auto text-xs tracking-widest text-muted-foreground',\\n\\t\\t\\t\\tclassName\\n\\t\\t\\t)}\\n\\t\\t\\t{...props}\\n\\t\\t/>\\n\\t)\\n}\\nCommandShortcut.displayName = 'CommandShortcut'\\n\\nexport {\\n\\tCommand,\\n\\tCommandDialog,\\n\\tCommandInput,\\n\\tCommandList,\\n\\tCommandEmpty,\\n\\tCommandGroup,\\n\\tCommandItem,\\n\\tCommandShortcut,\\n\\tCommandSeparator,\\n}\\n\"",
  "examples": [
    {
      "source": "command.tsx",
      "code": "\"'use client'\\n\\nimport * as React from 'react'\\nimport { type DialogProps } from '@radix-ui/react-dialog'\\nimport { MagnifyingGlassIcon } from '@radix-ui/react-icons'\\nimport { Command as CommandPrimitive } from 'cmdk'\\n\\nimport { cn } from '@/lib/utils'\\nimport { Dialog, DialogContent } from '@/modules/shadcn/components/ui'\\n\\nconst Command = React.forwardRef<\\n\\tReact.ElementRef<typeof CommandPrimitive>,\\n\\tReact.ComponentPropsWithoutRef<typeof CommandPrimitive>\\n>(({ className, ...props }, ref) => (\\n\\t<CommandPrimitive\\n\\t\\tref={ref}\\n\\t\\tclassName={cn(\\n\\t\\t\\t'flex h-full w-full flex-col overflow-hidden rounded-md bg-popover text-popover-foreground',\\n\\t\\t\\tclassName\\n\\t\\t)}\\n\\t\\t{...props}\\n\\t/>\\n))\\nCommand.displayName = CommandPrimitive.displayName\\n\\ninterface CommandDialogProps extends DialogProps {}\\n\\nconst CommandDialog = ({ children, ...props }: CommandDialogProps) => {\\n\\treturn (\\n\\t\\t<Dialog {...props}>\\n\\t\\t\\t<DialogContent className=\\\"overflow-hidden p-0\\\">\\n\\t\\t\\t\\t<Command className=\\\"[&_[cmdk-group-heading]]:px-2 [&_[cmdk-group-heading]]:font-medium [&_[cmdk-group-heading]]:text-muted-foreground [&_[cmdk-group]:not([hidden])_~[cmdk-group]]:pt-0 [&_[cmdk-group]]:px-2 [&_[cmdk-input-wrapper]_svg]:h-5 [&_[cmdk-input-wrapper]_svg]:w-5 [&_[cmdk-input]]:h-12 [&_[cmdk-item]]:px-2 [&_[cmdk-item]]:py-3 [&_[cmdk-item]_svg]:h-5 [&_[cmdk-item]_svg]:w-5\\\">\\n\\t\\t\\t\\t\\t{children}\\n\\t\\t\\t\\t</Command>\\n\\t\\t\\t</DialogContent>\\n\\t\\t</Dialog>\\n\\t)\\n}\\n\\nconst CommandInput = React.forwardRef<\\n\\tReact.ElementRef<typeof CommandPrimitive.Input>,\\n\\tReact.ComponentPropsWithoutRef<typeof CommandPrimitive.Input>\\n>(({ className, ...props }, ref) => (\\n\\t<div className=\\\"flex items-center border-b px-3\\\" cmdk-input-wrapper=\\\"\\\">\\n\\t\\t<MagnifyingGlassIcon className=\\\"mr-2 h-4 w-4 shrink-0 opacity-50\\\" />\\n\\t\\t<CommandPrimitive.Input\\n\\t\\t\\tref={ref}\\n\\t\\t\\tclassName={cn(\\n\\t\\t\\t\\t'flex h-10 w-full rounded-md bg-transparent py-3 text-sm outline-none placeholder:text-muted-foreground disabled:cursor-not-allowed disabled:opacity-50',\\n\\t\\t\\t\\tclassName\\n\\t\\t\\t)}\\n\\t\\t\\t{...props}\\n\\t\\t/>\\n\\t</div>\\n))\\n\\nCommandInput.displayName = CommandPrimitive.Input.displayName\\n\\nconst CommandList = React.forwardRef<\\n\\tReact.ElementRef<typeof CommandPrimitive.List>,\\n\\tReact.ComponentPropsWithoutRef<typeof CommandPrimitive.List>\\n>(({ className, ...props }, ref) => (\\n\\t<CommandPrimitive.List\\n\\t\\tref={ref}\\n\\t\\tclassName={cn('max-h-[300px] overflow-y-auto overflow-x-hidden', className)}\\n\\t\\t{...props}\\n\\t/>\\n))\\n\\nCommandList.displayName = CommandPrimitive.List.displayName\\n\\nconst CommandEmpty = React.forwardRef<\\n\\tReact.ElementRef<typeof CommandPrimitive.Empty>,\\n\\tReact.ComponentPropsWithoutRef<typeof CommandPrimitive.Empty>\\n>((props, ref) => (\\n\\t<CommandPrimitive.Empty\\n\\t\\tref={ref}\\n\\t\\tclassName=\\\"py-6 text-center text-sm\\\"\\n\\t\\t{...props}\\n\\t/>\\n))\\n\\nCommandEmpty.displayName = CommandPrimitive.Empty.displayName\\n\\nconst CommandGroup = React.forwardRef<\\n\\tReact.ElementRef<typeof CommandPrimitive.Group>,\\n\\tReact.ComponentPropsWithoutRef<typeof CommandPrimitive.Group>\\n>(({ className, ...props }, ref) => (\\n\\t<CommandPrimitive.Group\\n\\t\\tref={ref}\\n\\t\\tclassName={cn(\\n\\t\\t\\t'overflow-hidden p-1 text-foreground [&_[cmdk-group-heading]]:px-2 [&_[cmdk-group-heading]]:py-1.5 [&_[cmdk-group-heading]]:text-xs [&_[cmdk-group-heading]]:font-medium [&_[cmdk-group-heading]]:text-muted-foreground',\\n\\t\\t\\tclassName\\n\\t\\t)}\\n\\t\\t{...props}\\n\\t/>\\n))\\n\\nCommandGroup.displayName = CommandPrimitive.Group.displayName\\n\\nconst CommandSeparator = React.forwardRef<\\n\\tReact.ElementRef<typeof CommandPrimitive.Separator>,\\n\\tReact.ComponentPropsWithoutRef<typeof CommandPrimitive.Separator>\\n>(({ className, ...props }, ref) => (\\n\\t<CommandPrimitive.Separator\\n\\t\\tref={ref}\\n\\t\\tclassName={cn('-mx-1 h-px bg-border', className)}\\n\\t\\t{...props}\\n\\t/>\\n))\\nCommandSeparator.displayName = CommandPrimitive.Separator.displayName\\n\\nconst CommandItem = React.forwardRef<\\n\\tReact.ElementRef<typeof CommandPrimitive.Item>,\\n\\tReact.ComponentPropsWithoutRef<typeof CommandPrimitive.Item>\\n>(({ className, ...props }, ref) => (\\n\\t<CommandPrimitive.Item\\n\\t\\tref={ref}\\n\\t\\tclassName={cn(\\n\\t\\t\\t'relative flex cursor-default select-none items-center rounded-sm px-2 py-1.5 text-sm outline-none data-[disabled=true]:pointer-events-none data-[selected=true]:bg-accent data-[selected=true]:text-accent-foreground data-[disabled=true]:opacity-50',\\n\\t\\t\\tclassName\\n\\t\\t)}\\n\\t\\t{...props}\\n\\t/>\\n))\\n\\nCommandItem.displayName = CommandPrimitive.Item.displayName\\n\\nconst CommandShortcut = ({\\n\\tclassName,\\n\\t...props\\n}: React.HTMLAttributes<HTMLSpanElement>) => {\\n\\treturn (\\n\\t\\t<span\\n\\t\\t\\tclassName={cn(\\n\\t\\t\\t\\t'ml-auto text-xs tracking-widest text-muted-foreground',\\n\\t\\t\\t\\tclassName\\n\\t\\t\\t)}\\n\\t\\t\\t{...props}\\n\\t\\t/>\\n\\t)\\n}\\nCommandShortcut.displayName = 'CommandShortcut'\\n\\nexport {\\n\\tCommand,\\n\\tCommandDialog,\\n\\tCommandInput,\\n\\tCommandList,\\n\\tCommandEmpty,\\n\\tCommandGroup,\\n\\tCommandItem,\\n\\tCommandShortcut,\\n\\tCommandSeparator,\\n}\\n\""
    }
  ]
}
,
{
  "name": "data-table-pagination",
  "description": "Description for data-table-pagination component.",
  "usage": "\"import {\\n\\tChevronLeftIcon,\\n\\tChevronRightIcon,\\n\\tDoubleArrowLeftIcon,\\n\\tDoubleArrowRightIcon,\\n} from '@radix-ui/react-icons'\\nimport { Table } from '@tanstack/react-table'\\n\\nimport {\\n\\tButton,\\n\\tSelect,\\n\\tSelectContent,\\n\\tSelectItem,\\n\\tSelectTrigger,\\n\\tSelectValue,\\n} from '@/modules/shadcn/components/ui'\\n\\ninterface DataTablePaginationProps<TData> {\\n\\ttable: Table<TData>\\n}\\n\\nexport function DataTablePagination<TData>({\\n\\ttable,\\n}: DataTablePaginationProps<TData>) {\\n\\treturn (\\n\\t\\t<div className=\\\"flex items-center justify-between px-2\\\">\\n\\t\\t\\t<div className=\\\"flex-1 text-sm text-muted-foreground\\\">\\n\\t\\t\\t\\t{/* {table.getFilteredSelectedRowModel().rows.length} of{' '}\\n\\t\\t\\t\\t selected. */}\\n\\t\\t\\t\\t{table.getFilteredRowModel().rows.length} row(s)\\n\\t\\t\\t</div>\\n\\t\\t\\t<div className=\\\"flex items-center space-x-6 lg:space-x-8\\\">\\n\\t\\t\\t\\t<div className=\\\"flex items-center space-x-2\\\">\\n\\t\\t\\t\\t\\t<p className=\\\"text-sm font-medium\\\">Rows per page</p>\\n\\t\\t\\t\\t\\t<Select\\n\\t\\t\\t\\t\\t\\tvalue={`${table.getState().pagination.pageSize}`}\\n\\t\\t\\t\\t\\t\\tonValueChange={(value) => {\\n\\t\\t\\t\\t\\t\\t\\ttable.setPageSize(Number(value))\\n\\t\\t\\t\\t\\t\\t}}\\n\\t\\t\\t\\t\\t>\\n\\t\\t\\t\\t\\t\\t<SelectTrigger className=\\\"h-8 w-[70px]\\\">\\n\\t\\t\\t\\t\\t\\t\\t<SelectValue placeholder={table.getState().pagination.pageSize} />\\n\\t\\t\\t\\t\\t\\t</SelectTrigger>\\n\\t\\t\\t\\t\\t\\t<SelectContent side=\\\"top\\\">\\n\\t\\t\\t\\t\\t\\t\\t{[10, 20, 30, 40, 50].map((pageSize) => (\\n\\t\\t\\t\\t\\t\\t\\t\\t<SelectItem key={pageSize} value={`${pageSize}`}>\\n\\t\\t\\t\\t\\t\\t\\t\\t\\t{pageSize}\\n\\t\\t\\t\\t\\t\\t\\t\\t</SelectItem>\\n\\t\\t\\t\\t\\t\\t\\t))}\\n\\t\\t\\t\\t\\t\\t</SelectContent>\\n\\t\\t\\t\\t\\t</Select>\\n\\t\\t\\t\\t</div>\\n\\t\\t\\t\\t<div className=\\\"flex w-[100px] items-center justify-center text-sm font-medium\\\">\\n\\t\\t\\t\\t\\tPage {table.getState().pagination.pageIndex + 1} of{' '}\\n\\t\\t\\t\\t\\t{table.getPageCount()}\\n\\t\\t\\t\\t</div>\\n\\t\\t\\t\\t<div className=\\\"flex items-center space-x-2\\\">\\n\\t\\t\\t\\t\\t<Button\\n\\t\\t\\t\\t\\t\\tvariant=\\\"outline\\\"\\n\\t\\t\\t\\t\\t\\tclassName=\\\"hidden h-8 w-8 p-0 lg:flex\\\"\\n\\t\\t\\t\\t\\t\\tonClick={() => table.setPageIndex(0)}\\n\\t\\t\\t\\t\\t\\tdisabled={!table.getCanPreviousPage()}\\n\\t\\t\\t\\t\\t>\\n\\t\\t\\t\\t\\t\\t<span className=\\\"sr-only\\\">Go to first page</span>\\n\\t\\t\\t\\t\\t\\t<DoubleArrowLeftIcon className=\\\"h-4 w-4\\\" />\\n\\t\\t\\t\\t\\t</Button>\\n\\t\\t\\t\\t\\t<Button\\n\\t\\t\\t\\t\\t\\tvariant=\\\"outline\\\"\\n\\t\\t\\t\\t\\t\\tclassName=\\\"h-8 w-8 p-0\\\"\\n\\t\\t\\t\\t\\t\\tonClick={() => table.previousPage()}\\n\\t\\t\\t\\t\\t\\tdisabled={!table.getCanPreviousPage()}\\n\\t\\t\\t\\t\\t>\\n\\t\\t\\t\\t\\t\\t<span className=\\\"sr-only\\\">Go to previous page</span>\\n\\t\\t\\t\\t\\t\\t<ChevronLeftIcon className=\\\"h-4 w-4\\\" />\\n\\t\\t\\t\\t\\t</Button>\\n\\t\\t\\t\\t\\t<Button\\n\\t\\t\\t\\t\\t\\tvariant=\\\"outline\\\"\\n\\t\\t\\t\\t\\t\\tclassName=\\\"h-8 w-8 p-0\\\"\\n\\t\\t\\t\\t\\t\\tonClick={() => table.nextPage()}\\n\\t\\t\\t\\t\\t\\tdisabled={!table.getCanNextPage()}\\n\\t\\t\\t\\t\\t>\\n\\t\\t\\t\\t\\t\\t<span className=\\\"sr-only\\\">Go to next page</span>\\n\\t\\t\\t\\t\\t\\t<ChevronRightIcon className=\\\"h-4 w-4\\\" />\\n\\t\\t\\t\\t\\t</Button>\\n\\t\\t\\t\\t\\t<Button\\n\\t\\t\\t\\t\\t\\tvariant=\\\"outline\\\"\\n\\t\\t\\t\\t\\t\\tclassName=\\\"hidden h-8 w-8 p-0 lg:flex\\\"\\n\\t\\t\\t\\t\\t\\tonClick={() => table.setPageIndex(table.getPageCount() - 1)}\\n\\t\\t\\t\\t\\t\\tdisabled={!table.getCanNextPage()}\\n\\t\\t\\t\\t\\t>\\n\\t\\t\\t\\t\\t\\t<span className=\\\"sr-only\\\">Go to last page</span>\\n\\t\\t\\t\\t\\t\\t<DoubleArrowRightIcon className=\\\"h-4 w-4\\\" />\\n\\t\\t\\t\\t\\t</Button>\\n\\t\\t\\t\\t</div>\\n\\t\\t\\t</div>\\n\\t\\t</div>\\n\\t)\\n}\\n\"",
  "examples": [
    {
      "source": "data-table-pagination.tsx",
      "code": "\"import {\\n\\tChevronLeftIcon,\\n\\tChevronRightIcon,\\n\\tDoubleArrowLeftIcon,\\n\\tDoubleArrowRightIcon,\\n} from '@radix-ui/react-icons'\\nimport { Table } from '@tanstack/react-table'\\n\\nimport {\\n\\tButton,\\n\\tSelect,\\n\\tSelectContent,\\n\\tSelectItem,\\n\\tSelectTrigger,\\n\\tSelectValue,\\n} from '@/modules/shadcn/components/ui'\\n\\ninterface DataTablePaginationProps<TData> {\\n\\ttable: Table<TData>\\n}\\n\\nexport function DataTablePagination<TData>({\\n\\ttable,\\n}: DataTablePaginationProps<TData>) {\\n\\treturn (\\n\\t\\t<div className=\\\"flex items-center justify-between px-2\\\">\\n\\t\\t\\t<div className=\\\"flex-1 text-sm text-muted-foreground\\\">\\n\\t\\t\\t\\t{/* {table.getFilteredSelectedRowModel().rows.length} of{' '}\\n\\t\\t\\t\\t selected. */}\\n\\t\\t\\t\\t{table.getFilteredRowModel().rows.length} row(s)\\n\\t\\t\\t</div>\\n\\t\\t\\t<div className=\\\"flex items-center space-x-6 lg:space-x-8\\\">\\n\\t\\t\\t\\t<div className=\\\"flex items-center space-x-2\\\">\\n\\t\\t\\t\\t\\t<p className=\\\"text-sm font-medium\\\">Rows per page</p>\\n\\t\\t\\t\\t\\t<Select\\n\\t\\t\\t\\t\\t\\tvalue={`${table.getState().pagination.pageSize}`}\\n\\t\\t\\t\\t\\t\\tonValueChange={(value) => {\\n\\t\\t\\t\\t\\t\\t\\ttable.setPageSize(Number(value))\\n\\t\\t\\t\\t\\t\\t}}\\n\\t\\t\\t\\t\\t>\\n\\t\\t\\t\\t\\t\\t<SelectTrigger className=\\\"h-8 w-[70px]\\\">\\n\\t\\t\\t\\t\\t\\t\\t<SelectValue placeholder={table.getState().pagination.pageSize} />\\n\\t\\t\\t\\t\\t\\t</SelectTrigger>\\n\\t\\t\\t\\t\\t\\t<SelectContent side=\\\"top\\\">\\n\\t\\t\\t\\t\\t\\t\\t{[10, 20, 30, 40, 50].map((pageSize) => (\\n\\t\\t\\t\\t\\t\\t\\t\\t<SelectItem key={pageSize} value={`${pageSize}`}>\\n\\t\\t\\t\\t\\t\\t\\t\\t\\t{pageSize}\\n\\t\\t\\t\\t\\t\\t\\t\\t</SelectItem>\\n\\t\\t\\t\\t\\t\\t\\t))}\\n\\t\\t\\t\\t\\t\\t</SelectContent>\\n\\t\\t\\t\\t\\t</Select>\\n\\t\\t\\t\\t</div>\\n\\t\\t\\t\\t<div className=\\\"flex w-[100px] items-center justify-center text-sm font-medium\\\">\\n\\t\\t\\t\\t\\tPage {table.getState().pagination.pageIndex + 1} of{' '}\\n\\t\\t\\t\\t\\t{table.getPageCount()}\\n\\t\\t\\t\\t</div>\\n\\t\\t\\t\\t<div className=\\\"flex items-center space-x-2\\\">\\n\\t\\t\\t\\t\\t<Button\\n\\t\\t\\t\\t\\t\\tvariant=\\\"outline\\\"\\n\\t\\t\\t\\t\\t\\tclassName=\\\"hidden h-8 w-8 p-0 lg:flex\\\"\\n\\t\\t\\t\\t\\t\\tonClick={() => table.setPageIndex(0)}\\n\\t\\t\\t\\t\\t\\tdisabled={!table.getCanPreviousPage()}\\n\\t\\t\\t\\t\\t>\\n\\t\\t\\t\\t\\t\\t<span className=\\\"sr-only\\\">Go to first page</span>\\n\\t\\t\\t\\t\\t\\t<DoubleArrowLeftIcon className=\\\"h-4 w-4\\\" />\\n\\t\\t\\t\\t\\t</Button>\\n\\t\\t\\t\\t\\t<Button\\n\\t\\t\\t\\t\\t\\tvariant=\\\"outline\\\"\\n\\t\\t\\t\\t\\t\\tclassName=\\\"h-8 w-8 p-0\\\"\\n\\t\\t\\t\\t\\t\\tonClick={() => table.previousPage()}\\n\\t\\t\\t\\t\\t\\tdisabled={!table.getCanPreviousPage()}\\n\\t\\t\\t\\t\\t>\\n\\t\\t\\t\\t\\t\\t<span className=\\\"sr-only\\\">Go to previous page</span>\\n\\t\\t\\t\\t\\t\\t<ChevronLeftIcon className=\\\"h-4 w-4\\\" />\\n\\t\\t\\t\\t\\t</Button>\\n\\t\\t\\t\\t\\t<Button\\n\\t\\t\\t\\t\\t\\tvariant=\\\"outline\\\"\\n\\t\\t\\t\\t\\t\\tclassName=\\\"h-8 w-8 p-0\\\"\\n\\t\\t\\t\\t\\t\\tonClick={() => table.nextPage()}\\n\\t\\t\\t\\t\\t\\tdisabled={!table.getCanNextPage()}\\n\\t\\t\\t\\t\\t>\\n\\t\\t\\t\\t\\t\\t<span className=\\\"sr-only\\\">Go to next page</span>\\n\\t\\t\\t\\t\\t\\t<ChevronRightIcon className=\\\"h-4 w-4\\\" />\\n\\t\\t\\t\\t\\t</Button>\\n\\t\\t\\t\\t\\t<Button\\n\\t\\t\\t\\t\\t\\tvariant=\\\"outline\\\"\\n\\t\\t\\t\\t\\t\\tclassName=\\\"hidden h-8 w-8 p-0 lg:flex\\\"\\n\\t\\t\\t\\t\\t\\tonClick={() => table.setPageIndex(table.getPageCount() - 1)}\\n\\t\\t\\t\\t\\t\\tdisabled={!table.getCanNextPage()}\\n\\t\\t\\t\\t\\t>\\n\\t\\t\\t\\t\\t\\t<span className=\\\"sr-only\\\">Go to last page</span>\\n\\t\\t\\t\\t\\t\\t<DoubleArrowRightIcon className=\\\"h-4 w-4\\\" />\\n\\t\\t\\t\\t\\t</Button>\\n\\t\\t\\t\\t</div>\\n\\t\\t\\t</div>\\n\\t\\t</div>\\n\\t)\\n}\\n\""
    }
  ]
}
,
{
  "name": "data-table-toolbar",
  "description": "Description for data-table-toolbar component.",
  "usage": "\"'use client'\\n\\n// import { Cross2Icon } from '@radix-ui/react-icons'\\nimport { Table } from '@tanstack/react-table'\\n\\n// import { Button } from '@/modules/shadcn/components/ui'\\n\\n// import { priorities, statuses } from './data'\\nimport { DataTableViewOptions } from './data-table-view-options'\\n// import { DataTableFacetedFilter } from './data-table-faceted-filter'\\n\\ninterface DataTableToolbarProps<TData> {\\n\\ttable: Table<TData>\\n}\\n\\nexport function DataTableToolbar<TData>({\\n\\ttable,\\n}: DataTableToolbarProps<TData>) {\\n\\t// const isFiltered = table.getState().columnFilters.length > 0\\n\\n\\treturn (\\n\\t\\t<div className=\\\"flex items-center justify-between\\\">\\n\\t\\t\\t<div className=\\\"flex flex-1 items-center space-x-2\\\">\\n\\t\\t\\t\\t<div className=\\\"text-xl font-semibold\\\">Threads List</div>\\n\\t\\t\\t\\t{/* <Input\\n\\t\\t\\t\\t\\tplaceholder=\\\"Filter tasks...\\\"\\n\\t\\t\\t\\t\\tvalue={(table.getColumn('title')?.getFilterValue() as string) ?? ''}\\n\\t\\t\\t\\t\\tonChange={(event) =>\\n\\t\\t\\t\\t\\t\\ttable.getColumn('title')?.setFilterValue(event.target.value)\\n\\t\\t\\t\\t\\t}\\n\\t\\t\\t\\t\\tclassName=\\\"h-8 w-[150px] lg:w-[250px]\\\"\\n\\t\\t\\t\\t/> */}\\n\\t\\t\\t\\t{/* {table.getColumn('status') && (\\n\\t\\t\\t\\t\\t<DataTableFacetedFilter\\n\\t\\t\\t\\t\\t\\tcolumn={table.getColumn('status')}\\n\\t\\t\\t\\t\\t\\ttitle=\\\"Status\\\"\\n\\t\\t\\t\\t\\t\\toptions={statuses}\\n\\t\\t\\t\\t\\t/>\\n\\t\\t\\t\\t)}\\n\\t\\t\\t\\t{table.getColumn('priority') && (\\n\\t\\t\\t\\t\\t<DataTableFacetedFilter\\n\\t\\t\\t\\t\\t\\tcolumn={table.getColumn('priority')}\\n\\t\\t\\t\\t\\t\\ttitle=\\\"Priority\\\"\\n\\t\\t\\t\\t\\t\\toptions={priorities}\\n\\t\\t\\t\\t\\t/>\\n\\t\\t\\t\\t)} */}\\n\\t\\t\\t\\t{/* {isFiltered && (\\n\\t\\t\\t\\t\\t<Button\\n\\t\\t\\t\\t\\t\\tvariant=\\\"ghost\\\"\\n\\t\\t\\t\\t\\t\\tonClick={() => table.resetColumnFilters()}\\n\\t\\t\\t\\t\\t\\tclassName=\\\"h-8 px-2 lg:px-3\\\"\\n\\t\\t\\t\\t\\t>\\n\\t\\t\\t\\t\\t\\tReset\\n\\t\\t\\t\\t\\t\\t<Cross2Icon className=\\\"ml-2 h-4 w-4\\\" />\\n\\t\\t\\t\\t\\t</Button>\\n\\t\\t\\t\\t)} */}\\n\\t\\t\\t</div>\\n\\t\\t\\t<DataTableViewOptions table={table} />\\n\\t\\t</div>\\n\\t)\\n}\\n\"",
  "examples": [
    {
      "source": "data-table-toolbar.tsx",
      "code": "\"'use client'\\n\\n// import { Cross2Icon } from '@radix-ui/react-icons'\\nimport { Table } from '@tanstack/react-table'\\n\\n// import { Button } from '@/modules/shadcn/components/ui'\\n\\n// import { priorities, statuses } from './data'\\nimport { DataTableViewOptions } from './data-table-view-options'\\n// import { DataTableFacetedFilter } from './data-table-faceted-filter'\\n\\ninterface DataTableToolbarProps<TData> {\\n\\ttable: Table<TData>\\n}\\n\\nexport function DataTableToolbar<TData>({\\n\\ttable,\\n}: DataTableToolbarProps<TData>) {\\n\\t// const isFiltered = table.getState().columnFilters.length > 0\\n\\n\\treturn (\\n\\t\\t<div className=\\\"flex items-center justify-between\\\">\\n\\t\\t\\t<div className=\\\"flex flex-1 items-center space-x-2\\\">\\n\\t\\t\\t\\t<div className=\\\"text-xl font-semibold\\\">Threads List</div>\\n\\t\\t\\t\\t{/* <Input\\n\\t\\t\\t\\t\\tplaceholder=\\\"Filter tasks...\\\"\\n\\t\\t\\t\\t\\tvalue={(table.getColumn('title')?.getFilterValue() as string) ?? ''}\\n\\t\\t\\t\\t\\tonChange={(event) =>\\n\\t\\t\\t\\t\\t\\ttable.getColumn('title')?.setFilterValue(event.target.value)\\n\\t\\t\\t\\t\\t}\\n\\t\\t\\t\\t\\tclassName=\\\"h-8 w-[150px] lg:w-[250px]\\\"\\n\\t\\t\\t\\t/> */}\\n\\t\\t\\t\\t{/* {table.getColumn('status') && (\\n\\t\\t\\t\\t\\t<DataTableFacetedFilter\\n\\t\\t\\t\\t\\t\\tcolumn={table.getColumn('status')}\\n\\t\\t\\t\\t\\t\\ttitle=\\\"Status\\\"\\n\\t\\t\\t\\t\\t\\toptions={statuses}\\n\\t\\t\\t\\t\\t/>\\n\\t\\t\\t\\t)}\\n\\t\\t\\t\\t{table.getColumn('priority') && (\\n\\t\\t\\t\\t\\t<DataTableFacetedFilter\\n\\t\\t\\t\\t\\t\\tcolumn={table.getColumn('priority')}\\n\\t\\t\\t\\t\\t\\ttitle=\\\"Priority\\\"\\n\\t\\t\\t\\t\\t\\toptions={priorities}\\n\\t\\t\\t\\t\\t/>\\n\\t\\t\\t\\t)} */}\\n\\t\\t\\t\\t{/* {isFiltered && (\\n\\t\\t\\t\\t\\t<Button\\n\\t\\t\\t\\t\\t\\tvariant=\\\"ghost\\\"\\n\\t\\t\\t\\t\\t\\tonClick={() => table.resetColumnFilters()}\\n\\t\\t\\t\\t\\t\\tclassName=\\\"h-8 px-2 lg:px-3\\\"\\n\\t\\t\\t\\t\\t>\\n\\t\\t\\t\\t\\t\\tReset\\n\\t\\t\\t\\t\\t\\t<Cross2Icon className=\\\"ml-2 h-4 w-4\\\" />\\n\\t\\t\\t\\t\\t</Button>\\n\\t\\t\\t\\t)} */}\\n\\t\\t\\t</div>\\n\\t\\t\\t<DataTableViewOptions table={table} />\\n\\t\\t</div>\\n\\t)\\n}\\n\""
    }
  ]
}
,
{
  "name": "badge",
  "description": "Description for badge component.",
  "usage": "\"import * as React from 'react'\\nimport { cva, type VariantProps } from 'class-variance-authority'\\n\\nimport { cn } from '@/lib/utils'\\n\\nconst badgeVariants = cva(\\n\\t'inline-flex items-center rounded-md border px-2.5 py-0.5 text-xs font-semibold transition-colors focus:outline-none focus:ring-2 focus:ring-ring focus:ring-offset-2',\\n\\t{\\n\\t\\tvariants: {\\n\\t\\t\\tvariant: {\\n\\t\\t\\t\\tdefault:\\n\\t\\t\\t\\t\\t'border-transparent bg-primary text-primary-foreground shadow hover:bg-primary/80',\\n\\t\\t\\t\\tsecondary:\\n\\t\\t\\t\\t\\t'border-transparent bg-secondary text-secondary-foreground hover:bg-secondary/80',\\n\\t\\t\\t\\tdestructive:\\n\\t\\t\\t\\t\\t'border-transparent bg-destructive text-destructive-foreground shadow hover:bg-destructive/80',\\n\\t\\t\\t\\toutline: 'text-foreground',\\n\\t\\t\\t},\\n\\t\\t},\\n\\t\\tdefaultVariants: {\\n\\t\\t\\tvariant: 'default',\\n\\t\\t},\\n\\t}\\n)\\n\\nexport interface BadgeProps\\n\\textends React.HTMLAttributes<HTMLDivElement>,\\n\\t\\tVariantProps<typeof badgeVariants> {}\\n\\nfunction Badge({ className, variant, ...props }: BadgeProps) {\\n\\treturn (\\n\\t\\t<div className={cn(badgeVariants({ variant }), className)} {...props} />\\n\\t)\\n}\\n\\nexport { Badge, badgeVariants }\\n\"",
  "examples": [
    {
      "source": "badge.tsx",
      "code": "\"import * as React from 'react'\\nimport { cva, type VariantProps } from 'class-variance-authority'\\n\\nimport { cn } from '@/lib/utils'\\n\\nconst badgeVariants = cva(\\n\\t'inline-flex items-center rounded-md border px-2.5 py-0.5 text-xs font-semibold transition-colors focus:outline-none focus:ring-2 focus:ring-ring focus:ring-offset-2',\\n\\t{\\n\\t\\tvariants: {\\n\\t\\t\\tvariant: {\\n\\t\\t\\t\\tdefault:\\n\\t\\t\\t\\t\\t'border-transparent bg-primary text-primary-foreground shadow hover:bg-primary/80',\\n\\t\\t\\t\\tsecondary:\\n\\t\\t\\t\\t\\t'border-transparent bg-secondary text-secondary-foreground hover:bg-secondary/80',\\n\\t\\t\\t\\tdestructive:\\n\\t\\t\\t\\t\\t'border-transparent bg-destructive text-destructive-foreground shadow hover:bg-destructive/80',\\n\\t\\t\\t\\toutline: 'text-foreground',\\n\\t\\t\\t},\\n\\t\\t},\\n\\t\\tdefaultVariants: {\\n\\t\\t\\tvariant: 'default',\\n\\t\\t},\\n\\t}\\n)\\n\\nexport interface BadgeProps\\n\\textends React.HTMLAttributes<HTMLDivElement>,\\n\\t\\tVariantProps<typeof badgeVariants> {}\\n\\nfunction Badge({ className, variant, ...props }: BadgeProps) {\\n\\treturn (\\n\\t\\t<div className={cn(badgeVariants({ variant }), className)} {...props} />\\n\\t)\\n}\\n\\nexport { Badge, badgeVariants }\\n\""
    }
  ]
}
,
{
  "name": "table",
  "description": "Description for table component.",
  "usage": "\"import * as React from 'react'\\n\\nimport { cn } from '@/lib/utils'\\n\\nconst Table = React.forwardRef<\\n\\tHTMLTableElement,\\n\\tReact.HTMLAttributes<HTMLTableElement>\\n>(({ className, ...props }, ref) => (\\n\\t<div className=\\\"relative w-full overflow-auto\\\">\\n\\t\\t<table\\n\\t\\t\\tref={ref}\\n\\t\\t\\tclassName={cn('w-full caption-bottom text-sm', className)}\\n\\t\\t\\t{...props}\\n\\t\\t/>\\n\\t</div>\\n))\\nTable.displayName = 'Table'\\n\\nconst TableHeader = React.forwardRef<\\n\\tHTMLTableSectionElement,\\n\\tReact.HTMLAttributes<HTMLTableSectionElement>\\n>(({ className, ...props }, ref) => (\\n\\t<thead ref={ref} className={cn('[&_tr]:border-b', className)} {...props} />\\n))\\nTableHeader.displayName = 'TableHeader'\\n\\nconst TableBody = React.forwardRef<\\n\\tHTMLTableSectionElement,\\n\\tReact.HTMLAttributes<HTMLTableSectionElement>\\n>(({ className, ...props }, ref) => (\\n\\t<tbody\\n\\t\\tref={ref}\\n\\t\\tclassName={cn('[&_tr:last-child]:border-0', className)}\\n\\t\\t{...props}\\n\\t/>\\n))\\nTableBody.displayName = 'TableBody'\\n\\nconst TableFooter = React.forwardRef<\\n\\tHTMLTableSectionElement,\\n\\tReact.HTMLAttributes<HTMLTableSectionElement>\\n>(({ className, ...props }, ref) => (\\n\\t<tfoot\\n\\t\\tref={ref}\\n\\t\\tclassName={cn(\\n\\t\\t\\t'border-t bg-muted/50 font-medium [&>tr]:last:border-b-0',\\n\\t\\t\\tclassName\\n\\t\\t)}\\n\\t\\t{...props}\\n\\t/>\\n))\\nTableFooter.displayName = 'TableFooter'\\n\\nconst TableRow = React.forwardRef<\\n\\tHTMLTableRowElement,\\n\\tReact.HTMLAttributes<HTMLTableRowElement>\\n>(({ className, ...props }, ref) => (\\n\\t<tr\\n\\t\\tref={ref}\\n\\t\\tclassName={cn(\\n\\t\\t\\t'border-b transition-colors hover:bg-muted/50 data-[state=selected]:bg-muted',\\n\\t\\t\\tclassName\\n\\t\\t)}\\n\\t\\t{...props}\\n\\t/>\\n))\\nTableRow.displayName = 'TableRow'\\n\\nconst TableHead = React.forwardRef<\\n\\tHTMLTableCellElement,\\n\\tReact.ThHTMLAttributes<HTMLTableCellElement>\\n>(({ className, ...props }, ref) => (\\n\\t<th\\n\\t\\tref={ref}\\n\\t\\tclassName={cn(\\n\\t\\t\\t'h-12 px-4 py-2 text-left align-middle font-medium text-muted-foreground [&:has([role=checkbox])]:pr-0',\\n\\t\\t\\tclassName\\n\\t\\t)}\\n\\t\\t{...props}\\n\\t/>\\n))\\nTableHead.displayName = 'TableHead'\\n\\nconst TableCell = React.forwardRef<\\n\\tHTMLTableCellElement,\\n\\tReact.TdHTMLAttributes<HTMLTableCellElement>\\n>(({ className, ...props }, ref) => (\\n\\t<td\\n\\t\\tref={ref}\\n\\t\\tclassName={cn(\\n\\t\\t\\t'px-4 py-2 align-middle [&:has([role=checkbox])]:pr-0',\\n\\t\\t\\tclassName\\n\\t\\t)}\\n\\t\\t{...props}\\n\\t/>\\n))\\nTableCell.displayName = 'TableCell'\\n\\nconst TableCaption = React.forwardRef<\\n\\tHTMLTableCaptionElement,\\n\\tReact.HTMLAttributes<HTMLTableCaptionElement>\\n>(({ className, ...props }, ref) => (\\n\\t<caption\\n\\t\\tref={ref}\\n\\t\\tclassName={cn('mt-4 text-sm text-muted-foreground', className)}\\n\\t\\t{...props}\\n\\t/>\\n))\\nTableCaption.displayName = 'TableCaption'\\n\\nexport {\\n\\tTable,\\n\\tTableHeader,\\n\\tTableBody,\\n\\tTableFooter,\\n\\tTableHead,\\n\\tTableRow,\\n\\tTableCell,\\n\\tTableCaption,\\n}\\n\"",
  "examples": [
    {
      "source": "table.tsx",
      "code": "\"import * as React from 'react'\\n\\nimport { cn } from '@/lib/utils'\\n\\nconst Table = React.forwardRef<\\n\\tHTMLTableElement,\\n\\tReact.HTMLAttributes<HTMLTableElement>\\n>(({ className, ...props }, ref) => (\\n\\t<div className=\\\"relative w-full overflow-auto\\\">\\n\\t\\t<table\\n\\t\\t\\tref={ref}\\n\\t\\t\\tclassName={cn('w-full caption-bottom text-sm', className)}\\n\\t\\t\\t{...props}\\n\\t\\t/>\\n\\t</div>\\n))\\nTable.displayName = 'Table'\\n\\nconst TableHeader = React.forwardRef<\\n\\tHTMLTableSectionElement,\\n\\tReact.HTMLAttributes<HTMLTableSectionElement>\\n>(({ className, ...props }, ref) => (\\n\\t<thead ref={ref} className={cn('[&_tr]:border-b', className)} {...props} />\\n))\\nTableHeader.displayName = 'TableHeader'\\n\\nconst TableBody = React.forwardRef<\\n\\tHTMLTableSectionElement,\\n\\tReact.HTMLAttributes<HTMLTableSectionElement>\\n>(({ className, ...props }, ref) => (\\n\\t<tbody\\n\\t\\tref={ref}\\n\\t\\tclassName={cn('[&_tr:last-child]:border-0', className)}\\n\\t\\t{...props}\\n\\t/>\\n))\\nTableBody.displayName = 'TableBody'\\n\\nconst TableFooter = React.forwardRef<\\n\\tHTMLTableSectionElement,\\n\\tReact.HTMLAttributes<HTMLTableSectionElement>\\n>(({ className, ...props }, ref) => (\\n\\t<tfoot\\n\\t\\tref={ref}\\n\\t\\tclassName={cn(\\n\\t\\t\\t'border-t bg-muted/50 font-medium [&>tr]:last:border-b-0',\\n\\t\\t\\tclassName\\n\\t\\t)}\\n\\t\\t{...props}\\n\\t/>\\n))\\nTableFooter.displayName = 'TableFooter'\\n\\nconst TableRow = React.forwardRef<\\n\\tHTMLTableRowElement,\\n\\tReact.HTMLAttributes<HTMLTableRowElement>\\n>(({ className, ...props }, ref) => (\\n\\t<tr\\n\\t\\tref={ref}\\n\\t\\tclassName={cn(\\n\\t\\t\\t'border-b transition-colors hover:bg-muted/50 data-[state=selected]:bg-muted',\\n\\t\\t\\tclassName\\n\\t\\t)}\\n\\t\\t{...props}\\n\\t/>\\n))\\nTableRow.displayName = 'TableRow'\\n\\nconst TableHead = React.forwardRef<\\n\\tHTMLTableCellElement,\\n\\tReact.ThHTMLAttributes<HTMLTableCellElement>\\n>(({ className, ...props }, ref) => (\\n\\t<th\\n\\t\\tref={ref}\\n\\t\\tclassName={cn(\\n\\t\\t\\t'h-12 px-4 py-2 text-left align-middle font-medium text-muted-foreground [&:has([role=checkbox])]:pr-0',\\n\\t\\t\\tclassName\\n\\t\\t)}\\n\\t\\t{...props}\\n\\t/>\\n))\\nTableHead.displayName = 'TableHead'\\n\\nconst TableCell = React.forwardRef<\\n\\tHTMLTableCellElement,\\n\\tReact.TdHTMLAttributes<HTMLTableCellElement>\\n>(({ className, ...props }, ref) => (\\n\\t<td\\n\\t\\tref={ref}\\n\\t\\tclassName={cn(\\n\\t\\t\\t'px-4 py-2 align-middle [&:has([role=checkbox])]:pr-0',\\n\\t\\t\\tclassName\\n\\t\\t)}\\n\\t\\t{...props}\\n\\t/>\\n))\\nTableCell.displayName = 'TableCell'\\n\\nconst TableCaption = React.forwardRef<\\n\\tHTMLTableCaptionElement,\\n\\tReact.HTMLAttributes<HTMLTableCaptionElement>\\n>(({ className, ...props }, ref) => (\\n\\t<caption\\n\\t\\tref={ref}\\n\\t\\tclassName={cn('mt-4 text-sm text-muted-foreground', className)}\\n\\t\\t{...props}\\n\\t/>\\n))\\nTableCaption.displayName = 'TableCaption'\\n\\nexport {\\n\\tTable,\\n\\tTableHeader,\\n\\tTableBody,\\n\\tTableFooter,\\n\\tTableHead,\\n\\tTableRow,\\n\\tTableCell,\\n\\tTableCaption,\\n}\\n\""
    }
  ]
}
,
{
  "name": "button",
  "description": "Description for button component.",
  "usage": "\"import { ButtonHTMLAttributes, forwardRef } from 'react'\\nimport { Slot } from '@radix-ui/react-slot'\\nimport { cva, type VariantProps } from 'class-variance-authority'\\n\\nimport { cn } from '@/modules/shadcn/lib/utils'\\n\\nconst buttonVariants = cva(\\n\\t'inline-flex items-center justify-center whitespace-nowrap rounded-md text-sm font-medium transition-colors focus-visible:outline-none focus-visible:ring-1 focus-visible:ring-ring disabled:pointer-events-none disabled:opacity-50',\\n\\t{\\n\\t\\tvariants: {\\n\\t\\t\\tvariant: {\\n\\t\\t\\t\\tdefault:\\n\\t\\t\\t\\t\\t'bg-primary text-primary-foreground shadow hover:bg-primary/90',\\n\\t\\t\\t\\tdestructive:\\n\\t\\t\\t\\t\\t'bg-destructive text-destructive-foreground shadow-sm hover:bg-destructive/90',\\n\\t\\t\\t\\toutline:\\n\\t\\t\\t\\t\\t'border border-input bg-background shadow-sm hover:bg-accent hover:text-accent-foreground',\\n\\t\\t\\t\\tsecondary:\\n\\t\\t\\t\\t\\t'bg-secondary text-secondary-foreground shadow-sm hover:bg-secondary/80',\\n\\t\\t\\t\\tghost: 'hover:bg-accent hover:text-accent-foreground',\\n\\t\\t\\t\\tlink: 'text-primary underline-offset-4 hover:underline',\\n\\t\\t\\t},\\n\\t\\t\\tsize: {\\n\\t\\t\\t\\tdefault: 'h-9 px-4 py-2',\\n\\t\\t\\t\\tsm: 'h-8 rounded-md px-3 text-xs',\\n\\t\\t\\t\\tsmFull: 'w-full h-8 rounded-md px-3 text-xs',\\n\\t\\t\\t\\tlg: 'h-10 rounded-md px-8',\\n\\t\\t\\t\\tlgFull: 'w-full h-10 rounded-md px-8',\\n\\t\\t\\t\\ticon: 'h-9 w-9',\\n\\t\\t\\t},\\n\\t\\t},\\n\\t\\tdefaultVariants: {\\n\\t\\t\\tvariant: 'default',\\n\\t\\t\\tsize: 'default',\\n\\t\\t},\\n\\t}\\n)\\n\\nexport interface ButtonProps\\n\\textends ButtonHTMLAttributes<HTMLButtonElement>,\\n\\t\\tVariantProps<typeof buttonVariants> {\\n\\tasChild?: boolean\\n}\\n\\nconst Button = forwardRef<HTMLButtonElement, ButtonProps>(\\n\\t({ className, variant, size, asChild = false, ...props }, ref) => {\\n\\t\\tconst Comp = asChild ? Slot : 'button'\\n\\t\\treturn (\\n\\t\\t\\t<Comp\\n\\t\\t\\t\\tclassName={cn(buttonVariants({ variant, size, className }))}\\n\\t\\t\\t\\tref={ref}\\n\\t\\t\\t\\t{...props}\\n\\t\\t\\t/>\\n\\t\\t)\\n\\t}\\n)\\nButton.displayName = 'Button'\\n\\nexport { Button, buttonVariants }\\n\"",
  "examples": [
    {
      "source": "button.tsx",
      "code": "\"import { ButtonHTMLAttributes, forwardRef } from 'react'\\nimport { Slot } from '@radix-ui/react-slot'\\nimport { cva, type VariantProps } from 'class-variance-authority'\\n\\nimport { cn } from '@/modules/shadcn/lib/utils'\\n\\nconst buttonVariants = cva(\\n\\t'inline-flex items-center justify-center whitespace-nowrap rounded-md text-sm font-medium transition-colors focus-visible:outline-none focus-visible:ring-1 focus-visible:ring-ring disabled:pointer-events-none disabled:opacity-50',\\n\\t{\\n\\t\\tvariants: {\\n\\t\\t\\tvariant: {\\n\\t\\t\\t\\tdefault:\\n\\t\\t\\t\\t\\t'bg-primary text-primary-foreground shadow hover:bg-primary/90',\\n\\t\\t\\t\\tdestructive:\\n\\t\\t\\t\\t\\t'bg-destructive text-destructive-foreground shadow-sm hover:bg-destructive/90',\\n\\t\\t\\t\\toutline:\\n\\t\\t\\t\\t\\t'border border-input bg-background shadow-sm hover:bg-accent hover:text-accent-foreground',\\n\\t\\t\\t\\tsecondary:\\n\\t\\t\\t\\t\\t'bg-secondary text-secondary-foreground shadow-sm hover:bg-secondary/80',\\n\\t\\t\\t\\tghost: 'hover:bg-accent hover:text-accent-foreground',\\n\\t\\t\\t\\tlink: 'text-primary underline-offset-4 hover:underline',\\n\\t\\t\\t},\\n\\t\\t\\tsize: {\\n\\t\\t\\t\\tdefault: 'h-9 px-4 py-2',\\n\\t\\t\\t\\tsm: 'h-8 rounded-md px-3 text-xs',\\n\\t\\t\\t\\tsmFull: 'w-full h-8 rounded-md px-3 text-xs',\\n\\t\\t\\t\\tlg: 'h-10 rounded-md px-8',\\n\\t\\t\\t\\tlgFull: 'w-full h-10 rounded-md px-8',\\n\\t\\t\\t\\ticon: 'h-9 w-9',\\n\\t\\t\\t},\\n\\t\\t},\\n\\t\\tdefaultVariants: {\\n\\t\\t\\tvariant: 'default',\\n\\t\\t\\tsize: 'default',\\n\\t\\t},\\n\\t}\\n)\\n\\nexport interface ButtonProps\\n\\textends ButtonHTMLAttributes<HTMLButtonElement>,\\n\\t\\tVariantProps<typeof buttonVariants> {\\n\\tasChild?: boolean\\n}\\n\\nconst Button = forwardRef<HTMLButtonElement, ButtonProps>(\\n\\t({ className, variant, size, asChild = false, ...props }, ref) => {\\n\\t\\tconst Comp = asChild ? Slot : 'button'\\n\\t\\treturn (\\n\\t\\t\\t<Comp\\n\\t\\t\\t\\tclassName={cn(buttonVariants({ variant, size, className }))}\\n\\t\\t\\t\\tref={ref}\\n\\t\\t\\t\\t{...props}\\n\\t\\t\\t/>\\n\\t\\t)\\n\\t}\\n)\\nButton.displayName = 'Button'\\n\\nexport { Button, buttonVariants }\\n\""
    }
  ]
}
,
{
  "name": "toggle",
  "description": "Description for toggle component.",
  "usage": "\"'use client'\\n\\nimport * as React from 'react'\\nimport * as TogglePrimitive from '@radix-ui/react-toggle'\\nimport { cva, type VariantProps } from 'class-variance-authority'\\n\\nimport { cn } from '@/modules/shadcn/lib/utils'\\n\\nconst toggleVariants = cva(\\n\\t'inline-flex items-center justify-center rounded-md text-sm font-medium ring-offset-background transition-colors hover:bg-muted hover:text-muted-foreground focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2 disabled:pointer-events-none disabled:opacity-50 data-[state=on]:bg-accent data-[state=on]:text-accent-foreground',\\n\\t{\\n\\t\\tvariants: {\\n\\t\\t\\tvariant: {\\n\\t\\t\\t\\tdefault: 'bg-transparent',\\n\\t\\t\\t\\toutline:\\n\\t\\t\\t\\t\\t'border border-input bg-transparent hover:bg-accent hover:text-accent-foreground',\\n\\t\\t\\t},\\n\\t\\t\\tsize: {\\n\\t\\t\\t\\tdefault: 'h-10 px-3',\\n\\t\\t\\t\\tsm: 'h-9 px-2.5',\\n\\t\\t\\t\\tlg: 'h-11 px-5',\\n\\t\\t\\t},\\n\\t\\t},\\n\\t\\tdefaultVariants: {\\n\\t\\t\\tvariant: 'default',\\n\\t\\t\\tsize: 'default',\\n\\t\\t},\\n\\t}\\n)\\n\\nconst Toggle = React.forwardRef<\\n\\tReact.ElementRef<typeof TogglePrimitive.Root>,\\n\\tReact.ComponentPropsWithoutRef<typeof TogglePrimitive.Root> &\\n\\t\\tVariantProps<typeof toggleVariants>\\n>(({ className, variant, size, ...props }, ref) => (\\n\\t<TogglePrimitive.Root\\n\\t\\tref={ref}\\n\\t\\tclassName={cn(toggleVariants({ variant, size, className }))}\\n\\t\\t{...props}\\n\\t/>\\n))\\n\\nToggle.displayName = TogglePrimitive.Root.displayName\\n\\nexport { Toggle, toggleVariants }\\n\"",
  "examples": [
    {
      "source": "toggle.tsx",
      "code": "\"'use client'\\n\\nimport * as React from 'react'\\nimport * as TogglePrimitive from '@radix-ui/react-toggle'\\nimport { cva, type VariantProps } from 'class-variance-authority'\\n\\nimport { cn } from '@/modules/shadcn/lib/utils'\\n\\nconst toggleVariants = cva(\\n\\t'inline-flex items-center justify-center rounded-md text-sm font-medium ring-offset-background transition-colors hover:bg-muted hover:text-muted-foreground focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2 disabled:pointer-events-none disabled:opacity-50 data-[state=on]:bg-accent data-[state=on]:text-accent-foreground',\\n\\t{\\n\\t\\tvariants: {\\n\\t\\t\\tvariant: {\\n\\t\\t\\t\\tdefault: 'bg-transparent',\\n\\t\\t\\t\\toutline:\\n\\t\\t\\t\\t\\t'border border-input bg-transparent hover:bg-accent hover:text-accent-foreground',\\n\\t\\t\\t},\\n\\t\\t\\tsize: {\\n\\t\\t\\t\\tdefault: 'h-10 px-3',\\n\\t\\t\\t\\tsm: 'h-9 px-2.5',\\n\\t\\t\\t\\tlg: 'h-11 px-5',\\n\\t\\t\\t},\\n\\t\\t},\\n\\t\\tdefaultVariants: {\\n\\t\\t\\tvariant: 'default',\\n\\t\\t\\tsize: 'default',\\n\\t\\t},\\n\\t}\\n)\\n\\nconst Toggle = React.forwardRef<\\n\\tReact.ElementRef<typeof TogglePrimitive.Root>,\\n\\tReact.ComponentPropsWithoutRef<typeof TogglePrimitive.Root> &\\n\\t\\tVariantProps<typeof toggleVariants>\\n>(({ className, variant, size, ...props }, ref) => (\\n\\t<TogglePrimitive.Root\\n\\t\\tref={ref}\\n\\t\\tclassName={cn(toggleVariants({ variant, size, className }))}\\n\\t\\t{...props}\\n\\t/>\\n))\\n\\nToggle.displayName = TogglePrimitive.Root.displayName\\n\\nexport { Toggle, toggleVariants }\\n\""
    }
  ]
}
,
{
  "name": "checkbox",
  "description": "Description for checkbox component.",
  "usage": "\"'use client'\\n\\nimport * as React from 'react'\\nimport * as CheckboxPrimitive from '@radix-ui/react-checkbox'\\nimport { Check } from 'lucide-react'\\n\\nimport { cn } from '@/modules/shadcn/lib/utils'\\n\\nconst Checkbox = React.forwardRef<\\n\\tReact.ElementRef<typeof CheckboxPrimitive.Root>,\\n\\tReact.ComponentPropsWithoutRef<typeof CheckboxPrimitive.Root>\\n>(({ className, ...props }, ref) => (\\n\\t<CheckboxPrimitive.Root\\n\\t\\tref={ref}\\n\\t\\tclassName={cn(\\n\\t\\t\\t'peer h-4 w-4 shrink-0 rounded-sm border border-primary ring-offset-background focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2 disabled:cursor-not-allowed disabled:opacity-50 data-[state=checked]:bg-primary data-[state=checked]:text-primary-foreground',\\n\\t\\t\\tclassName\\n\\t\\t)}\\n\\t\\t{...props}\\n\\t>\\n\\t\\t<CheckboxPrimitive.Indicator\\n\\t\\t\\tclassName={cn('flex items-center justify-center text-current')}\\n\\t\\t>\\n\\t\\t\\t<Check className=\\\"h-4 w-4\\\" />\\n\\t\\t</CheckboxPrimitive.Indicator>\\n\\t</CheckboxPrimitive.Root>\\n))\\nCheckbox.displayName = CheckboxPrimitive.Root.displayName\\n\\nexport { Checkbox }\\n\"",
  "examples": [
    {
      "source": "checkbox.tsx",
      "code": "\"'use client'\\n\\nimport * as React from 'react'\\nimport * as CheckboxPrimitive from '@radix-ui/react-checkbox'\\nimport { Check } from 'lucide-react'\\n\\nimport { cn } from '@/modules/shadcn/lib/utils'\\n\\nconst Checkbox = React.forwardRef<\\n\\tReact.ElementRef<typeof CheckboxPrimitive.Root>,\\n\\tReact.ComponentPropsWithoutRef<typeof CheckboxPrimitive.Root>\\n>(({ className, ...props }, ref) => (\\n\\t<CheckboxPrimitive.Root\\n\\t\\tref={ref}\\n\\t\\tclassName={cn(\\n\\t\\t\\t'peer h-4 w-4 shrink-0 rounded-sm border border-primary ring-offset-background focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2 disabled:cursor-not-allowed disabled:opacity-50 data-[state=checked]:bg-primary data-[state=checked]:text-primary-foreground',\\n\\t\\t\\tclassName\\n\\t\\t)}\\n\\t\\t{...props}\\n\\t>\\n\\t\\t<CheckboxPrimitive.Indicator\\n\\t\\t\\tclassName={cn('flex items-center justify-center text-current')}\\n\\t\\t>\\n\\t\\t\\t<Check className=\\\"h-4 w-4\\\" />\\n\\t\\t</CheckboxPrimitive.Indicator>\\n\\t</CheckboxPrimitive.Root>\\n))\\nCheckbox.displayName = CheckboxPrimitive.Root.displayName\\n\\nexport { Checkbox }\\n\""
    }
  ]
}
,
{
  "name": "dropdown-menu",
  "description": "Description for dropdown-menu component.",
  "usage": "\"'use client'\\n\\nimport {\\n\\tforwardRef,\\n\\tElementRef,\\n\\tComponentPropsWithoutRef,\\n\\tHTMLAttributes,\\n} from 'react'\\nimport * as DropdownMenuPrimitive from '@radix-ui/react-dropdown-menu'\\nimport {\\n\\tCheckIcon,\\n\\tChevronRightIcon,\\n\\tDotFilledIcon,\\n} from '@radix-ui/react-icons'\\n\\nimport { cn } from '@/modules/shadcn/lib/utils'\\n\\nconst DropdownMenu = DropdownMenuPrimitive.Root\\n\\nconst DropdownMenuTrigger = DropdownMenuPrimitive.Trigger\\n\\nconst DropdownMenuGroup = DropdownMenuPrimitive.Group\\n\\nconst DropdownMenuPortal = DropdownMenuPrimitive.Portal\\n\\nconst DropdownMenuSub = DropdownMenuPrimitive.Sub\\n\\nconst DropdownMenuRadioGroup = DropdownMenuPrimitive.RadioGroup\\n\\nconst DropdownMenuSubTrigger = forwardRef<\\n\\tElementRef<typeof DropdownMenuPrimitive.SubTrigger>,\\n\\tComponentPropsWithoutRef<typeof DropdownMenuPrimitive.SubTrigger> & {\\n\\t\\tinset?: boolean\\n\\t}\\n>(({ className, inset, children, ...props }, ref) => (\\n\\t<DropdownMenuPrimitive.SubTrigger\\n\\t\\tref={ref}\\n\\t\\tclassName={cn(\\n\\t\\t\\t'flex cursor-default select-none items-center rounded-sm px-2 py-1.5 text-sm outline-none focus:bg-accent data-[state=open]:bg-accent',\\n\\t\\t\\tinset && 'pl-8',\\n\\t\\t\\tclassName\\n\\t\\t)}\\n\\t\\t{...props}\\n\\t>\\n\\t\\t{children}\\n\\t\\t<ChevronRightIcon className=\\\"ml-auto h-4 w-4\\\" />\\n\\t</DropdownMenuPrimitive.SubTrigger>\\n))\\nDropdownMenuSubTrigger.displayName =\\n\\tDropdownMenuPrimitive.SubTrigger.displayName\\n\\nconst DropdownMenuSubContent = forwardRef<\\n\\tElementRef<typeof DropdownMenuPrimitive.SubContent>,\\n\\tComponentPropsWithoutRef<typeof DropdownMenuPrimitive.SubContent>\\n>(({ className, ...props }, ref) => (\\n\\t<DropdownMenuPrimitive.SubContent\\n\\t\\tref={ref}\\n\\t\\tclassName={cn(\\n\\t\\t\\t'z-50 min-w-[8rem] overflow-hidden rounded-md border bg-popover p-1 text-popover-foreground shadow-lg data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[side=bottom]:slide-in-from-top-2 data-[side=left]:slide-in-from-right-2 data-[side=right]:slide-in-from-left-2 data-[side=top]:slide-in-from-bottom-2',\\n\\t\\t\\tclassName\\n\\t\\t)}\\n\\t\\t{...props}\\n\\t/>\\n))\\nDropdownMenuSubContent.displayName =\\n\\tDropdownMenuPrimitive.SubContent.displayName\\n\\nconst DropdownMenuContent = forwardRef<\\n\\tElementRef<typeof DropdownMenuPrimitive.Content>,\\n\\tComponentPropsWithoutRef<typeof DropdownMenuPrimitive.Content>\\n>(({ className, sideOffset = 4, ...props }, ref) => (\\n\\t<DropdownMenuPrimitive.Portal>\\n\\t\\t<DropdownMenuPrimitive.Content\\n\\t\\t\\tref={ref}\\n\\t\\t\\tsideOffset={sideOffset}\\n\\t\\t\\tclassName={cn(\\n\\t\\t\\t\\t'z-50 min-w-[8rem] overflow-hidden rounded-md border bg-popover p-1 text-popover-foreground shadow-md',\\n\\t\\t\\t\\t'data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[side=bottom]:slide-in-from-top-2 data-[side=left]:slide-in-from-right-2 data-[side=right]:slide-in-from-left-2 data-[side=top]:slide-in-from-bottom-2',\\n\\t\\t\\t\\tclassName\\n\\t\\t\\t)}\\n\\t\\t\\t{...props}\\n\\t\\t/>\\n\\t</DropdownMenuPrimitive.Portal>\\n))\\nDropdownMenuContent.displayName = DropdownMenuPrimitive.Content.displayName\\n\\nconst DropdownMenuItem = forwardRef<\\n\\tElementRef<typeof DropdownMenuPrimitive.Item>,\\n\\tComponentPropsWithoutRef<typeof DropdownMenuPrimitive.Item> & {\\n\\t\\tinset?: boolean\\n\\t}\\n>(({ className, inset, ...props }, ref) => (\\n\\t<DropdownMenuPrimitive.Item\\n\\t\\tref={ref}\\n\\t\\tclassName={cn(\\n\\t\\t\\t'relative flex cursor-default select-none items-center rounded-sm px-2 py-1.5 text-sm outline-none transition-colors focus:bg-accent focus:text-accent-foreground data-[disabled]:pointer-events-none data-[disabled]:opacity-50',\\n\\t\\t\\tinset && 'pl-8',\\n\\t\\t\\tclassName\\n\\t\\t)}\\n\\t\\t{...props}\\n\\t/>\\n))\\nDropdownMenuItem.displayName = DropdownMenuPrimitive.Item.displayName\\n\\nconst DropdownMenuCheckboxItem = forwardRef<\\n\\tElementRef<typeof DropdownMenuPrimitive.CheckboxItem>,\\n\\tComponentPropsWithoutRef<typeof DropdownMenuPrimitive.CheckboxItem>\\n>(({ className, children, checked, ...props }, ref) => (\\n\\t<DropdownMenuPrimitive.CheckboxItem\\n\\t\\tref={ref}\\n\\t\\tclassName={cn(\\n\\t\\t\\t'relative flex cursor-default select-none items-center rounded-sm py-1.5 pl-8 pr-2 text-sm outline-none transition-colors focus:bg-accent focus:text-accent-foreground data-[disabled]:pointer-events-none data-[disabled]:opacity-50',\\n\\t\\t\\tclassName\\n\\t\\t)}\\n\\t\\tchecked={checked}\\n\\t\\t{...props}\\n\\t>\\n\\t\\t<span className=\\\"absolute left-2 flex h-3.5 w-3.5 items-center justify-center\\\">\\n\\t\\t\\t<DropdownMenuPrimitive.ItemIndicator>\\n\\t\\t\\t\\t<CheckIcon className=\\\"h-4 w-4\\\" />\\n\\t\\t\\t</DropdownMenuPrimitive.ItemIndicator>\\n\\t\\t</span>\\n\\t\\t{children}\\n\\t</DropdownMenuPrimitive.CheckboxItem>\\n))\\nDropdownMenuCheckboxItem.displayName =\\n\\tDropdownMenuPrimitive.CheckboxItem.displayName\\n\\nconst DropdownMenuRadioItem = forwardRef<\\n\\tElementRef<typeof DropdownMenuPrimitive.RadioItem>,\\n\\tComponentPropsWithoutRef<typeof DropdownMenuPrimitive.RadioItem>\\n>(({ className, children, ...props }, ref) => (\\n\\t<DropdownMenuPrimitive.RadioItem\\n\\t\\tref={ref}\\n\\t\\tclassName={cn(\\n\\t\\t\\t'relative flex cursor-default select-none items-center rounded-sm py-1.5 pl-8 pr-2 text-sm outline-none transition-colors focus:bg-accent focus:text-accent-foreground data-[disabled]:pointer-events-none data-[disabled]:opacity-50',\\n\\t\\t\\tclassName\\n\\t\\t)}\\n\\t\\t{...props}\\n\\t>\\n\\t\\t<span className=\\\"absolute left-2 flex h-3.5 w-3.5 items-center justify-center\\\">\\n\\t\\t\\t<DropdownMenuPrimitive.ItemIndicator>\\n\\t\\t\\t\\t<DotFilledIcon className=\\\"h-4 w-4 fill-current\\\" />\\n\\t\\t\\t</DropdownMenuPrimitive.ItemIndicator>\\n\\t\\t</span>\\n\\t\\t{children}\\n\\t</DropdownMenuPrimitive.RadioItem>\\n))\\nDropdownMenuRadioItem.displayName = DropdownMenuPrimitive.RadioItem.displayName\\n\\nconst DropdownMenuLabel = forwardRef<\\n\\tElementRef<typeof DropdownMenuPrimitive.Label>,\\n\\tComponentPropsWithoutRef<typeof DropdownMenuPrimitive.Label> & {\\n\\t\\tinset?: boolean\\n\\t}\\n>(({ className, inset, ...props }, ref) => (\\n\\t<DropdownMenuPrimitive.Label\\n\\t\\tref={ref}\\n\\t\\tclassName={cn(\\n\\t\\t\\t'px-2 py-1.5 text-sm font-semibold',\\n\\t\\t\\tinset && 'pl-8',\\n\\t\\t\\tclassName\\n\\t\\t)}\\n\\t\\t{...props}\\n\\t/>\\n))\\nDropdownMenuLabel.displayName = DropdownMenuPrimitive.Label.displayName\\n\\nconst DropdownMenuSeparator = forwardRef<\\n\\tElementRef<typeof DropdownMenuPrimitive.Separator>,\\n\\tComponentPropsWithoutRef<typeof DropdownMenuPrimitive.Separator>\\n>(({ className, ...props }, ref) => (\\n\\t<DropdownMenuPrimitive.Separator\\n\\t\\tref={ref}\\n\\t\\tclassName={cn('-mx-1 my-1 h-px bg-muted', className)}\\n\\t\\t{...props}\\n\\t/>\\n))\\nDropdownMenuSeparator.displayName = DropdownMenuPrimitive.Separator.displayName\\n\\nconst DropdownMenuShortcut = ({\\n\\tclassName,\\n\\t...props\\n}: HTMLAttributes<HTMLSpanElement>) => {\\n\\treturn (\\n\\t\\t<span\\n\\t\\t\\tclassName={cn('ml-auto text-xs tracking-widest opacity-60', className)}\\n\\t\\t\\t{...props}\\n\\t\\t/>\\n\\t)\\n}\\nDropdownMenuShortcut.displayName = 'DropdownMenuShortcut'\\n\\nexport {\\n\\tDropdownMenu,\\n\\tDropdownMenuTrigger,\\n\\tDropdownMenuContent,\\n\\tDropdownMenuItem,\\n\\tDropdownMenuCheckboxItem,\\n\\tDropdownMenuRadioItem,\\n\\tDropdownMenuLabel,\\n\\tDropdownMenuSeparator,\\n\\tDropdownMenuShortcut,\\n\\tDropdownMenuGroup,\\n\\tDropdownMenuPortal,\\n\\tDropdownMenuSub,\\n\\tDropdownMenuSubContent,\\n\\tDropdownMenuSubTrigger,\\n\\tDropdownMenuRadioGroup,\\n}\\n\"",
  "examples": [
    {
      "source": "dropdown-menu.tsx",
      "code": "\"'use client'\\n\\nimport {\\n\\tforwardRef,\\n\\tElementRef,\\n\\tComponentPropsWithoutRef,\\n\\tHTMLAttributes,\\n} from 'react'\\nimport * as DropdownMenuPrimitive from '@radix-ui/react-dropdown-menu'\\nimport {\\n\\tCheckIcon,\\n\\tChevronRightIcon,\\n\\tDotFilledIcon,\\n} from '@radix-ui/react-icons'\\n\\nimport { cn } from '@/modules/shadcn/lib/utils'\\n\\nconst DropdownMenu = DropdownMenuPrimitive.Root\\n\\nconst DropdownMenuTrigger = DropdownMenuPrimitive.Trigger\\n\\nconst DropdownMenuGroup = DropdownMenuPrimitive.Group\\n\\nconst DropdownMenuPortal = DropdownMenuPrimitive.Portal\\n\\nconst DropdownMenuSub = DropdownMenuPrimitive.Sub\\n\\nconst DropdownMenuRadioGroup = DropdownMenuPrimitive.RadioGroup\\n\\nconst DropdownMenuSubTrigger = forwardRef<\\n\\tElementRef<typeof DropdownMenuPrimitive.SubTrigger>,\\n\\tComponentPropsWithoutRef<typeof DropdownMenuPrimitive.SubTrigger> & {\\n\\t\\tinset?: boolean\\n\\t}\\n>(({ className, inset, children, ...props }, ref) => (\\n\\t<DropdownMenuPrimitive.SubTrigger\\n\\t\\tref={ref}\\n\\t\\tclassName={cn(\\n\\t\\t\\t'flex cursor-default select-none items-center rounded-sm px-2 py-1.5 text-sm outline-none focus:bg-accent data-[state=open]:bg-accent',\\n\\t\\t\\tinset && 'pl-8',\\n\\t\\t\\tclassName\\n\\t\\t)}\\n\\t\\t{...props}\\n\\t>\\n\\t\\t{children}\\n\\t\\t<ChevronRightIcon className=\\\"ml-auto h-4 w-4\\\" />\\n\\t</DropdownMenuPrimitive.SubTrigger>\\n))\\nDropdownMenuSubTrigger.displayName =\\n\\tDropdownMenuPrimitive.SubTrigger.displayName\\n\\nconst DropdownMenuSubContent = forwardRef<\\n\\tElementRef<typeof DropdownMenuPrimitive.SubContent>,\\n\\tComponentPropsWithoutRef<typeof DropdownMenuPrimitive.SubContent>\\n>(({ className, ...props }, ref) => (\\n\\t<DropdownMenuPrimitive.SubContent\\n\\t\\tref={ref}\\n\\t\\tclassName={cn(\\n\\t\\t\\t'z-50 min-w-[8rem] overflow-hidden rounded-md border bg-popover p-1 text-popover-foreground shadow-lg data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[side=bottom]:slide-in-from-top-2 data-[side=left]:slide-in-from-right-2 data-[side=right]:slide-in-from-left-2 data-[side=top]:slide-in-from-bottom-2',\\n\\t\\t\\tclassName\\n\\t\\t)}\\n\\t\\t{...props}\\n\\t/>\\n))\\nDropdownMenuSubContent.displayName =\\n\\tDropdownMenuPrimitive.SubContent.displayName\\n\\nconst DropdownMenuContent = forwardRef<\\n\\tElementRef<typeof DropdownMenuPrimitive.Content>,\\n\\tComponentPropsWithoutRef<typeof DropdownMenuPrimitive.Content>\\n>(({ className, sideOffset = 4, ...props }, ref) => (\\n\\t<DropdownMenuPrimitive.Portal>\\n\\t\\t<DropdownMenuPrimitive.Content\\n\\t\\t\\tref={ref}\\n\\t\\t\\tsideOffset={sideOffset}\\n\\t\\t\\tclassName={cn(\\n\\t\\t\\t\\t'z-50 min-w-[8rem] overflow-hidden rounded-md border bg-popover p-1 text-popover-foreground shadow-md',\\n\\t\\t\\t\\t'data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[side=bottom]:slide-in-from-top-2 data-[side=left]:slide-in-from-right-2 data-[side=right]:slide-in-from-left-2 data-[side=top]:slide-in-from-bottom-2',\\n\\t\\t\\t\\tclassName\\n\\t\\t\\t)}\\n\\t\\t\\t{...props}\\n\\t\\t/>\\n\\t</DropdownMenuPrimitive.Portal>\\n))\\nDropdownMenuContent.displayName = DropdownMenuPrimitive.Content.displayName\\n\\nconst DropdownMenuItem = forwardRef<\\n\\tElementRef<typeof DropdownMenuPrimitive.Item>,\\n\\tComponentPropsWithoutRef<typeof DropdownMenuPrimitive.Item> & {\\n\\t\\tinset?: boolean\\n\\t}\\n>(({ className, inset, ...props }, ref) => (\\n\\t<DropdownMenuPrimitive.Item\\n\\t\\tref={ref}\\n\\t\\tclassName={cn(\\n\\t\\t\\t'relative flex cursor-default select-none items-center rounded-sm px-2 py-1.5 text-sm outline-none transition-colors focus:bg-accent focus:text-accent-foreground data-[disabled]:pointer-events-none data-[disabled]:opacity-50',\\n\\t\\t\\tinset && 'pl-8',\\n\\t\\t\\tclassName\\n\\t\\t)}\\n\\t\\t{...props}\\n\\t/>\\n))\\nDropdownMenuItem.displayName = DropdownMenuPrimitive.Item.displayName\\n\\nconst DropdownMenuCheckboxItem = forwardRef<\\n\\tElementRef<typeof DropdownMenuPrimitive.CheckboxItem>,\\n\\tComponentPropsWithoutRef<typeof DropdownMenuPrimitive.CheckboxItem>\\n>(({ className, children, checked, ...props }, ref) => (\\n\\t<DropdownMenuPrimitive.CheckboxItem\\n\\t\\tref={ref}\\n\\t\\tclassName={cn(\\n\\t\\t\\t'relative flex cursor-default select-none items-center rounded-sm py-1.5 pl-8 pr-2 text-sm outline-none transition-colors focus:bg-accent focus:text-accent-foreground data-[disabled]:pointer-events-none data-[disabled]:opacity-50',\\n\\t\\t\\tclassName\\n\\t\\t)}\\n\\t\\tchecked={checked}\\n\\t\\t{...props}\\n\\t>\\n\\t\\t<span className=\\\"absolute left-2 flex h-3.5 w-3.5 items-center justify-center\\\">\\n\\t\\t\\t<DropdownMenuPrimitive.ItemIndicator>\\n\\t\\t\\t\\t<CheckIcon className=\\\"h-4 w-4\\\" />\\n\\t\\t\\t</DropdownMenuPrimitive.ItemIndicator>\\n\\t\\t</span>\\n\\t\\t{children}\\n\\t</DropdownMenuPrimitive.CheckboxItem>\\n))\\nDropdownMenuCheckboxItem.displayName =\\n\\tDropdownMenuPrimitive.CheckboxItem.displayName\\n\\nconst DropdownMenuRadioItem = forwardRef<\\n\\tElementRef<typeof DropdownMenuPrimitive.RadioItem>,\\n\\tComponentPropsWithoutRef<typeof DropdownMenuPrimitive.RadioItem>\\n>(({ className, children, ...props }, ref) => (\\n\\t<DropdownMenuPrimitive.RadioItem\\n\\t\\tref={ref}\\n\\t\\tclassName={cn(\\n\\t\\t\\t'relative flex cursor-default select-none items-center rounded-sm py-1.5 pl-8 pr-2 text-sm outline-none transition-colors focus:bg-accent focus:text-accent-foreground data-[disabled]:pointer-events-none data-[disabled]:opacity-50',\\n\\t\\t\\tclassName\\n\\t\\t)}\\n\\t\\t{...props}\\n\\t>\\n\\t\\t<span className=\\\"absolute left-2 flex h-3.5 w-3.5 items-center justify-center\\\">\\n\\t\\t\\t<DropdownMenuPrimitive.ItemIndicator>\\n\\t\\t\\t\\t<DotFilledIcon className=\\\"h-4 w-4 fill-current\\\" />\\n\\t\\t\\t</DropdownMenuPrimitive.ItemIndicator>\\n\\t\\t</span>\\n\\t\\t{children}\\n\\t</DropdownMenuPrimitive.RadioItem>\\n))\\nDropdownMenuRadioItem.displayName = DropdownMenuPrimitive.RadioItem.displayName\\n\\nconst DropdownMenuLabel = forwardRef<\\n\\tElementRef<typeof DropdownMenuPrimitive.Label>,\\n\\tComponentPropsWithoutRef<typeof DropdownMenuPrimitive.Label> & {\\n\\t\\tinset?: boolean\\n\\t}\\n>(({ className, inset, ...props }, ref) => (\\n\\t<DropdownMenuPrimitive.Label\\n\\t\\tref={ref}\\n\\t\\tclassName={cn(\\n\\t\\t\\t'px-2 py-1.5 text-sm font-semibold',\\n\\t\\t\\tinset && 'pl-8',\\n\\t\\t\\tclassName\\n\\t\\t)}\\n\\t\\t{...props}\\n\\t/>\\n))\\nDropdownMenuLabel.displayName = DropdownMenuPrimitive.Label.displayName\\n\\nconst DropdownMenuSeparator = forwardRef<\\n\\tElementRef<typeof DropdownMenuPrimitive.Separator>,\\n\\tComponentPropsWithoutRef<typeof DropdownMenuPrimitive.Separator>\\n>(({ className, ...props }, ref) => (\\n\\t<DropdownMenuPrimitive.Separator\\n\\t\\tref={ref}\\n\\t\\tclassName={cn('-mx-1 my-1 h-px bg-muted', className)}\\n\\t\\t{...props}\\n\\t/>\\n))\\nDropdownMenuSeparator.displayName = DropdownMenuPrimitive.Separator.displayName\\n\\nconst DropdownMenuShortcut = ({\\n\\tclassName,\\n\\t...props\\n}: HTMLAttributes<HTMLSpanElement>) => {\\n\\treturn (\\n\\t\\t<span\\n\\t\\t\\tclassName={cn('ml-auto text-xs tracking-widest opacity-60', className)}\\n\\t\\t\\t{...props}\\n\\t\\t/>\\n\\t)\\n}\\nDropdownMenuShortcut.displayName = 'DropdownMenuShortcut'\\n\\nexport {\\n\\tDropdownMenu,\\n\\tDropdownMenuTrigger,\\n\\tDropdownMenuContent,\\n\\tDropdownMenuItem,\\n\\tDropdownMenuCheckboxItem,\\n\\tDropdownMenuRadioItem,\\n\\tDropdownMenuLabel,\\n\\tDropdownMenuSeparator,\\n\\tDropdownMenuShortcut,\\n\\tDropdownMenuGroup,\\n\\tDropdownMenuPortal,\\n\\tDropdownMenuSub,\\n\\tDropdownMenuSubContent,\\n\\tDropdownMenuSubTrigger,\\n\\tDropdownMenuRadioGroup,\\n}\\n\""
    }
  ]
}
,
{
  "name": "select",
  "description": "Description for select component.",
  "usage": "\"'use client'\\n\\nimport * as React from 'react'\\nimport {\\n\\tCaretSortIcon,\\n\\tCheckIcon,\\n\\tChevronDownIcon,\\n\\tChevronUpIcon,\\n} from '@radix-ui/react-icons'\\nimport * as SelectPrimitive from '@radix-ui/react-select'\\n\\nimport { cn } from '@/modules/shadcn/lib/utils'\\n\\nconst Select = SelectPrimitive.Root\\n\\nconst SelectGroup = SelectPrimitive.Group\\n\\nconst SelectValue = SelectPrimitive.Value\\n\\nconst SelectTrigger = React.forwardRef<\\n\\tReact.ElementRef<typeof SelectPrimitive.Trigger>,\\n\\tReact.ComponentPropsWithoutRef<typeof SelectPrimitive.Trigger>\\n>(({ className, children, ...props }, ref) => (\\n\\t<SelectPrimitive.Trigger\\n\\t\\tref={ref}\\n\\t\\tclassName={cn(\\n\\t\\t\\t'flex h-9 w-full items-center justify-between whitespace-nowrap rounded-md border border-input bg-transparent px-3 py-2 text-sm shadow-sm ring-offset-background placeholder:text-muted-foreground focus:outline-none focus:ring-1 focus:ring-ring disabled:cursor-not-allowed disabled:opacity-50 [&>span]:line-clamp-1',\\n\\t\\t\\tclassName\\n\\t\\t)}\\n\\t\\t{...props}\\n\\t>\\n\\t\\t{children}\\n\\t\\t<SelectPrimitive.Icon asChild>\\n\\t\\t\\t<CaretSortIcon className=\\\"h-4 w-4 opacity-50\\\" />\\n\\t\\t</SelectPrimitive.Icon>\\n\\t</SelectPrimitive.Trigger>\\n))\\nSelectTrigger.displayName = SelectPrimitive.Trigger.displayName\\n\\nconst SelectScrollUpButton = React.forwardRef<\\n\\tReact.ElementRef<typeof SelectPrimitive.ScrollUpButton>,\\n\\tReact.ComponentPropsWithoutRef<typeof SelectPrimitive.ScrollUpButton>\\n>(({ className, ...props }, ref) => (\\n\\t<SelectPrimitive.ScrollUpButton\\n\\t\\tref={ref}\\n\\t\\tclassName={cn(\\n\\t\\t\\t'flex cursor-default items-center justify-center py-1',\\n\\t\\t\\tclassName\\n\\t\\t)}\\n\\t\\t{...props}\\n\\t>\\n\\t\\t<ChevronUpIcon />\\n\\t</SelectPrimitive.ScrollUpButton>\\n))\\nSelectScrollUpButton.displayName = SelectPrimitive.ScrollUpButton.displayName\\n\\nconst SelectScrollDownButton = React.forwardRef<\\n\\tReact.ElementRef<typeof SelectPrimitive.ScrollDownButton>,\\n\\tReact.ComponentPropsWithoutRef<typeof SelectPrimitive.ScrollDownButton>\\n>(({ className, ...props }, ref) => (\\n\\t<SelectPrimitive.ScrollDownButton\\n\\t\\tref={ref}\\n\\t\\tclassName={cn(\\n\\t\\t\\t'flex cursor-default items-center justify-center py-1',\\n\\t\\t\\tclassName\\n\\t\\t)}\\n\\t\\t{...props}\\n\\t>\\n\\t\\t<ChevronDownIcon />\\n\\t</SelectPrimitive.ScrollDownButton>\\n))\\nSelectScrollDownButton.displayName =\\n\\tSelectPrimitive.ScrollDownButton.displayName\\n\\nconst SelectContent = React.forwardRef<\\n\\tReact.ElementRef<typeof SelectPrimitive.Content>,\\n\\tReact.ComponentPropsWithoutRef<typeof SelectPrimitive.Content>\\n>(({ className, children, position = 'popper', ...props }, ref) => (\\n\\t<SelectPrimitive.Portal>\\n\\t\\t<SelectPrimitive.Content\\n\\t\\t\\tref={ref}\\n\\t\\t\\tclassName={cn(\\n\\t\\t\\t\\t'relative z-[999] max-h-96 min-w-[8rem] overflow-hidden rounded-md border bg-popover text-popover-foreground shadow-md data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[side=bottom]:slide-in-from-top-2 data-[side=left]:slide-in-from-right-2 data-[side=right]:slide-in-from-left-2 data-[side=top]:slide-in-from-bottom-2',\\n\\t\\t\\t\\tposition === 'popper' &&\\n\\t\\t\\t\\t\\t'data-[side=bottom]:translate-y-1 data-[side=left]:-translate-x-1 data-[side=right]:translate-x-1 data-[side=top]:-translate-y-1',\\n\\t\\t\\t\\tclassName\\n\\t\\t\\t)}\\n\\t\\t\\tposition={position}\\n\\t\\t\\t{...props}\\n\\t\\t>\\n\\t\\t\\t<SelectScrollUpButton />\\n\\t\\t\\t<SelectPrimitive.Viewport\\n\\t\\t\\t\\tclassName={cn(\\n\\t\\t\\t\\t\\t'p-1',\\n\\t\\t\\t\\t\\tposition === 'popper' &&\\n\\t\\t\\t\\t\\t\\t'h-[var(--radix-select-trigger-height)] w-full min-w-[var(--radix-select-trigger-width)]'\\n\\t\\t\\t\\t)}\\n\\t\\t\\t>\\n\\t\\t\\t\\t{children}\\n\\t\\t\\t</SelectPrimitive.Viewport>\\n\\t\\t\\t<SelectScrollDownButton />\\n\\t\\t</SelectPrimitive.Content>\\n\\t</SelectPrimitive.Portal>\\n))\\nSelectContent.displayName = SelectPrimitive.Content.displayName\\n\\nconst SelectLabel = React.forwardRef<\\n\\tReact.ElementRef<typeof SelectPrimitive.Label>,\\n\\tReact.ComponentPropsWithoutRef<typeof SelectPrimitive.Label>\\n>(({ className, ...props }, ref) => (\\n\\t<SelectPrimitive.Label\\n\\t\\tref={ref}\\n\\t\\tclassName={cn('px-2 py-1.5 text-sm font-semibold', className)}\\n\\t\\t{...props}\\n\\t/>\\n))\\nSelectLabel.displayName = SelectPrimitive.Label.displayName\\n\\nconst SelectItem = React.forwardRef<\\n\\tReact.ElementRef<typeof SelectPrimitive.Item>,\\n\\tReact.ComponentPropsWithoutRef<typeof SelectPrimitive.Item>\\n>(({ className, children, ...props }, ref) => (\\n\\t<SelectPrimitive.Item\\n\\t\\tref={ref}\\n\\t\\tclassName={cn(\\n\\t\\t\\t'relative flex w-full cursor-default select-none items-center rounded-sm py-1.5 pl-2 pr-8 text-sm outline-none focus:bg-accent focus:text-accent-foreground data-[disabled]:pointer-events-none data-[disabled]:opacity-50',\\n\\t\\t\\tclassName\\n\\t\\t)}\\n\\t\\t{...props}\\n\\t>\\n\\t\\t<span className=\\\"absolute right-2 flex h-3.5 w-3.5 items-center justify-center\\\">\\n\\t\\t\\t<SelectPrimitive.ItemIndicator>\\n\\t\\t\\t\\t<CheckIcon className=\\\"h-4 w-4\\\" />\\n\\t\\t\\t</SelectPrimitive.ItemIndicator>\\n\\t\\t</span>\\n\\t\\t<SelectPrimitive.ItemText>{children}</SelectPrimitive.ItemText>\\n\\t</SelectPrimitive.Item>\\n))\\nSelectItem.displayName = SelectPrimitive.Item.displayName\\n\\nconst SelectSeparator = React.forwardRef<\\n\\tReact.ElementRef<typeof SelectPrimitive.Separator>,\\n\\tReact.ComponentPropsWithoutRef<typeof SelectPrimitive.Separator>\\n>(({ className, ...props }, ref) => (\\n\\t<SelectPrimitive.Separator\\n\\t\\tref={ref}\\n\\t\\tclassName={cn('-mx-1 my-1 h-px bg-muted', className)}\\n\\t\\t{...props}\\n\\t/>\\n))\\nSelectSeparator.displayName = SelectPrimitive.Separator.displayName\\n\\nexport {\\n\\tSelect,\\n\\tSelectGroup,\\n\\tSelectValue,\\n\\tSelectTrigger,\\n\\tSelectContent,\\n\\tSelectLabel,\\n\\tSelectItem,\\n\\tSelectSeparator,\\n\\tSelectScrollUpButton,\\n\\tSelectScrollDownButton,\\n}\\n\"",
  "examples": [
    {
      "source": "select.tsx",
      "code": "\"'use client'\\n\\nimport * as React from 'react'\\nimport {\\n\\tCaretSortIcon,\\n\\tCheckIcon,\\n\\tChevronDownIcon,\\n\\tChevronUpIcon,\\n} from '@radix-ui/react-icons'\\nimport * as SelectPrimitive from '@radix-ui/react-select'\\n\\nimport { cn } from '@/modules/shadcn/lib/utils'\\n\\nconst Select = SelectPrimitive.Root\\n\\nconst SelectGroup = SelectPrimitive.Group\\n\\nconst SelectValue = SelectPrimitive.Value\\n\\nconst SelectTrigger = React.forwardRef<\\n\\tReact.ElementRef<typeof SelectPrimitive.Trigger>,\\n\\tReact.ComponentPropsWithoutRef<typeof SelectPrimitive.Trigger>\\n>(({ className, children, ...props }, ref) => (\\n\\t<SelectPrimitive.Trigger\\n\\t\\tref={ref}\\n\\t\\tclassName={cn(\\n\\t\\t\\t'flex h-9 w-full items-center justify-between whitespace-nowrap rounded-md border border-input bg-transparent px-3 py-2 text-sm shadow-sm ring-offset-background placeholder:text-muted-foreground focus:outline-none focus:ring-1 focus:ring-ring disabled:cursor-not-allowed disabled:opacity-50 [&>span]:line-clamp-1',\\n\\t\\t\\tclassName\\n\\t\\t)}\\n\\t\\t{...props}\\n\\t>\\n\\t\\t{children}\\n\\t\\t<SelectPrimitive.Icon asChild>\\n\\t\\t\\t<CaretSortIcon className=\\\"h-4 w-4 opacity-50\\\" />\\n\\t\\t</SelectPrimitive.Icon>\\n\\t</SelectPrimitive.Trigger>\\n))\\nSelectTrigger.displayName = SelectPrimitive.Trigger.displayName\\n\\nconst SelectScrollUpButton = React.forwardRef<\\n\\tReact.ElementRef<typeof SelectPrimitive.ScrollUpButton>,\\n\\tReact.ComponentPropsWithoutRef<typeof SelectPrimitive.ScrollUpButton>\\n>(({ className, ...props }, ref) => (\\n\\t<SelectPrimitive.ScrollUpButton\\n\\t\\tref={ref}\\n\\t\\tclassName={cn(\\n\\t\\t\\t'flex cursor-default items-center justify-center py-1',\\n\\t\\t\\tclassName\\n\\t\\t)}\\n\\t\\t{...props}\\n\\t>\\n\\t\\t<ChevronUpIcon />\\n\\t</SelectPrimitive.ScrollUpButton>\\n))\\nSelectScrollUpButton.displayName = SelectPrimitive.ScrollUpButton.displayName\\n\\nconst SelectScrollDownButton = React.forwardRef<\\n\\tReact.ElementRef<typeof SelectPrimitive.ScrollDownButton>,\\n\\tReact.ComponentPropsWithoutRef<typeof SelectPrimitive.ScrollDownButton>\\n>(({ className, ...props }, ref) => (\\n\\t<SelectPrimitive.ScrollDownButton\\n\\t\\tref={ref}\\n\\t\\tclassName={cn(\\n\\t\\t\\t'flex cursor-default items-center justify-center py-1',\\n\\t\\t\\tclassName\\n\\t\\t)}\\n\\t\\t{...props}\\n\\t>\\n\\t\\t<ChevronDownIcon />\\n\\t</SelectPrimitive.ScrollDownButton>\\n))\\nSelectScrollDownButton.displayName =\\n\\tSelectPrimitive.ScrollDownButton.displayName\\n\\nconst SelectContent = React.forwardRef<\\n\\tReact.ElementRef<typeof SelectPrimitive.Content>,\\n\\tReact.ComponentPropsWithoutRef<typeof SelectPrimitive.Content>\\n>(({ className, children, position = 'popper', ...props }, ref) => (\\n\\t<SelectPrimitive.Portal>\\n\\t\\t<SelectPrimitive.Content\\n\\t\\t\\tref={ref}\\n\\t\\t\\tclassName={cn(\\n\\t\\t\\t\\t'relative z-[999] max-h-96 min-w-[8rem] overflow-hidden rounded-md border bg-popover text-popover-foreground shadow-md data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[side=bottom]:slide-in-from-top-2 data-[side=left]:slide-in-from-right-2 data-[side=right]:slide-in-from-left-2 data-[side=top]:slide-in-from-bottom-2',\\n\\t\\t\\t\\tposition === 'popper' &&\\n\\t\\t\\t\\t\\t'data-[side=bottom]:translate-y-1 data-[side=left]:-translate-x-1 data-[side=right]:translate-x-1 data-[side=top]:-translate-y-1',\\n\\t\\t\\t\\tclassName\\n\\t\\t\\t)}\\n\\t\\t\\tposition={position}\\n\\t\\t\\t{...props}\\n\\t\\t>\\n\\t\\t\\t<SelectScrollUpButton />\\n\\t\\t\\t<SelectPrimitive.Viewport\\n\\t\\t\\t\\tclassName={cn(\\n\\t\\t\\t\\t\\t'p-1',\\n\\t\\t\\t\\t\\tposition === 'popper' &&\\n\\t\\t\\t\\t\\t\\t'h-[var(--radix-select-trigger-height)] w-full min-w-[var(--radix-select-trigger-width)]'\\n\\t\\t\\t\\t)}\\n\\t\\t\\t>\\n\\t\\t\\t\\t{children}\\n\\t\\t\\t</SelectPrimitive.Viewport>\\n\\t\\t\\t<SelectScrollDownButton />\\n\\t\\t</SelectPrimitive.Content>\\n\\t</SelectPrimitive.Portal>\\n))\\nSelectContent.displayName = SelectPrimitive.Content.displayName\\n\\nconst SelectLabel = React.forwardRef<\\n\\tReact.ElementRef<typeof SelectPrimitive.Label>,\\n\\tReact.ComponentPropsWithoutRef<typeof SelectPrimitive.Label>\\n>(({ className, ...props }, ref) => (\\n\\t<SelectPrimitive.Label\\n\\t\\tref={ref}\\n\\t\\tclassName={cn('px-2 py-1.5 text-sm font-semibold', className)}\\n\\t\\t{...props}\\n\\t/>\\n))\\nSelectLabel.displayName = SelectPrimitive.Label.displayName\\n\\nconst SelectItem = React.forwardRef<\\n\\tReact.ElementRef<typeof SelectPrimitive.Item>,\\n\\tReact.ComponentPropsWithoutRef<typeof SelectPrimitive.Item>\\n>(({ className, children, ...props }, ref) => (\\n\\t<SelectPrimitive.Item\\n\\t\\tref={ref}\\n\\t\\tclassName={cn(\\n\\t\\t\\t'relative flex w-full cursor-default select-none items-center rounded-sm py-1.5 pl-2 pr-8 text-sm outline-none focus:bg-accent focus:text-accent-foreground data-[disabled]:pointer-events-none data-[disabled]:opacity-50',\\n\\t\\t\\tclassName\\n\\t\\t)}\\n\\t\\t{...props}\\n\\t>\\n\\t\\t<span className=\\\"absolute right-2 flex h-3.5 w-3.5 items-center justify-center\\\">\\n\\t\\t\\t<SelectPrimitive.ItemIndicator>\\n\\t\\t\\t\\t<CheckIcon className=\\\"h-4 w-4\\\" />\\n\\t\\t\\t</SelectPrimitive.ItemIndicator>\\n\\t\\t</span>\\n\\t\\t<SelectPrimitive.ItemText>{children}</SelectPrimitive.ItemText>\\n\\t</SelectPrimitive.Item>\\n))\\nSelectItem.displayName = SelectPrimitive.Item.displayName\\n\\nconst SelectSeparator = React.forwardRef<\\n\\tReact.ElementRef<typeof SelectPrimitive.Separator>,\\n\\tReact.ComponentPropsWithoutRef<typeof SelectPrimitive.Separator>\\n>(({ className, ...props }, ref) => (\\n\\t<SelectPrimitive.Separator\\n\\t\\tref={ref}\\n\\t\\tclassName={cn('-mx-1 my-1 h-px bg-muted', className)}\\n\\t\\t{...props}\\n\\t/>\\n))\\nSelectSeparator.displayName = SelectPrimitive.Separator.displayName\\n\\nexport {\\n\\tSelect,\\n\\tSelectGroup,\\n\\tSelectValue,\\n\\tSelectTrigger,\\n\\tSelectContent,\\n\\tSelectLabel,\\n\\tSelectItem,\\n\\tSelectSeparator,\\n\\tSelectScrollUpButton,\\n\\tSelectScrollDownButton,\\n}\\n\""
    }
  ]
}
,
{
  "name": "textarea",
  "description": "Description for textarea component.",
  "usage": "\"import * as React from 'react'\\n\\nimport { cn } from '@/modules/shadcn/lib/utils'\\n\\nexport interface TextareaProps\\n\\textends React.TextareaHTMLAttributes<HTMLTextAreaElement> {}\\n\\nconst Textarea = React.forwardRef<HTMLTextAreaElement, TextareaProps>(\\n\\t({ className, ...props }, ref) => {\\n\\t\\treturn (\\n\\t\\t\\t<textarea\\n\\t\\t\\t\\tclassName={cn(\\n\\t\\t\\t\\t\\t'flex min-h-[80px] w-full rounded-md border border-input bg-background px-3 py-2 text-sm ring-offset-background placeholder:text-muted-foreground focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2 disabled:cursor-not-allowed disabled:opacity-50',\\n\\t\\t\\t\\t\\tclassName\\n\\t\\t\\t\\t)}\\n\\t\\t\\t\\tref={ref}\\n\\t\\t\\t\\t{...props}\\n\\t\\t\\t/>\\n\\t\\t)\\n\\t}\\n)\\nTextarea.displayName = 'Textarea'\\n\\nexport { Textarea }\\n\"",
  "examples": [
    {
      "source": "textarea.tsx",
      "code": "\"import * as React from 'react'\\n\\nimport { cn } from '@/modules/shadcn/lib/utils'\\n\\nexport interface TextareaProps\\n\\textends React.TextareaHTMLAttributes<HTMLTextAreaElement> {}\\n\\nconst Textarea = React.forwardRef<HTMLTextAreaElement, TextareaProps>(\\n\\t({ className, ...props }, ref) => {\\n\\t\\treturn (\\n\\t\\t\\t<textarea\\n\\t\\t\\t\\tclassName={cn(\\n\\t\\t\\t\\t\\t'flex min-h-[80px] w-full rounded-md border border-input bg-background px-3 py-2 text-sm ring-offset-background placeholder:text-muted-foreground focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2 disabled:cursor-not-allowed disabled:opacity-50',\\n\\t\\t\\t\\t\\tclassName\\n\\t\\t\\t\\t)}\\n\\t\\t\\t\\tref={ref}\\n\\t\\t\\t\\t{...props}\\n\\t\\t\\t/>\\n\\t\\t)\\n\\t}\\n)\\nTextarea.displayName = 'Textarea'\\n\\nexport { Textarea }\\n\""
    }
  ]
}
,
{
  "name": "input",
  "description": "Description for input component.",
  "usage": "\"import { InputHTMLAttributes, forwardRef } from 'react'\\n\\nimport { cn } from '@/modules/shadcn/lib/utils'\\n\\nexport interface InputProps extends InputHTMLAttributes<HTMLInputElement> {\\n\\terror?: boolean\\n}\\n\\nconst Input = forwardRef<HTMLInputElement, InputProps>(\\n\\t({ className, type, error, ...props }, ref) => {\\n\\t\\treturn (\\n\\t\\t\\t<input\\n\\t\\t\\t\\ttype={type}\\n\\t\\t\\t\\tclassName={cn(\\n\\t\\t\\t\\t\\t'flex h-9 w-full rounded-md border border-input bg-transparent px-3 py-1 text-sm shadow-sm transition-colors file:border-0 file:bg-transparent file:text-sm file:font-medium placeholder:text-muted-foreground focus-visible:outline-none focus-visible:ring-1 focus-visible:ring-ring disabled:cursor-not-allowed disabled:opacity-50',\\n\\t\\t\\t\\t\\terror\\n\\t\\t\\t\\t\\t\\t? 'border-borderError focus-visible:border-borderError mb-2'\\n\\t\\t\\t\\t\\t\\t: 'mb-4', // A\\u00f1adir clases de error aqu\\u00ed\\n\\t\\t\\t\\t\\tclassName\\n\\t\\t\\t\\t)}\\n\\t\\t\\t\\tref={ref}\\n\\t\\t\\t\\t{...props}\\n\\t\\t\\t/>\\n\\t\\t)\\n\\t}\\n)\\nInput.displayName = 'Input'\\n\\nexport { Input }\\n\"",
  "examples": [
    {
      "source": "input.tsx",
      "code": "\"import { InputHTMLAttributes, forwardRef } from 'react'\\n\\nimport { cn } from '@/modules/shadcn/lib/utils'\\n\\nexport interface InputProps extends InputHTMLAttributes<HTMLInputElement> {\\n\\terror?: boolean\\n}\\n\\nconst Input = forwardRef<HTMLInputElement, InputProps>(\\n\\t({ className, type, error, ...props }, ref) => {\\n\\t\\treturn (\\n\\t\\t\\t<input\\n\\t\\t\\t\\ttype={type}\\n\\t\\t\\t\\tclassName={cn(\\n\\t\\t\\t\\t\\t'flex h-9 w-full rounded-md border border-input bg-transparent px-3 py-1 text-sm shadow-sm transition-colors file:border-0 file:bg-transparent file:text-sm file:font-medium placeholder:text-muted-foreground focus-visible:outline-none focus-visible:ring-1 focus-visible:ring-ring disabled:cursor-not-allowed disabled:opacity-50',\\n\\t\\t\\t\\t\\terror\\n\\t\\t\\t\\t\\t\\t? 'border-borderError focus-visible:border-borderError mb-2'\\n\\t\\t\\t\\t\\t\\t: 'mb-4', // A\\u00f1adir clases de error aqu\\u00ed\\n\\t\\t\\t\\t\\tclassName\\n\\t\\t\\t\\t)}\\n\\t\\t\\t\\tref={ref}\\n\\t\\t\\t\\t{...props}\\n\\t\\t\\t/>\\n\\t\\t)\\n\\t}\\n)\\nInput.displayName = 'Input'\\n\\nexport { Input }\\n\""
    }
  ]
}
,
{
  "name": "form",
  "description": "Description for form component.",
  "usage": "\"import * as React from 'react'\\nimport * as LabelPrimitive from '@radix-ui/react-label'\\nimport { Slot } from '@radix-ui/react-slot'\\nimport {\\n\\tController,\\n\\tControllerProps,\\n\\tFieldPath,\\n\\tFieldValues,\\n\\tFormProvider,\\n\\tuseFormContext,\\n} from 'react-hook-form'\\n\\nimport { cn } from '@/modules/shadcn/lib/utils'\\nimport { Label } from '@/modules/shadcn/components/ui'\\n\\nconst Form = FormProvider\\n\\ntype FormFieldContextValue<\\n\\tTFieldValues extends FieldValues = FieldValues,\\n\\tTName extends FieldPath<TFieldValues> = FieldPath<TFieldValues>,\\n> = {\\n\\tname: TName\\n}\\n\\nconst FormFieldContext = React.createContext<FormFieldContextValue>(\\n\\t{} as FormFieldContextValue\\n)\\n\\nconst FormField = <\\n\\tTFieldValues extends FieldValues = FieldValues,\\n\\tTName extends FieldPath<TFieldValues> = FieldPath<TFieldValues>,\\n>({\\n\\t...props\\n}: ControllerProps<TFieldValues, TName>) => {\\n\\treturn (\\n\\t\\t<FormFieldContext.Provider value={{ name: props.name }}>\\n\\t\\t\\t<Controller {...props} />\\n\\t\\t</FormFieldContext.Provider>\\n\\t)\\n}\\n\\nconst useFormField = () => {\\n\\tconst fieldContext = React.useContext(FormFieldContext)\\n\\tconst itemContext = React.useContext(FormItemContext)\\n\\tconst { getFieldState, formState } = useFormContext()\\n\\n\\tconst fieldState = getFieldState(fieldContext.name, formState)\\n\\n\\tif (!fieldContext) {\\n\\t\\tthrow new Error('useFormField should be used within <FormField>')\\n\\t}\\n\\n\\tconst { id } = itemContext\\n\\n\\treturn {\\n\\t\\tid,\\n\\t\\tname: fieldContext.name,\\n\\t\\tformItemId: `${id}-form-item`,\\n\\t\\tformDescriptionId: `${id}-form-item-description`,\\n\\t\\tformMessageId: `${id}-form-item-message`,\\n\\t\\t...fieldState,\\n\\t}\\n}\\n\\ntype FormItemContextValue = {\\n\\tid: string\\n}\\n\\nconst FormItemContext = React.createContext<FormItemContextValue>(\\n\\t{} as FormItemContextValue\\n)\\n\\nconst FormItem = React.forwardRef<\\n\\tHTMLDivElement,\\n\\tReact.HTMLAttributes<HTMLDivElement>\\n>(({ className, ...props }, ref) => {\\n\\tconst id = React.useId()\\n\\n\\treturn (\\n\\t\\t<FormItemContext.Provider value={{ id }}>\\n\\t\\t\\t<div ref={ref} className={cn('space-y-2', className)} {...props} />\\n\\t\\t</FormItemContext.Provider>\\n\\t)\\n})\\nFormItem.displayName = 'FormItem'\\n\\nconst FormLabel = React.forwardRef<\\n\\tReact.ElementRef<typeof LabelPrimitive.Root>,\\n\\tReact.ComponentPropsWithoutRef<typeof LabelPrimitive.Root>\\n>(({ className, ...props }, ref) => {\\n\\tconst { error, formItemId } = useFormField()\\n\\n\\treturn (\\n\\t\\t<Label\\n\\t\\t\\tref={ref}\\n\\t\\t\\tclassName={cn(error && 'text-destructive', className)}\\n\\t\\t\\thtmlFor={formItemId}\\n\\t\\t\\t{...props}\\n\\t\\t/>\\n\\t)\\n})\\nFormLabel.displayName = 'FormLabel'\\n\\nconst FormControl = React.forwardRef<\\n\\tReact.ElementRef<typeof Slot>,\\n\\tReact.ComponentPropsWithoutRef<typeof Slot>\\n>(({ ...props }, ref) => {\\n\\tconst { error, formItemId, formDescriptionId, formMessageId } = useFormField()\\n\\n\\treturn (\\n\\t\\t<Slot\\n\\t\\t\\tref={ref}\\n\\t\\t\\tid={formItemId}\\n\\t\\t\\taria-describedby={\\n\\t\\t\\t\\t!error\\n\\t\\t\\t\\t\\t? `${formDescriptionId}`\\n\\t\\t\\t\\t\\t: `${formDescriptionId} ${formMessageId}`\\n\\t\\t\\t}\\n\\t\\t\\taria-invalid={!!error}\\n\\t\\t\\t{...props}\\n\\t\\t/>\\n\\t)\\n})\\nFormControl.displayName = 'FormControl'\\n\\nconst FormDescription = React.forwardRef<\\n\\tHTMLParagraphElement,\\n\\tReact.HTMLAttributes<HTMLParagraphElement>\\n>(({ className, ...props }, ref) => {\\n\\tconst { formDescriptionId } = useFormField()\\n\\n\\treturn (\\n\\t\\t<p\\n\\t\\t\\tref={ref}\\n\\t\\t\\tid={formDescriptionId}\\n\\t\\t\\tclassName={cn('text-sm text-muted-foreground', className)}\\n\\t\\t\\t{...props}\\n\\t\\t/>\\n\\t)\\n})\\nFormDescription.displayName = 'FormDescription'\\n\\nconst FormMessage = React.forwardRef<\\n\\tHTMLParagraphElement,\\n\\tReact.HTMLAttributes<HTMLParagraphElement>\\n>(({ className, children, ...props }, ref) => {\\n\\tconst { error, formMessageId } = useFormField()\\n\\tconst body = error ? String(error?.message) : children\\n\\n\\tif (!body) {\\n\\t\\treturn null\\n\\t}\\n\\n\\treturn (\\n\\t\\t<p\\n\\t\\t\\tref={ref}\\n\\t\\t\\tid={formMessageId}\\n\\t\\t\\tclassName={cn('text-sm font-medium text-destructive', className)}\\n\\t\\t\\t{...props}\\n\\t\\t>\\n\\t\\t\\t{body}\\n\\t\\t</p>\\n\\t)\\n})\\nFormMessage.displayName = 'FormMessage'\\n\\nexport {\\n\\tuseFormField,\\n\\tForm,\\n\\tFormItem,\\n\\tFormLabel,\\n\\tFormControl,\\n\\tFormDescription,\\n\\tFormMessage,\\n\\tFormField,\\n}\\n\"",
  "examples": [
    {
      "source": "form.tsx",
      "code": "\"import * as React from 'react'\\nimport * as LabelPrimitive from '@radix-ui/react-label'\\nimport { Slot } from '@radix-ui/react-slot'\\nimport {\\n\\tController,\\n\\tControllerProps,\\n\\tFieldPath,\\n\\tFieldValues,\\n\\tFormProvider,\\n\\tuseFormContext,\\n} from 'react-hook-form'\\n\\nimport { cn } from '@/modules/shadcn/lib/utils'\\nimport { Label } from '@/modules/shadcn/components/ui'\\n\\nconst Form = FormProvider\\n\\ntype FormFieldContextValue<\\n\\tTFieldValues extends FieldValues = FieldValues,\\n\\tTName extends FieldPath<TFieldValues> = FieldPath<TFieldValues>,\\n> = {\\n\\tname: TName\\n}\\n\\nconst FormFieldContext = React.createContext<FormFieldContextValue>(\\n\\t{} as FormFieldContextValue\\n)\\n\\nconst FormField = <\\n\\tTFieldValues extends FieldValues = FieldValues,\\n\\tTName extends FieldPath<TFieldValues> = FieldPath<TFieldValues>,\\n>({\\n\\t...props\\n}: ControllerProps<TFieldValues, TName>) => {\\n\\treturn (\\n\\t\\t<FormFieldContext.Provider value={{ name: props.name }}>\\n\\t\\t\\t<Controller {...props} />\\n\\t\\t</FormFieldContext.Provider>\\n\\t)\\n}\\n\\nconst useFormField = () => {\\n\\tconst fieldContext = React.useContext(FormFieldContext)\\n\\tconst itemContext = React.useContext(FormItemContext)\\n\\tconst { getFieldState, formState } = useFormContext()\\n\\n\\tconst fieldState = getFieldState(fieldContext.name, formState)\\n\\n\\tif (!fieldContext) {\\n\\t\\tthrow new Error('useFormField should be used within <FormField>')\\n\\t}\\n\\n\\tconst { id } = itemContext\\n\\n\\treturn {\\n\\t\\tid,\\n\\t\\tname: fieldContext.name,\\n\\t\\tformItemId: `${id}-form-item`,\\n\\t\\tformDescriptionId: `${id}-form-item-description`,\\n\\t\\tformMessageId: `${id}-form-item-message`,\\n\\t\\t...fieldState,\\n\\t}\\n}\\n\\ntype FormItemContextValue = {\\n\\tid: string\\n}\\n\\nconst FormItemContext = React.createContext<FormItemContextValue>(\\n\\t{} as FormItemContextValue\\n)\\n\\nconst FormItem = React.forwardRef<\\n\\tHTMLDivElement,\\n\\tReact.HTMLAttributes<HTMLDivElement>\\n>(({ className, ...props }, ref) => {\\n\\tconst id = React.useId()\\n\\n\\treturn (\\n\\t\\t<FormItemContext.Provider value={{ id }}>\\n\\t\\t\\t<div ref={ref} className={cn('space-y-2', className)} {...props} />\\n\\t\\t</FormItemContext.Provider>\\n\\t)\\n})\\nFormItem.displayName = 'FormItem'\\n\\nconst FormLabel = React.forwardRef<\\n\\tReact.ElementRef<typeof LabelPrimitive.Root>,\\n\\tReact.ComponentPropsWithoutRef<typeof LabelPrimitive.Root>\\n>(({ className, ...props }, ref) => {\\n\\tconst { error, formItemId } = useFormField()\\n\\n\\treturn (\\n\\t\\t<Label\\n\\t\\t\\tref={ref}\\n\\t\\t\\tclassName={cn(error && 'text-destructive', className)}\\n\\t\\t\\thtmlFor={formItemId}\\n\\t\\t\\t{...props}\\n\\t\\t/>\\n\\t)\\n})\\nFormLabel.displayName = 'FormLabel'\\n\\nconst FormControl = React.forwardRef<\\n\\tReact.ElementRef<typeof Slot>,\\n\\tReact.ComponentPropsWithoutRef<typeof Slot>\\n>(({ ...props }, ref) => {\\n\\tconst { error, formItemId, formDescriptionId, formMessageId } = useFormField()\\n\\n\\treturn (\\n\\t\\t<Slot\\n\\t\\t\\tref={ref}\\n\\t\\t\\tid={formItemId}\\n\\t\\t\\taria-describedby={\\n\\t\\t\\t\\t!error\\n\\t\\t\\t\\t\\t? `${formDescriptionId}`\\n\\t\\t\\t\\t\\t: `${formDescriptionId} ${formMessageId}`\\n\\t\\t\\t}\\n\\t\\t\\taria-invalid={!!error}\\n\\t\\t\\t{...props}\\n\\t\\t/>\\n\\t)\\n})\\nFormControl.displayName = 'FormControl'\\n\\nconst FormDescription = React.forwardRef<\\n\\tHTMLParagraphElement,\\n\\tReact.HTMLAttributes<HTMLParagraphElement>\\n>(({ className, ...props }, ref) => {\\n\\tconst { formDescriptionId } = useFormField()\\n\\n\\treturn (\\n\\t\\t<p\\n\\t\\t\\tref={ref}\\n\\t\\t\\tid={formDescriptionId}\\n\\t\\t\\tclassName={cn('text-sm text-muted-foreground', className)}\\n\\t\\t\\t{...props}\\n\\t\\t/>\\n\\t)\\n})\\nFormDescription.displayName = 'FormDescription'\\n\\nconst FormMessage = React.forwardRef<\\n\\tHTMLParagraphElement,\\n\\tReact.HTMLAttributes<HTMLParagraphElement>\\n>(({ className, children, ...props }, ref) => {\\n\\tconst { error, formMessageId } = useFormField()\\n\\tconst body = error ? String(error?.message) : children\\n\\n\\tif (!body) {\\n\\t\\treturn null\\n\\t}\\n\\n\\treturn (\\n\\t\\t<p\\n\\t\\t\\tref={ref}\\n\\t\\t\\tid={formMessageId}\\n\\t\\t\\tclassName={cn('text-sm font-medium text-destructive', className)}\\n\\t\\t\\t{...props}\\n\\t\\t>\\n\\t\\t\\t{body}\\n\\t\\t</p>\\n\\t)\\n})\\nFormMessage.displayName = 'FormMessage'\\n\\nexport {\\n\\tuseFormField,\\n\\tForm,\\n\\tFormItem,\\n\\tFormLabel,\\n\\tFormControl,\\n\\tFormDescription,\\n\\tFormMessage,\\n\\tFormField,\\n}\\n\""
    }
  ]
}

]
